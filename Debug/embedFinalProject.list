
embedQuizApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000108c  0800be1c  0800be1c  0000ce1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea8  0800cea8  0000e15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cea8  0800cea8  0000dea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceb0  0800ceb0  0000e15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceb0  0800ceb0  0000deb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ceb4  0800ceb4  0000deb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800ceb8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000215c  2000015c  0800d014  0000e15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022b8  0800d014  0000e2b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d475  00000000  00000000  0000e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004254  00000000  00000000  0002b601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b4  00000000  00000000  000311c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d25e  00000000  00000000  0003257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215b3  00000000  00000000  0004f7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6cd3  00000000  00000000  00070d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117a60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000779c  00000000  00000000  00117aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be04 	.word	0x0800be04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800be04 	.word	0x0800be04

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <GenerateAnalogRandomSeed>:
/**
  * @brief  Basit bir hashing fonksiyonu ile seed değerini karıştırır.
  * @param  input: Girdi değer
  * @retval Karma değer
  */
uint32_t GenerateAnalogRandomSeed(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]

    // ADC'yi başlat
    HAL_ADC_Start(&hadc1);
 80005aa:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <GenerateAnalogRandomSeed+0x38>)
 80005ac:	f001 fb92 	bl	8001cd4 <HAL_ADC_Start>

    // ADC ölçümünü bekle
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <GenerateAnalogRandomSeed+0x38>)
 80005b6:	f001 fc74 	bl	8001ea2 <HAL_ADC_PollForConversion>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d103      	bne.n	80005c8 <GenerateAnalogRandomSeed+0x28>
        adcValue = HAL_ADC_GetValue(&hadc1);  // ADC ölçüm sonucu
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <GenerateAnalogRandomSeed+0x38>)
 80005c2:	f001 fcf9 	bl	8001fb8 <HAL_ADC_GetValue>
 80005c6:	6078      	str	r0, [r7, #4]
    }

    // ADC'yi durdur
    HAL_ADC_Stop(&hadc1);
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <GenerateAnalogRandomSeed+0x38>)
 80005ca:	f001 fc37 	bl	8001e3c <HAL_ADC_Stop>

    return adcValue;  // Rastgelelik kaynağı olarak ADC değeri
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000240 	.word	0x20000240

080005dc <InitializeRandomSeed>:

void InitializeRandomSeed(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    uint32_t seed = GenerateAnalogRandomSeed();  // ADC'den rastgelelik
 80005e2:	f7ff ffdd 	bl	80005a0 <GenerateAnalogRandomSeed>
 80005e6:	6078      	str	r0, [r7, #4]
    seed ^= HAL_GetTick();  // Seed'i zamanla karıştır
 80005e8:	f001 fb00 	bl	8001bec <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4053      	eors	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
    srand(seed);  // Rastgele sayı üreteci başlat
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f00a f99f 	bl	800a938 <srand>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <GenerateRandomQuestion>:

/**
  * @brief  Rastgele dört işlem sorusu üretir ve global soru değişkenine yazdırır.
  */
void GenerateRandomQuestion(ZorlukSeviyesi zorluk) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af02      	add	r7, sp, #8
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
    int sayi1, sayi2;
    char islem;

    switch (zorluk) {
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d06e      	beq.n	80006f2 <GenerateRandomQuestion+0xee>
 8000614:	2b02      	cmp	r3, #2
 8000616:	f300 80b6 	bgt.w	8000786 <GenerateRandomQuestion+0x182>
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <GenerateRandomQuestion+0x20>
 800061e:	2b01      	cmp	r3, #1
 8000620:	d02a      	beq.n	8000678 <GenerateRandomQuestion+0x74>
 8000622:	e0b0      	b.n	8000786 <GenerateRandomQuestion+0x182>
        case ZORLUK_KOLAY:
            sayi1 = rand() % 50 + 1;   // 1–50 arası
 8000624:	f00a f9b6 	bl	800a994 <rand>
 8000628:	4602      	mov	r2, r0
 800062a:	4b74      	ldr	r3, [pc, #464]	@ (80007fc <GenerateRandomQuestion+0x1f8>)
 800062c:	fb83 1302 	smull	r1, r3, r3, r2
 8000630:	1119      	asrs	r1, r3, #4
 8000632:	17d3      	asrs	r3, r2, #31
 8000634:	1acb      	subs	r3, r1, r3
 8000636:	2132      	movs	r1, #50	@ 0x32
 8000638:	fb01 f303 	mul.w	r3, r1, r3
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
            sayi2 = rand() % 50 + 1;   // 1–50 arası
 8000642:	f00a f9a7 	bl	800a994 <rand>
 8000646:	4602      	mov	r2, r0
 8000648:	4b6c      	ldr	r3, [pc, #432]	@ (80007fc <GenerateRandomQuestion+0x1f8>)
 800064a:	fb83 1302 	smull	r1, r3, r3, r2
 800064e:	1119      	asrs	r1, r3, #4
 8000650:	17d3      	asrs	r3, r2, #31
 8000652:	1acb      	subs	r3, r1, r3
 8000654:	2132      	movs	r1, #50	@ 0x32
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	3301      	adds	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
            islem = (rand() % 2 == 0) ? '+' : '-'; // Toplama veya çıkarma
 8000660:	f00a f998 	bl	800a994 <rand>
 8000664:	4603      	mov	r3, r0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <GenerateRandomQuestion+0x6e>
 800066e:	232b      	movs	r3, #43	@ 0x2b
 8000670:	e000      	b.n	8000674 <GenerateRandomQuestion+0x70>
 8000672:	232d      	movs	r3, #45	@ 0x2d
 8000674:	73fb      	strb	r3, [r7, #15]
            break;
 8000676:	e086      	b.n	8000786 <GenerateRandomQuestion+0x182>

        case ZORLUK_ORTA:
            sayi1 = rand() % 100 + 1;  // 1–100 arası
 8000678:	f00a f98c 	bl	800a994 <rand>
 800067c:	4602      	mov	r2, r0
 800067e:	4b5f      	ldr	r3, [pc, #380]	@ (80007fc <GenerateRandomQuestion+0x1f8>)
 8000680:	fb83 1302 	smull	r1, r3, r3, r2
 8000684:	1159      	asrs	r1, r3, #5
 8000686:	17d3      	asrs	r3, r2, #31
 8000688:	1acb      	subs	r3, r1, r3
 800068a:	2164      	movs	r1, #100	@ 0x64
 800068c:	fb01 f303 	mul.w	r3, r1, r3
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
            sayi2 = rand() % 100 + 1;  // 1–100 arası
 8000696:	f00a f97d 	bl	800a994 <rand>
 800069a:	4602      	mov	r2, r0
 800069c:	4b57      	ldr	r3, [pc, #348]	@ (80007fc <GenerateRandomQuestion+0x1f8>)
 800069e:	fb83 1302 	smull	r1, r3, r3, r2
 80006a2:	1159      	asrs	r1, r3, #5
 80006a4:	17d3      	asrs	r3, r2, #31
 80006a6:	1acb      	subs	r3, r1, r3
 80006a8:	2164      	movs	r1, #100	@ 0x64
 80006aa:	fb01 f303 	mul.w	r3, r1, r3
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	3301      	adds	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
            switch (rand() % 3) {      // Toplama, çıkarma, çarpma
 80006b4:	f00a f96e 	bl	800a994 <rand>
 80006b8:	4601      	mov	r1, r0
 80006ba:	4b51      	ldr	r3, [pc, #324]	@ (8000800 <GenerateRandomQuestion+0x1fc>)
 80006bc:	fb83 3201 	smull	r3, r2, r3, r1
 80006c0:	17cb      	asrs	r3, r1, #31
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	441a      	add	r2, r3
 80006ca:	1a8b      	subs	r3, r1, r2
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d00c      	beq.n	80006ea <GenerateRandomQuestion+0xe6>
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	dc55      	bgt.n	8000780 <GenerateRandomQuestion+0x17c>
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <GenerateRandomQuestion+0xda>
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d003      	beq.n	80006e4 <GenerateRandomQuestion+0xe0>
                case 0: islem = '+'; break;
                case 1: islem = '-'; break;
                case 2: islem = '*'; break;
            }
            break;
 80006dc:	e050      	b.n	8000780 <GenerateRandomQuestion+0x17c>
                case 0: islem = '+'; break;
 80006de:	232b      	movs	r3, #43	@ 0x2b
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	e005      	b.n	80006f0 <GenerateRandomQuestion+0xec>
                case 1: islem = '-'; break;
 80006e4:	232d      	movs	r3, #45	@ 0x2d
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	e002      	b.n	80006f0 <GenerateRandomQuestion+0xec>
                case 2: islem = '*'; break;
 80006ea:	232a      	movs	r3, #42	@ 0x2a
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	bf00      	nop
            break;
 80006f0:	e046      	b.n	8000780 <GenerateRandomQuestion+0x17c>

        case ZORLUK_ZOR:
            sayi1 = rand() % 100 + 1;  // 1–100 arası
 80006f2:	f00a f94f 	bl	800a994 <rand>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b40      	ldr	r3, [pc, #256]	@ (80007fc <GenerateRandomQuestion+0x1f8>)
 80006fa:	fb83 1302 	smull	r1, r3, r3, r2
 80006fe:	1159      	asrs	r1, r3, #5
 8000700:	17d3      	asrs	r3, r2, #31
 8000702:	1acb      	subs	r3, r1, r3
 8000704:	2164      	movs	r1, #100	@ 0x64
 8000706:	fb01 f303 	mul.w	r3, r1, r3
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
            sayi2 = rand() % 100 + 1;  // 1–100 arası
 8000710:	f00a f940 	bl	800a994 <rand>
 8000714:	4602      	mov	r2, r0
 8000716:	4b39      	ldr	r3, [pc, #228]	@ (80007fc <GenerateRandomQuestion+0x1f8>)
 8000718:	fb83 1302 	smull	r1, r3, r3, r2
 800071c:	1159      	asrs	r1, r3, #5
 800071e:	17d3      	asrs	r3, r2, #31
 8000720:	1acb      	subs	r3, r1, r3
 8000722:	2164      	movs	r1, #100	@ 0x64
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	3301      	adds	r3, #1
 800072c:	613b      	str	r3, [r7, #16]
            switch (rand() % 4) {      // Toplama, çıkarma, çarpma, bölme
 800072e:	f00a f931 	bl	800a994 <rand>
 8000732:	4603      	mov	r3, r0
 8000734:	425a      	negs	r2, r3
 8000736:	f003 0303 	and.w	r3, r3, #3
 800073a:	f002 0203 	and.w	r2, r2, #3
 800073e:	bf58      	it	pl
 8000740:	4253      	negpl	r3, r2
 8000742:	2b03      	cmp	r3, #3
 8000744:	d81e      	bhi.n	8000784 <GenerateRandomQuestion+0x180>
 8000746:	a201      	add	r2, pc, #4	@ (adr r2, 800074c <GenerateRandomQuestion+0x148>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	0800075d 	.word	0x0800075d
 8000750:	08000763 	.word	0x08000763
 8000754:	08000769 	.word	0x08000769
 8000758:	0800076f 	.word	0x0800076f
                case 0: islem = '+'; break;
 800075c:	232b      	movs	r3, #43	@ 0x2b
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e00d      	b.n	800077e <GenerateRandomQuestion+0x17a>
                case 1: islem = '-'; break;
 8000762:	232d      	movs	r3, #45	@ 0x2d
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e00a      	b.n	800077e <GenerateRandomQuestion+0x17a>
                case 2: islem = '*'; break;
 8000768:	232a      	movs	r3, #42	@ 0x2a
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	e007      	b.n	800077e <GenerateRandomQuestion+0x17a>
                case 3:
                    islem = '/';
 800076e:	232f      	movs	r3, #47	@ 0x2f
 8000770:	73fb      	strb	r3, [r7, #15]
                    if (sayi2 == 0) sayi2 = 1; // Sıfıra bölünmeyi önle
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <GenerateRandomQuestion+0x178>
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
                    break;
 800077c:	bf00      	nop
            }
            break;
 800077e:	e001      	b.n	8000784 <GenerateRandomQuestion+0x180>
            break;
 8000780:	bf00      	nop
 8000782:	e000      	b.n	8000786 <GenerateRandomQuestion+0x182>
            break;
 8000784:	bf00      	nop
    }

    // Doğru cevabı hesapla
    switch (islem) {
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	3b2a      	subs	r3, #42	@ 0x2a
 800078a:	2b05      	cmp	r3, #5
 800078c:	d828      	bhi.n	80007e0 <GenerateRandomQuestion+0x1dc>
 800078e:	a201      	add	r2, pc, #4	@ (adr r2, 8000794 <GenerateRandomQuestion+0x190>)
 8000790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000794:	080007c5 	.word	0x080007c5
 8000798:	080007ad 	.word	0x080007ad
 800079c:	080007e1 	.word	0x080007e1
 80007a0:	080007b9 	.word	0x080007b9
 80007a4:	080007e1 	.word	0x080007e1
 80007a8:	080007d3 	.word	0x080007d3
        case '+': dogru_cevap = sayi1 + sayi2; break;
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a14      	ldr	r2, [pc, #80]	@ (8000804 <GenerateRandomQuestion+0x200>)
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	e013      	b.n	80007e0 <GenerateRandomQuestion+0x1dc>
        case '-': dogru_cevap = sayi1 - sayi2; break;
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <GenerateRandomQuestion+0x200>)
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	e00d      	b.n	80007e0 <GenerateRandomQuestion+0x1dc>
        case '*': dogru_cevap = sayi1 * sayi2; break;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	fb02 f303 	mul.w	r3, r2, r3
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <GenerateRandomQuestion+0x200>)
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	e006      	b.n	80007e0 <GenerateRandomQuestion+0x1dc>
        case '/': dogru_cevap = sayi1 / sayi2; break;
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <GenerateRandomQuestion+0x200>)
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	bf00      	nop
    }

    // Soruyu oluştur
    sprintf(soru, "Sorunuz: %d %c %d = ?\n", sayi1, islem, sayi2);
 80007e0:	7bfa      	ldrb	r2, [r7, #15]
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	4613      	mov	r3, r2
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	4907      	ldr	r1, [pc, #28]	@ (8000808 <GenerateRandomQuestion+0x204>)
 80007ec:	4807      	ldr	r0, [pc, #28]	@ (800080c <GenerateRandomQuestion+0x208>)
 80007ee:	f00a fa55 	bl	800ac9c <siprintf>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	51eb851f 	.word	0x51eb851f
 8000800:	55555556 	.word	0x55555556
 8000804:	200001b8 	.word	0x200001b8
 8000808:	0800be1c 	.word	0x0800be1c
 800080c:	200001fc 	.word	0x200001fc

08000810 <CheckUserAnswer>:

/**
  * @brief  Kullanıcının verdiği cevabı kontrol eder ve performans verisini günceller.
  * @param  data: Kullanıcıdan gelen cevap (string olarak)
  */
void CheckUserAnswer(uint8_t *data) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af02      	add	r7, sp, #8
 8000816:	6078      	str	r0, [r7, #4]
    int kullanici_cevap = atoi((char *)data); // Kullanıcı cevabını int'e çevir
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f00a f889 	bl	800a930 <atoi>
 800081e:	60f8      	str	r0, [r7, #12]

    if (kullanici_cevap == dogru_cevap) {
 8000820:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <CheckUserAnswer+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	429a      	cmp	r2, r3
 8000828:	d122      	bne.n	8000870 <CheckUserAnswer+0x60>
        performans.dogru_sayisi++;
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <CheckUserAnswer+0xd4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	4a2c      	ldr	r2, [pc, #176]	@ (80008e4 <CheckUserAnswer+0xd4>)
 8000832:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Yeşil LED yak
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	482b      	ldr	r0, [pc, #172]	@ (80008e8 <CheckUserAnswer+0xd8>)
 800083c:	f002 f920 	bl	8002a80 <HAL_GPIO_WritePin>
        ssd1306_SetCursor(0, 12);
 8000840:	210c      	movs	r1, #12
 8000842:	2000      	movs	r0, #0
 8000844:	f001 f922 	bl	8001a8c <ssd1306_SetCursor>
        ssd1306_WriteString("DOGRU", Font_7x10, White);
 8000848:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <CheckUserAnswer+0xdc>)
 800084a:	2201      	movs	r2, #1
 800084c:	9200      	str	r2, [sp, #0]
 800084e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000850:	4827      	ldr	r0, [pc, #156]	@ (80008f0 <CheckUserAnswer+0xe0>)
 8000852:	f001 f8f5 	bl	8001a40 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8000856:	f000 ffe7 	bl	8001828 <ssd1306_UpdateScreen>
        HAL_Delay(2000);
 800085a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800085e:	f001 f9d1 	bl	8001c04 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000868:	481f      	ldr	r0, [pc, #124]	@ (80008e8 <CheckUserAnswer+0xd8>)
 800086a:	f002 f909 	bl	8002a80 <HAL_GPIO_WritePin>

        ssd1306_UpdateScreen();
        HAL_Delay(2000);
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
    }
}
 800086e:	e033      	b.n	80008d8 <CheckUserAnswer+0xc8>
        performans.yanlis_sayisi++;
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <CheckUserAnswer+0xd4>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	4a1b      	ldr	r2, [pc, #108]	@ (80008e4 <CheckUserAnswer+0xd4>)
 8000878:	6053      	str	r3, [r2, #4]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Kırmızı LED yak
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000880:	4819      	ldr	r0, [pc, #100]	@ (80008e8 <CheckUserAnswer+0xd8>)
 8000882:	f002 f8fd 	bl	8002a80 <HAL_GPIO_WritePin>
        ssd1306_SetCursor(0, 0);
 8000886:	2100      	movs	r1, #0
 8000888:	2000      	movs	r0, #0
 800088a:	f001 f8ff 	bl	8001a8c <ssd1306_SetCursor>
        ssd1306_WriteString("YANLIS", Font_7x10, White);
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <CheckUserAnswer+0xdc>)
 8000890:	2201      	movs	r2, #1
 8000892:	9200      	str	r2, [sp, #0]
 8000894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000896:	4817      	ldr	r0, [pc, #92]	@ (80008f4 <CheckUserAnswer+0xe4>)
 8000898:	f001 f8d2 	bl	8001a40 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 12);
 800089c:	210c      	movs	r1, #12
 800089e:	2000      	movs	r0, #0
 80008a0:	f001 f8f4 	bl	8001a8c <ssd1306_SetCursor>
        sprintf(dogru_cevap_buffer, "Dogru Cevap: %d", dogru_cevap);
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <CheckUserAnswer+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4913      	ldr	r1, [pc, #76]	@ (80008f8 <CheckUserAnswer+0xe8>)
 80008ac:	4813      	ldr	r0, [pc, #76]	@ (80008fc <CheckUserAnswer+0xec>)
 80008ae:	f00a f9f5 	bl	800ac9c <siprintf>
        ssd1306_WriteString(dogru_cevap_buffer, Font_6x8, White);
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <CheckUserAnswer+0xf0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	9200      	str	r2, [sp, #0]
 80008b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008ba:	4810      	ldr	r0, [pc, #64]	@ (80008fc <CheckUserAnswer+0xec>)
 80008bc:	f001 f8c0 	bl	8001a40 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80008c0:	f000 ffb2 	bl	8001828 <ssd1306_UpdateScreen>
        HAL_Delay(2000);
 80008c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008c8:	f001 f99c 	bl	8001c04 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <CheckUserAnswer+0xd8>)
 80008d4:	f002 f8d4 	bl	8002a80 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001b8 	.word	0x200001b8
 80008e4:	2000036c 	.word	0x2000036c
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	0800ccbc 	.word	0x0800ccbc
 80008f0:	0800be34 	.word	0x0800be34
 80008f4:	0800be3c 	.word	0x0800be3c
 80008f8:	0800be44 	.word	0x0800be44
 80008fc:	200001bc 	.word	0x200001bc
 8000900:	0800ccb0 	.word	0x0800ccb0

08000904 <ReadPotentiometer>:

/**
  * @brief  Potansiyometre değerini ADC üzerinden okur ve değeri döndürür.
  * @retval ADC değeri
  */
uint32_t ReadPotentiometer(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]

    // ADC'yi başlat
    HAL_ADC_Start(&hadc1);
 800090e:	480b      	ldr	r0, [pc, #44]	@ (800093c <ReadPotentiometer+0x38>)
 8000910:	f001 f9e0 	bl	8001cd4 <HAL_ADC_Start>

    // Ölçüm tamamlanana kadar bekle
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	4808      	ldr	r0, [pc, #32]	@ (800093c <ReadPotentiometer+0x38>)
 800091a:	f001 fac2 	bl	8001ea2 <HAL_ADC_PollForConversion>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d103      	bne.n	800092c <ReadPotentiometer+0x28>
        // Okunan değeri al
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <ReadPotentiometer+0x38>)
 8000926:	f001 fb47 	bl	8001fb8 <HAL_ADC_GetValue>
 800092a:	6078      	str	r0, [r7, #4]
    }

    // ADC'yi durdur
    HAL_ADC_Stop(&hadc1);
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <ReadPotentiometer+0x38>)
 800092e:	f001 fa85 	bl	8001e3c <HAL_ADC_Stop>

    return adcValue;
 8000932:	687b      	ldr	r3, [r7, #4]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000240 	.word	0x20000240

08000940 <GetDifficultyLevel>:
  *         0-1365   : KOLAY
  *         1365-2730: ORTA
  *         2730-4095: ZOR
  * @retval ZorlukSeviyesi enum değeri
  */
ZorlukSeviyesi GetDifficultyLevel(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
    uint32_t adcValue = ReadPotentiometer();
 8000946:	f7ff ffdd 	bl	8000904 <ReadPotentiometer>
 800094a:	6078      	str	r0, [r7, #4]

    if (adcValue < 1365) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f240 5254 	movw	r2, #1364	@ 0x554
 8000952:	4293      	cmp	r3, r2
 8000954:	d801      	bhi.n	800095a <GetDifficultyLevel+0x1a>
        return ZORLUK_KOLAY;
 8000956:	2300      	movs	r3, #0
 8000958:	e007      	b.n	800096a <GetDifficultyLevel+0x2a>
    } else if (adcValue < 2730) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f640 22a9 	movw	r2, #2729	@ 0xaa9
 8000960:	4293      	cmp	r3, r2
 8000962:	d801      	bhi.n	8000968 <GetDifficultyLevel+0x28>
        return ZORLUK_ORTA;
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <GetDifficultyLevel+0x2a>
    } else {
        return ZORLUK_ZOR;
 8000968:	2302      	movs	r3, #2
    }
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <SetCountdownByDifficulty>:

/**
  * @brief  Verilen zorluk seviyesine göre geri sayım süresini ayarlar.
  * @param  zorluk: ZorlukSeviyesi
  */
void SetCountdownByDifficulty(ZorlukSeviyesi zorluk) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
    switch (zorluk) {
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d00e      	beq.n	80009a2 <SetCountdownByDifficulty+0x2e>
 8000984:	2b02      	cmp	r3, #2
 8000986:	dc10      	bgt.n	80009aa <SetCountdownByDifficulty+0x36>
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <SetCountdownByDifficulty+0x1e>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d004      	beq.n	800099a <SetCountdownByDifficulty+0x26>
 8000990:	e00b      	b.n	80009aa <SetCountdownByDifficulty+0x36>
        case ZORLUK_KOLAY:
            countdown = 30;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <SetCountdownByDifficulty+0x4c>)
 8000994:	221e      	movs	r2, #30
 8000996:	701a      	strb	r2, [r3, #0]
            break;
 8000998:	e00b      	b.n	80009b2 <SetCountdownByDifficulty+0x3e>
        case ZORLUK_ORTA:
            countdown = 20;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <SetCountdownByDifficulty+0x4c>)
 800099c:	2214      	movs	r2, #20
 800099e:	701a      	strb	r2, [r3, #0]
            break;
 80009a0:	e007      	b.n	80009b2 <SetCountdownByDifficulty+0x3e>
        case ZORLUK_ZOR:
            countdown = 10;
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <SetCountdownByDifficulty+0x4c>)
 80009a4:	220a      	movs	r2, #10
 80009a6:	701a      	strb	r2, [r3, #0]
            break;
 80009a8:	e003      	b.n	80009b2 <SetCountdownByDifficulty+0x3e>
        default:
            countdown = 20; // Varsayılan
 80009aa:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <SetCountdownByDifficulty+0x4c>)
 80009ac:	2214      	movs	r2, #20
 80009ae:	701a      	strb	r2, [r3, #0]
            break;
 80009b0:	bf00      	nop
    }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000

080009c4 <GetDifficultyString>:
/**
  * @brief  Zorluk enum değerini string olarak döndürür.
  * @param  zorluk: ZorlukSeviyesi
  * @retval Zorluk seviyesini temsil eden string
  */
const char* GetDifficultyString(ZorlukSeviyesi zorluk) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
    switch (zorluk) {
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d00a      	beq.n	80009ea <GetDifficultyString+0x26>
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	dc0a      	bgt.n	80009ee <GetDifficultyString+0x2a>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <GetDifficultyString+0x1e>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d002      	beq.n	80009e6 <GetDifficultyString+0x22>
 80009e0:	e005      	b.n	80009ee <GetDifficultyString+0x2a>
        case ZORLUK_KOLAY:
            return "KOLAY";
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <GetDifficultyString+0x38>)
 80009e4:	e004      	b.n	80009f0 <GetDifficultyString+0x2c>
        case ZORLUK_ORTA:
            return "ORTA";
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <GetDifficultyString+0x3c>)
 80009e8:	e002      	b.n	80009f0 <GetDifficultyString+0x2c>
        case ZORLUK_ZOR:
            return "ZOR";
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <GetDifficultyString+0x40>)
 80009ec:	e000      	b.n	80009f0 <GetDifficultyString+0x2c>
        default:
            return "BILINMIYOR";
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <GetDifficultyString+0x44>)
    }
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	0800be54 	.word	0x0800be54
 8000a00:	0800be5c 	.word	0x0800be5c
 8000a04:	0800be64 	.word	0x0800be64
 8000a08:	0800be68 	.word	0x0800be68

08000a0c <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief  Timer kesmesi. Her kesmede geri sayım yapılır.
  * @param  htim: Timer handle
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d10f      	bne.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x30>
        if (countdown > 0) {
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d007      	beq.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x2a>
            countdown--;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a32:	701a      	strb	r2, [r3, #0]
        } else {
            timer_done = 1;
        }
    }
}
 8000a34:	e002      	b.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x30>
            timer_done = 1;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	200002dc 	.word	0x200002dc
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	2000023c 	.word	0x2000023c

08000a54 <main>:

/* --- main--- */
int main(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	@ 0x50
 8000a58:	af02      	add	r7, sp, #8
    HAL_Init();
 8000a5a:	f001 f861 	bl	8001b20 <HAL_Init>
    SystemClock_Config();
 8000a5e:	f000 f94f 	bl	8000d00 <SystemClock_Config>
    MX_GPIO_Init();
 8000a62:	f000 faad 	bl	8000fc0 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 8000a66:	f009 fa2f 	bl	8009ec8 <MX_USB_DEVICE_Init>
    MX_USART1_UART_Init();
 8000a6a:	f000 fa7f 	bl	8000f6c <MX_USART1_UART_Init>
    MX_I2C1_Init();
 8000a6e:	f000 fa01 	bl	8000e74 <MX_I2C1_Init>
    MX_TIM2_Init();
 8000a72:	f000 fa2d 	bl	8000ed0 <MX_TIM2_Init>
    MX_ADC1_Init();
 8000a76:	f000 f9ab 	bl	8000dd0 <MX_ADC1_Init>

    /* Timer'ı başlat (interrupt) */
    HAL_TIM_Base_Start_IT(&htim2);
 8000a7a:	488d      	ldr	r0, [pc, #564]	@ (8000cb0 <main+0x25c>)
 8000a7c:	f004 fc02 	bl	8005284 <HAL_TIM_Base_Start_IT>

    /* Rastgele sayı üretimi için seed oluştur */
    InitializeRandomSeed();
 8000a80:	f7ff fdac 	bl	80005dc <InitializeRandomSeed>

    char countdown_message[20];
    ssd1306_Init();
 8000a84:	f000 fe4e 	bl	8001724 <ssd1306_Init>

    /* Uygulama ilk açıldığında zorluk seviyesini göster */
    ZorlukSeviyesi zorluk = GetDifficultyLevel();
 8000a88:	f7ff ff5a 	bl	8000940 <GetDifficultyLevel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    SetCountdownByDifficulty(zorluk);
 8000a92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff6c 	bl	8000974 <SetCountdownByDifficulty>

    const char* zorluk_seviyesi_str = GetDifficultyString(zorluk);
 8000a9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff8f 	bl	80009c4 <GetDifficultyString>
 8000aa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    ssd1306_SetCursor(0, 12);
 8000aa8:	210c      	movs	r1, #12
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 ffee 	bl	8001a8c <ssd1306_SetCursor>
    ssd1306_WriteString("Zorluk: ", Font_7x10, White);
 8000ab0:	4b80      	ldr	r3, [pc, #512]	@ (8000cb4 <main+0x260>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	9200      	str	r2, [sp, #0]
 8000ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ab8:	487f      	ldr	r0, [pc, #508]	@ (8000cb8 <main+0x264>)
 8000aba:	f000 ffc1 	bl	8001a40 <ssd1306_WriteString>
    ssd1306_WriteString(zorluk_seviyesi_str, Font_7x10, White);
 8000abe:	4b7d      	ldr	r3, [pc, #500]	@ (8000cb4 <main+0x260>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	9200      	str	r2, [sp, #0]
 8000ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ac6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ac8:	f000 ffba 	bl	8001a40 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000acc:	f000 feac 	bl	8001828 <ssd1306_UpdateScreen>

    while (1) {
        /* Yeni Soru komutu geldiğinde */
        if (strcmp(gelen_buf, "Yeni Soru") == 0) {
 8000ad0:	497a      	ldr	r1, [pc, #488]	@ (8000cbc <main+0x268>)
 8000ad2:	487b      	ldr	r0, [pc, #492]	@ (8000cc0 <main+0x26c>)
 8000ad4:	f7ff fb84 	bl	80001e0 <strcmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 80a6 	bne.w	8000c2c <main+0x1d8>
            ssd1306_Init();
 8000ae0:	f000 fe20 	bl	8001724 <ssd1306_Init>

            /* Her yeni soruda zorluk tekrar okunup countdown yeniden ayarlanabilir */
            ZorlukSeviyesi zorluk = GetDifficultyLevel();
 8000ae4:	f7ff ff2c 	bl	8000940 <GetDifficultyLevel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            SetCountdownByDifficulty(zorluk);
 8000aee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff3e 	bl	8000974 <SetCountdownByDifficulty>

            /* Soru üret ve gönder */
            GenerateRandomQuestion(zorluk);
 8000af8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fd81 	bl	8000604 <GenerateRandomQuestion>
            CDC_Transmit_FS((uint8_t *)soru, strlen(soru));
 8000b02:	4870      	ldr	r0, [pc, #448]	@ (8000cc4 <main+0x270>)
 8000b04:	f7ff fb76 	bl	80001f4 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	486d      	ldr	r0, [pc, #436]	@ (8000cc4 <main+0x270>)
 8000b0e:	f009 faaf 	bl	800a070 <CDC_Transmit_FS>

            /* Kalan süre mesajı */
            sprintf(countdown_message, "Kalan sure: %lu\n", (unsigned long)countdown);
 8000b12:	4b6d      	ldr	r3, [pc, #436]	@ (8000cc8 <main+0x274>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	496b      	ldr	r1, [pc, #428]	@ (8000ccc <main+0x278>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f00a f8bb 	bl	800ac9c <siprintf>
            CDC_Transmit_FS((uint8_t *)countdown_message, strlen(countdown_message));
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb62 	bl	80001f4 <strlen>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f009 fa99 	bl	800a070 <CDC_Transmit_FS>

            /* Gelen buffer temizle */
            memset(gelen_buf, 0, sizeof(gelen_buf));
 8000b3e:	2240      	movs	r2, #64	@ 0x40
 8000b40:	2100      	movs	r1, #0
 8000b42:	485f      	ldr	r0, [pc, #380]	@ (8000cc0 <main+0x26c>)
 8000b44:	f00a f90d 	bl	800ad62 <memset>

            timer_done = 0;
 8000b48:	4b61      	ldr	r3, [pc, #388]	@ (8000cd0 <main+0x27c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
            uint32_t old_countdown = (uint32_t)(-1);
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Timer bitene veya cevap gelene kadar bekle */
            while (!timer_done) {
 8000b54:	e028      	b.n	8000ba8 <main+0x154>
                if (gelen_buf[0] != '\0') {
 8000b56:	4b5a      	ldr	r3, [pc, #360]	@ (8000cc0 <main+0x26c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <main+0x112>
                    /* Kullanıcı cevabı gelmiş, kontrol et */
                    CheckUserAnswer((uint8_t*)gelen_buf);
 8000b5e:	4858      	ldr	r0, [pc, #352]	@ (8000cc0 <main+0x26c>)
 8000b60:	f7ff fe56 	bl	8000810 <CheckUserAnswer>
                    break;
 8000b64:	e025      	b.n	8000bb2 <main+0x15e>
                }
                /* Her 1 saniyede bir countdown değiştiğinde süreyi gönder */
                if (old_countdown != countdown) {
 8000b66:	4b58      	ldr	r3, [pc, #352]	@ (8000cc8 <main+0x274>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d019      	beq.n	8000ba8 <main+0x154>
                    old_countdown = countdown;
 8000b74:	4b54      	ldr	r3, [pc, #336]	@ (8000cc8 <main+0x274>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	647b      	str	r3, [r7, #68]	@ 0x44
                    sprintf(countdown_message, "Kalan sure: %lu\n", (unsigned long)countdown);
 8000b7c:	4b52      	ldr	r3, [pc, #328]	@ (8000cc8 <main+0x274>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	4950      	ldr	r1, [pc, #320]	@ (8000ccc <main+0x278>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f00a f886 	bl	800ac9c <siprintf>
                    CDC_Transmit_FS((uint8_t *)countdown_message, strlen(countdown_message));
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb2d 	bl	80001f4 <strlen>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 fa64 	bl	800a070 <CDC_Transmit_FS>
            while (!timer_done) {
 8000ba8:	4b49      	ldr	r3, [pc, #292]	@ (8000cd0 <main+0x27c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0d1      	beq.n	8000b56 <main+0x102>
                }
            }

            /* Süre dolmuş ama cevap gelmemiş ise */
            if (timer_done && gelen_buf[0] == '\0') {
 8000bb2:	4b47      	ldr	r3, [pc, #284]	@ (8000cd0 <main+0x27c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d037      	beq.n	8000c2c <main+0x1d8>
 8000bbc:	4b40      	ldr	r3, [pc, #256]	@ (8000cc0 <main+0x26c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d133      	bne.n	8000c2c <main+0x1d8>
                performans.zaman_yetmedi++;
 8000bc4:	4b43      	ldr	r3, [pc, #268]	@ (8000cd4 <main+0x280>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a42      	ldr	r2, [pc, #264]	@ (8000cd4 <main+0x280>)
 8000bcc:	6093      	str	r3, [r2, #8]
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd4:	4840      	ldr	r0, [pc, #256]	@ (8000cd8 <main+0x284>)
 8000bd6:	f001 ff53 	bl	8002a80 <HAL_GPIO_WritePin>

                ssd1306_SetCursor(0, 0);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 ff55 	bl	8001a8c <ssd1306_SetCursor>
                ssd1306_WriteString("SURENIZ BITTI", Font_7x10, White);
 8000be2:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <main+0x260>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bea:	483c      	ldr	r0, [pc, #240]	@ (8000cdc <main+0x288>)
 8000bec:	f000 ff28 	bl	8001a40 <ssd1306_WriteString>

                ssd1306_SetCursor(0, 12);
 8000bf0:	210c      	movs	r1, #12
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 ff4a 	bl	8001a8c <ssd1306_SetCursor>
                sprintf(dogru_cevap_buffer, "Dogru Cevap: %d", dogru_cevap);
 8000bf8:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <main+0x28c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4939      	ldr	r1, [pc, #228]	@ (8000ce4 <main+0x290>)
 8000c00:	4839      	ldr	r0, [pc, #228]	@ (8000ce8 <main+0x294>)
 8000c02:	f00a f84b 	bl	800ac9c <siprintf>
                ssd1306_WriteString(dogru_cevap_buffer, Font_6x8, White);
 8000c06:	4b39      	ldr	r3, [pc, #228]	@ (8000cec <main+0x298>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	9200      	str	r2, [sp, #0]
 8000c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0e:	4836      	ldr	r0, [pc, #216]	@ (8000ce8 <main+0x294>)
 8000c10:	f000 ff16 	bl	8001a40 <ssd1306_WriteString>

                ssd1306_UpdateScreen();
 8000c14:	f000 fe08 	bl	8001828 <ssd1306_UpdateScreen>
                HAL_Delay(2000);
 8000c18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c1c:	f000 fff2 	bl	8001c04 <HAL_Delay>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c26:	482c      	ldr	r0, [pc, #176]	@ (8000cd8 <main+0x284>)
 8000c28:	f001 ff2a 	bl	8002a80 <HAL_GPIO_WritePin>
            }
        }

        /* Sonucu Gör komutu geldiğinde */
        if (strcmp(gelen_buf, "Sonucu Gor") == 0) {
 8000c2c:	4930      	ldr	r1, [pc, #192]	@ (8000cf0 <main+0x29c>)
 8000c2e:	4824      	ldr	r0, [pc, #144]	@ (8000cc0 <main+0x26c>)
 8000c30:	f7ff fad6 	bl	80001e0 <strcmp>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f af4a 	bne.w	8000ad0 <main+0x7c>
            memset(gelen_buf, 0, sizeof(gelen_buf));
 8000c3c:	2240      	movs	r2, #64	@ 0x40
 8000c3e:	2100      	movs	r1, #0
 8000c40:	481f      	ldr	r0, [pc, #124]	@ (8000cc0 <main+0x26c>)
 8000c42:	f00a f88e 	bl	800ad62 <memset>
            ssd1306_Init();
 8000c46:	f000 fd6d 	bl	8001724 <ssd1306_Init>

            char buffer[30];
            ssd1306_SetCursor(0, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 ff1d 	bl	8001a8c <ssd1306_SetCursor>
            ssd1306_WriteString("Sonuclar:", Font_6x8, White);
 8000c52:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <main+0x298>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5a:	4826      	ldr	r0, [pc, #152]	@ (8000cf4 <main+0x2a0>)
 8000c5c:	f000 fef0 	bl	8001a40 <ssd1306_WriteString>

            ssd1306_SetCursor(0, 12);
 8000c60:	210c      	movs	r1, #12
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 ff12 	bl	8001a8c <ssd1306_SetCursor>
            sprintf(buffer, "Dogru: %d Yanlis: %d", performans.dogru_sayisi, performans.yanlis_sayisi);
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <main+0x280>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <main+0x280>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	1d38      	adds	r0, r7, #4
 8000c72:	4921      	ldr	r1, [pc, #132]	@ (8000cf8 <main+0x2a4>)
 8000c74:	f00a f812 	bl	800ac9c <siprintf>
            ssd1306_WriteString(buffer, Font_6x8, White);
 8000c78:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <main+0x298>)
 8000c7a:	1d38      	adds	r0, r7, #4
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c82:	f000 fedd 	bl	8001a40 <ssd1306_WriteString>

            ssd1306_SetCursor(0, 24);
 8000c86:	2118      	movs	r1, #24
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 feff 	bl	8001a8c <ssd1306_SetCursor>
            sprintf(buffer, "Zaman Yetmedi: %d", performans.zaman_yetmedi);
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <main+0x280>)
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4919      	ldr	r1, [pc, #100]	@ (8000cfc <main+0x2a8>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00a f800 	bl	800ac9c <siprintf>
            ssd1306_WriteString(buffer, Font_6x8, White);
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <main+0x298>)
 8000c9e:	1d38      	adds	r0, r7, #4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca6:	f000 fecb 	bl	8001a40 <ssd1306_WriteString>

            ssd1306_UpdateScreen();
 8000caa:	f000 fdbd 	bl	8001828 <ssd1306_UpdateScreen>
        if (strcmp(gelen_buf, "Yeni Soru") == 0) {
 8000cae:	e70f      	b.n	8000ad0 <main+0x7c>
 8000cb0:	200002dc 	.word	0x200002dc
 8000cb4:	0800ccbc 	.word	0x0800ccbc
 8000cb8:	0800be74 	.word	0x0800be74
 8000cbc:	0800be80 	.word	0x0800be80
 8000cc0:	20000178 	.word	0x20000178
 8000cc4:	200001fc 	.word	0x200001fc
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	0800be8c 	.word	0x0800be8c
 8000cd0:	2000023c 	.word	0x2000023c
 8000cd4:	2000036c 	.word	0x2000036c
 8000cd8:	40020c00 	.word	0x40020c00
 8000cdc:	0800bea0 	.word	0x0800bea0
 8000ce0:	200001b8 	.word	0x200001b8
 8000ce4:	0800be44 	.word	0x0800be44
 8000ce8:	200001bc 	.word	0x200001bc
 8000cec:	0800ccb0 	.word	0x0800ccb0
 8000cf0:	0800beb0 	.word	0x0800beb0
 8000cf4:	0800bebc 	.word	0x0800bebc
 8000cf8:	0800bec8 	.word	0x0800bec8
 8000cfc:	0800bee0 	.word	0x0800bee0

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	@ 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	@ 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00a f827 	bl	800ad62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <SystemClock_Config+0xc8>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a26      	ldr	r2, [pc, #152]	@ (8000dc8 <SystemClock_Config+0xc8>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d34:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <SystemClock_Config+0xc8>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <SystemClock_Config+0xcc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a20      	ldr	r2, [pc, #128]	@ (8000dcc <SystemClock_Config+0xcc>)
 8000d4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <SystemClock_Config+0xcc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d70:	2304      	movs	r3, #4
 8000d72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d74:	23c0      	movs	r3, #192	@ 0xc0
 8000d76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fd95 	bl	80048b4 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d90:	f000 f9f0 	bl	8001174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d94:	230f      	movs	r3, #15
 8000d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2103      	movs	r1, #3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fff7 	bl	8004da4 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dbc:	f000 f9da 	bl	8001174 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	@ 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <MX_ADC1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000de2:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000de4:	4a21      	ldr	r2, [pc, #132]	@ (8000e6c <MX_ADC1_Init+0x9c>)
 8000de6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000dea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e12:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <MX_ADC1_Init+0xa0>)
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e16:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e32:	f000 ff0b 	bl	8001c4c <HAL_ADC_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e3c:	f000 f99a 	bl	8001174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_ADC1_Init+0x98>)
 8000e52:	f001 f8bf 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e5c:	f000 f98a 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000240 	.word	0x20000240
 8000e6c:	40012000 	.word	0x40012000
 8000e70:	0f000001 	.word	0x0f000001

08000e74 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <MX_I2C1_Init+0x54>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <MX_I2C1_Init+0x58>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000eb2:	f001 fdff 	bl	8002ab4 <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f000 f95a 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000288 	.word	0x20000288
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	000186a0 	.word	0x000186a0

08000ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000eee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000ef6:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f04:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f18:	f004 f964 	bl	80051e4 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f22:	f000 f927 	bl	8001174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f34:	f004 faf8 	bl	8005528 <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f3e:	f000 f919 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f42:	2320      	movs	r3, #32
 8000f44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f50:	f004 fd00 	bl	8005954 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f5a:	f000 f90b 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200002dc 	.word	0x200002dc

08000f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <MX_USART1_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	f004 fd58 	bl	8005a58 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 f8e1 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000324 	.word	0x20000324
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	@ 0x30
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	4b61      	ldr	r3, [pc, #388]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a60      	ldr	r2, [pc, #384]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	4b5a      	ldr	r3, [pc, #360]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a59      	ldr	r2, [pc, #356]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b53      	ldr	r3, [pc, #332]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a52      	ldr	r2, [pc, #328]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b50      	ldr	r3, [pc, #320]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a4b      	ldr	r2, [pc, #300]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a44      	ldr	r2, [pc, #272]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b3e      	ldr	r3, [pc, #248]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a3d      	ldr	r2, [pc, #244]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b3b      	ldr	r3, [pc, #236]	@ (8001160 <MX_GPIO_Init+0x1a0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4838      	ldr	r0, [pc, #224]	@ (8001164 <MX_GPIO_Init+0x1a4>)
 8001084:	f001 fcfc 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2101      	movs	r1, #1
 800108c:	4836      	ldr	r0, [pc, #216]	@ (8001168 <MX_GPIO_Init+0x1a8>)
 800108e:	f001 fcf7 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001092:	2200      	movs	r2, #0
 8001094:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001098:	4834      	ldr	r0, [pc, #208]	@ (800116c <MX_GPIO_Init+0x1ac>)
 800109a:	f001 fcf1 	bl	8002a80 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800109e:	2304      	movs	r3, #4
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	482c      	ldr	r0, [pc, #176]	@ (8001164 <MX_GPIO_Init+0x1a4>)
 80010b2:	f001 fb61 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010b6:	2308      	movs	r3, #8
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4825      	ldr	r0, [pc, #148]	@ (8001164 <MX_GPIO_Init+0x1a4>)
 80010ce:	f001 fb53 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80010d2:	2332      	movs	r3, #50	@ 0x32
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	481f      	ldr	r0, [pc, #124]	@ (8001164 <MX_GPIO_Init+0x1a4>)
 80010e8:	f001 fb46 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4819      	ldr	r0, [pc, #100]	@ (8001168 <MX_GPIO_Init+0x1a8>)
 8001104:	f001 fb38 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800110c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4814      	ldr	r0, [pc, #80]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 800111e:	f001 fb2b 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001122:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001126:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	480c      	ldr	r0, [pc, #48]	@ (800116c <MX_GPIO_Init+0x1ac>)
 800113c:	f001 fb1c 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001140:	2320      	movs	r3, #32
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	@ (800116c <MX_GPIO_Init+0x1ac>)
 8001154:	f001 fb10 	bl	8002778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001158:	bf00      	nop
 800115a:	3730      	adds	r7, #48	@ 0x30
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40021000 	.word	0x40021000
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40020000 	.word	0x40020000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <Error_Handler+0x8>

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <HAL_MspInit+0x4c>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001194:	6453      	str	r3, [r2, #68]	@ 0x44
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011be:	2007      	movs	r0, #7
 80011c0:	f001 fa06 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <HAL_ADC_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d127      	bne.n	8001242 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_ADC_MspInit+0x80>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a15      	ldr	r2, [pc, #84]	@ (8001250 <HAL_ADC_MspInit+0x80>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_ADC_MspInit+0x80>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_ADC_MspInit+0x80>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <HAL_ADC_MspInit+0x80>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <HAL_ADC_MspInit+0x80>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800122a:	2302      	movs	r3, #2
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_ADC_MspInit+0x84>)
 800123e:	f001 fa9b 	bl	8002778 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012000 	.word	0x40012000
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000

08001258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001296:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a8:	2304      	movs	r3, #4
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <HAL_I2C_MspInit+0x8c>)
 80012b4:	f001 fa60 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	@ 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020400 	.word	0x40020400

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f8:	d115      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <HAL_TIM_Base_MspInit+0x48>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_TIM_Base_MspInit+0x48>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_TIM_Base_MspInit+0x48>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201c      	movs	r0, #28
 800131c:	f001 f963 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001320:	201c      	movs	r0, #28
 8001322:	f001 f97c 	bl	800261e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2c      	ldr	r2, [pc, #176]	@ (8001404 <HAL_UART_MspInit+0xd0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d152      	bne.n	80013fc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a2a      	ldr	r2, [pc, #168]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a1c      	ldr	r2, [pc, #112]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_UART_MspInit+0xd4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013bc:	2307      	movs	r3, #7
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4811      	ldr	r0, [pc, #68]	@ (800140c <HAL_UART_MspInit+0xd8>)
 80013c8:	f001 f9d6 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013dc:	2307      	movs	r3, #7
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480a      	ldr	r0, [pc, #40]	@ (8001410 <HAL_UART_MspInit+0xdc>)
 80013e8:	f001 f9c6 	bl	8002778 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2025      	movs	r0, #37	@ 0x25
 80013f2:	f001 f8f8 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f6:	2025      	movs	r0, #37	@ 0x25
 80013f8:	f001 f911 	bl	800261e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40011000 	.word	0x40011000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 fbab 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <TIM2_IRQHandler+0x10>)
 800147a:	f003 ff65 	bl	8005348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002dc 	.word	0x200002dc

08001488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <USART1_IRQHandler+0x10>)
 800148e:	f004 fb33 	bl	8005af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000324 	.word	0x20000324

0800149c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <OTG_FS_IRQHandler+0x10>)
 80014a2:	f002 f8f8 	bl	8003696 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20001a68 	.word	0x20001a68

080014b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_kill>:

int _kill(int pid, int sig)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ca:	f009 fc99 	bl	800ae00 <__errno>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2216      	movs	r2, #22
 80014d2:	601a      	str	r2, [r3, #0]
  return -1;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_exit>:

void _exit (int status)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ffe7 	bl	80014c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014f2:	bf00      	nop
 80014f4:	e7fd      	b.n	80014f2 <_exit+0x12>

080014f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e00a      	b.n	800151e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001508:	f3af 8000 	nop.w
 800150c:	4601      	mov	r1, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	60ba      	str	r2, [r7, #8]
 8001514:	b2ca      	uxtb	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbf0      	blt.n	8001508 <_read+0x12>
  }

  return len;
 8001526:	687b      	ldr	r3, [r7, #4]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e009      	b.n	8001556 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	60ba      	str	r2, [r7, #8]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	429a      	cmp	r2, r3
 800155c:	dbf1      	blt.n	8001542 <_write+0x12>
  }
  return len;
 800155e:	687b      	ldr	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_close>:

int _close(int file)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001590:	605a      	str	r2, [r3, #4]
  return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_isatty>:

int _isatty(int file)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b085      	sub	sp, #20
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f009 fbfe 	bl	800ae00 <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20020000 	.word	0x20020000
 8001630:	00000400 	.word	0x00000400
 8001634:	20000378 	.word	0x20000378
 8001638:	200022b8 	.word	0x200022b8

0800163c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001698 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001664:	f7ff ffea 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	@ (80016ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f009 fbbd 	bl	800ae0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff f9df 	bl	8000a54 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80016a4:	0800ceb8 	.word	0x0800ceb8
  ldr r2, =_sbss
 80016a8:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80016ac:	200022b8 	.word	0x200022b8

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>

080016b2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af04      	add	r7, sp, #16
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	2200      	movs	r2, #0
 80016dc:	2178      	movs	r1, #120	@ 0x78
 80016de:	4803      	ldr	r0, [pc, #12]	@ (80016ec <ssd1306_WriteCommand+0x2c>)
 80016e0:	f001 fb2c 	bl	8002d3c <HAL_I2C_Mem_Write>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000288 	.word	0x20000288

080016f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001702:	9202      	str	r2, [sp, #8]
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2301      	movs	r3, #1
 800170c:	2240      	movs	r2, #64	@ 0x40
 800170e:	2178      	movs	r1, #120	@ 0x78
 8001710:	4803      	ldr	r0, [pc, #12]	@ (8001720 <ssd1306_WriteData+0x30>)
 8001712:	f001 fb13 	bl	8002d3c <HAL_I2C_Mem_Write>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000288 	.word	0x20000288

08001724 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001728:	f7ff ffc3 	bl	80016b2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800172c:	2064      	movs	r0, #100	@ 0x64
 800172e:	f000 fa69 	bl	8001c04 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f9d6 	bl	8001ae4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001738:	2020      	movs	r0, #32
 800173a:	f7ff ffc1 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff ffbe 	bl	80016c0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001744:	20b0      	movs	r0, #176	@ 0xb0
 8001746:	f7ff ffbb 	bl	80016c0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800174a:	20c8      	movs	r0, #200	@ 0xc8
 800174c:	f7ff ffb8 	bl	80016c0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffb5 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001756:	2010      	movs	r0, #16
 8001758:	f7ff ffb2 	bl	80016c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800175c:	2040      	movs	r0, #64	@ 0x40
 800175e:	f7ff ffaf 	bl	80016c0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001762:	20ff      	movs	r0, #255	@ 0xff
 8001764:	f000 f9aa 	bl	8001abc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001768:	20a1      	movs	r0, #161	@ 0xa1
 800176a:	f7ff ffa9 	bl	80016c0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800176e:	20a6      	movs	r0, #166	@ 0xa6
 8001770:	f7ff ffa6 	bl	80016c0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001774:	20a8      	movs	r0, #168	@ 0xa8
 8001776:	f7ff ffa3 	bl	80016c0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800177a:	201f      	movs	r0, #31
 800177c:	f7ff ffa0 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001780:	20a4      	movs	r0, #164	@ 0xa4
 8001782:	f7ff ff9d 	bl	80016c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001786:	20d3      	movs	r0, #211	@ 0xd3
 8001788:	f7ff ff9a 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff ff97 	bl	80016c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001792:	20d5      	movs	r0, #213	@ 0xd5
 8001794:	f7ff ff94 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001798:	20f0      	movs	r0, #240	@ 0xf0
 800179a:	f7ff ff91 	bl	80016c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800179e:	20d9      	movs	r0, #217	@ 0xd9
 80017a0:	f7ff ff8e 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017a4:	2022      	movs	r0, #34	@ 0x22
 80017a6:	f7ff ff8b 	bl	80016c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017aa:	20da      	movs	r0, #218	@ 0xda
 80017ac:	f7ff ff88 	bl	80016c0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80017b0:	2002      	movs	r0, #2
 80017b2:	f7ff ff85 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017b6:	20db      	movs	r0, #219	@ 0xdb
 80017b8:	f7ff ff82 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017bc:	2020      	movs	r0, #32
 80017be:	f7ff ff7f 	bl	80016c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017c2:	208d      	movs	r0, #141	@ 0x8d
 80017c4:	f7ff ff7c 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017c8:	2014      	movs	r0, #20
 80017ca:	f7ff ff79 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 f988 	bl	8001ae4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f000 f80f 	bl	80017f8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80017da:	f000 f825 	bl	8001828 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <ssd1306_Init+0xd0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <ssd1306_Init+0xd0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80017ea:	4b02      	ldr	r3, [pc, #8]	@ (80017f4 <ssd1306_Init+0xd0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	711a      	strb	r2, [r3, #4]
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000057c 	.word	0x2000057c

080017f8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <ssd1306_Fill+0x14>
 8001808:	2300      	movs	r3, #0
 800180a:	e000      	b.n	800180e <ssd1306_Fill+0x16>
 800180c:	23ff      	movs	r3, #255	@ 0xff
 800180e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001812:	4619      	mov	r1, r3
 8001814:	4803      	ldr	r0, [pc, #12]	@ (8001824 <ssd1306_Fill+0x2c>)
 8001816:	f009 faa4 	bl	800ad62 <memset>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000037c 	.word	0x2000037c

08001828 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800182e:	2300      	movs	r3, #0
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	e016      	b.n	8001862 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	3b50      	subs	r3, #80	@ 0x50
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff40 	bl	80016c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff ff3d 	bl	80016c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001846:	2010      	movs	r0, #16
 8001848:	f7ff ff3a 	bl	80016c0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	01db      	lsls	r3, r3, #7
 8001850:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <ssd1306_UpdateScreen+0x4c>)
 8001852:	4413      	add	r3, r2
 8001854:	2180      	movs	r1, #128	@ 0x80
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff4a 	bl	80016f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	3301      	adds	r3, #1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d9e5      	bls.n	8001834 <ssd1306_UpdateScreen+0xc>
    }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000037c 	.word	0x2000037c

08001878 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	460b      	mov	r3, r1
 8001884:	71bb      	strb	r3, [r7, #6]
 8001886:	4613      	mov	r3, r2
 8001888:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db3d      	blt.n	800190e <ssd1306_DrawPixel+0x96>
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	2b1f      	cmp	r3, #31
 8001896:	d83a      	bhi.n	800190e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001898:	797b      	ldrb	r3, [r7, #5]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d11a      	bne.n	80018d4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	b2d8      	uxtb	r0, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	01db      	lsls	r3, r3, #7
 80018aa:	4413      	add	r3, r2
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <ssd1306_DrawPixel+0xa4>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b259      	sxtb	r1, r3
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	4603      	mov	r3, r0
 80018c8:	01db      	lsls	r3, r3, #7
 80018ca:	4413      	add	r3, r2
 80018cc:	b2c9      	uxtb	r1, r1
 80018ce:	4a13      	ldr	r2, [pc, #76]	@ (800191c <ssd1306_DrawPixel+0xa4>)
 80018d0:	54d1      	strb	r1, [r2, r3]
 80018d2:	e01d      	b.n	8001910 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018d4:	79fa      	ldrb	r2, [r7, #7]
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	b2d8      	uxtb	r0, r3
 80018dc:	4603      	mov	r3, r0
 80018de:	01db      	lsls	r3, r3, #7
 80018e0:	4413      	add	r3, r2
 80018e2:	4a0e      	ldr	r2, [pc, #56]	@ (800191c <ssd1306_DrawPixel+0xa4>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	b25a      	sxtb	r2, r3
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	4013      	ands	r3, r2
 80018fc:	b259      	sxtb	r1, r3
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	4603      	mov	r3, r0
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	4413      	add	r3, r2
 8001906:	b2c9      	uxtb	r1, r1
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <ssd1306_DrawPixel+0xa4>)
 800190a:	54d1      	strb	r1, [r2, r3]
 800190c:	e000      	b.n	8001910 <ssd1306_DrawPixel+0x98>
        return;
 800190e:	bf00      	nop
    }
}
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000037c 	.word	0x2000037c

08001920 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	4604      	mov	r4, r0
 8001928:	4638      	mov	r0, r7
 800192a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800192e:	4623      	mov	r3, r4
 8001930:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b1f      	cmp	r3, #31
 8001936:	d902      	bls.n	800193e <ssd1306_WriteChar+0x1e>
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b7e      	cmp	r3, #126	@ 0x7e
 800193c:	d901      	bls.n	8001942 <ssd1306_WriteChar+0x22>
        return 0;
 800193e:	2300      	movs	r3, #0
 8001940:	e077      	b.n	8001a32 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001942:	4b3e      	ldr	r3, [pc, #248]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	783b      	ldrb	r3, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	2b80      	cmp	r3, #128	@ 0x80
 800194e:	dc06      	bgt.n	800195e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001950:	4b3a      	ldr	r3, [pc, #232]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 8001952:	885b      	ldrh	r3, [r3, #2]
 8001954:	461a      	mov	r2, r3
 8001956:	787b      	ldrb	r3, [r7, #1]
 8001958:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800195a:	2b20      	cmp	r3, #32
 800195c:	dd01      	ble.n	8001962 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800195e:	2300      	movs	r3, #0
 8001960:	e067      	b.n	8001a32 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e04e      	b.n	8001a06 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3b20      	subs	r3, #32
 800196e:	7879      	ldrb	r1, [r7, #1]
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4619      	mov	r1, r3
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	440b      	add	r3, r1
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	e036      	b.n	80019f6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b2d8      	uxtb	r0, r3
 80019a6:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 80019a8:	885b      	ldrh	r3, [r3, #2]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff ff5d 	bl	8001878 <ssd1306_DrawPixel>
 80019be:	e017      	b.n	80019f0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b2d8      	uxtb	r0, r3
 80019ce:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 80019d0:	885b      	ldrh	r3, [r3, #2]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b2d9      	uxtb	r1, r3
 80019dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	f7ff ff44 	bl	8001878 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	783b      	ldrb	r3, [r7, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d3c3      	bcc.n	8001988 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	3301      	adds	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	787b      	ldrb	r3, [r7, #1]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d3ab      	bcc.n	8001968 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d005      	beq.n	8001a26 <ssd1306_WriteChar+0x106>
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	3a20      	subs	r2, #32
 8001a20:	440a      	add	r2, r1
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	e000      	b.n	8001a28 <ssd1306_WriteChar+0x108>
 8001a26:	783a      	ldrb	r2, [r7, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <ssd1306_WriteChar+0x11c>)
 8001a2e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000057c 	.word	0x2000057c

08001a40 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	4638      	mov	r0, r7
 8001a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001a4e:	e013      	b.n	8001a78 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	7818      	ldrb	r0, [r3, #0]
 8001a54:	7e3b      	ldrb	r3, [r7, #24]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	463b      	mov	r3, r7
 8001a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a5c:	f7ff ff60 	bl	8001920 <ssd1306_WriteChar>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d002      	beq.n	8001a72 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	e008      	b.n	8001a84 <ssd1306_WriteString+0x44>
        }
        str++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e7      	bne.n	8001a50 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	781b      	ldrb	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	460a      	mov	r2, r1
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <ssd1306_SetCursor+0x2c>)
 8001aa2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001aa4:	79bb      	ldrb	r3, [r7, #6]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <ssd1306_SetCursor+0x2c>)
 8001aaa:	805a      	strh	r2, [r3, #2]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	2000057c 	.word	0x2000057c

08001abc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ac6:	2381      	movs	r3, #129	@ 0x81
 8001ac8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fdf7 	bl	80016c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fdf3 	bl	80016c0 <ssd1306_WriteCommand>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001af4:	23af      	movs	r3, #175	@ 0xaf
 8001af6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <ssd1306_SetDisplayOn+0x38>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	715a      	strb	r2, [r3, #5]
 8001afe:	e004      	b.n	8001b0a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001b00:	23ae      	movs	r3, #174	@ 0xae
 8001b02:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <ssd1306_SetDisplayOn+0x38>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fdd7 	bl	80016c0 <ssd1306_WriteCommand>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000057c 	.word	0x2000057c

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 fd41 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f808 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fb14 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fd59 	bl	800263a <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 fd21 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	20000584 	.word	0x20000584

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000584 	.word	0x20000584

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c

08001c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e033      	b.n	8001cca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fab0 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c92:	f023 0302 	bic.w	r3, r3, #2
 8001c96:	f043 0202 	orr.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 faca 	bl	8002238 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cba:	e001      	b.n	8001cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Start+0x1a>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e097      	b.n	8001e1e <HAL_ADC_Start+0x14a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d018      	beq.n	8001d36 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d14:	4b45      	ldr	r3, [pc, #276]	@ (8001e2c <HAL_ADC_Start+0x158>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a45      	ldr	r2, [pc, #276]	@ (8001e30 <HAL_ADC_Start+0x15c>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9a      	lsrs	r2, r3, #18
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d28:	e002      	b.n	8001d30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f9      	bne.n	8001d2a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d15f      	bne.n	8001e04 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d82:	d106      	bne.n	8001d92 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f023 0206 	bic.w	r2, r3, #6
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d90:	e002      	b.n	8001d98 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da0:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <HAL_ADC_Start+0x160>)
 8001da2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001dac:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d129      	bne.n	8001e1c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	e020      	b.n	8001e1c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_ADC_Start+0x164>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d11b      	bne.n	8001e1c <HAL_ADC_Start+0x148>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d114      	bne.n	8001e1c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e00b      	b.n	8001e1c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f043 0210 	orr.w	r2, r3, #16
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	40012300 	.word	0x40012300
 8001e38:	40012000 	.word	0x40012000

08001e3c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Stop+0x16>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e021      	b.n	8001e96 <HAL_ADC_Stop+0x5a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d113      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e063      	b.n	8001fb0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee8:	f7ff fe80 	bl	8001bec <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eee:	e021      	b.n	8001f34 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d01d      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_ADC_PollForConversion+0x6c>
 8001efe:	f7ff fe75 	bl	8001bec <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d212      	bcs.n	8001f34 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d00b      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e03d      	b.n	8001fb0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d1d6      	bne.n	8001ef0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0212 	mvn.w	r2, #18
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d123      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d11f      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d111      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e113      	b.n	8002218 <HAL_ADC_ConfigChannel+0x244>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d925      	bls.n	800204c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	4603      	mov	r3, r0
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4403      	add	r3, r0
 800203e:	3b1e      	subs	r3, #30
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e022      	b.n	8002092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	2207      	movs	r2, #7
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	4603      	mov	r3, r0
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4403      	add	r3, r0
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d824      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b05      	subs	r3, #5
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	400a      	ands	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b05      	subs	r3, #5
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e2:	e04c      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d824      	bhi.n	8002136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3b23      	subs	r3, #35	@ 0x23
 80020fe:	221f      	movs	r2, #31
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43da      	mvns	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b23      	subs	r3, #35	@ 0x23
 8002128:	fa00 f203 	lsl.w	r2, r0, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	631a      	str	r2, [r3, #48]	@ 0x30
 8002134:	e023      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b41      	subs	r3, #65	@ 0x41
 8002148:	221f      	movs	r2, #31
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	400a      	ands	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	4618      	mov	r0, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b41      	subs	r3, #65	@ 0x41
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_ADC_ConfigChannel+0x250>)
 8002180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a28      	ldr	r2, [pc, #160]	@ (8002228 <HAL_ADC_ConfigChannel+0x254>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10f      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <HAL_ADC_ConfigChannel+0x254>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x1f4>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d122      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_ADC_ConfigChannel+0x25c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a11      	ldr	r2, [pc, #68]	@ (8002234 <HAL_ADC_ConfigChannel+0x260>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9a      	lsrs	r2, r3, #18
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	40012000 	.word	0x40012000
 800222c:	10000012 	.word	0x10000012
 8002230:	20000004 	.word	0x20000004
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002240:	4b79      	ldr	r3, [pc, #484]	@ (8002428 <ADC_Init+0x1f0>)
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800226c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	021a      	lsls	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	4a58      	ldr	r2, [pc, #352]	@ (800242c <ADC_Init+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e00f      	b.n	8002336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0202 	bic.w	r2, r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	005a      	lsls	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002372:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	3b01      	subs	r3, #1
 8002390:	035a      	lsls	r2, r3, #13
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e007      	b.n	80023ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	051a      	lsls	r2, r3, #20
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ee:	025a      	lsls	r2, r3, #9
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	029a      	lsls	r2, r3, #10
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	0f000001 	.word	0x0f000001

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff29 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff3e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff31 	bl	8002494 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff fac4 	bl	8001bec <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d008      	beq.n	8002684 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e052      	b.n	800272a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0216 	bic.w	r2, r2, #22
 8002692:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <HAL_DMA_Abort+0x62>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0208 	bic.w	r2, r2, #8
 80026c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d4:	e013      	b.n	80026fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d6:	f7ff fa89 	bl	8001bec <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d90c      	bls.n	80026fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2203      	movs	r2, #3
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e015      	b.n	800272a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e4      	bne.n	80026d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	223f      	movs	r2, #63	@ 0x3f
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d004      	beq.n	8002750 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e00c      	b.n	800276a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2205      	movs	r2, #5
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e159      	b.n	8002a48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8148 	bne.w	8002a42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d130      	bne.n	800282c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0201 	and.w	r2, r3, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d017      	beq.n	8002868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a2 	beq.w	8002a42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b57      	ldr	r3, [pc, #348]	@ (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	4a56      	ldr	r2, [pc, #344]	@ (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800290c:	6453      	str	r3, [r2, #68]	@ 0x44
 800290e:	4b54      	ldr	r3, [pc, #336]	@ (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_GPIO_Init+0x2ec>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	@ (8002a68 <HAL_GPIO_Init+0x2f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x202>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a48      	ldr	r2, [pc, #288]	@ (8002a6c <HAL_GPIO_Init+0x2f4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1fe>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a47      	ldr	r2, [pc, #284]	@ (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a46      	ldr	r2, [pc, #280]	@ (8002a74 <HAL_GPIO_Init+0x2fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1f6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a45      	ldr	r2, [pc, #276]	@ (8002a78 <HAL_GPIO_Init+0x300>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1f2>
 8002966:	2304      	movs	r3, #4
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296a:	2307      	movs	r3, #7
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x204>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	@ (8002a64 <HAL_GPIO_Init+0x2ec>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b38      	ldr	r3, [pc, #224]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a24      	ldr	r2, [pc, #144]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ee:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a12:	4a1a      	ldr	r2, [pc, #104]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a18:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a7c <HAL_GPIO_Init+0x304>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f aea2 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e12b      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fbbc 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b18:	f002 fb3c 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 8002b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a81      	ldr	r2, [pc, #516]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d807      	bhi.n	8002b38 <HAL_I2C_Init+0x84>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a80      	ldr	r2, [pc, #512]	@ (8002d2c <HAL_I2C_Init+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e006      	b.n	8002b46 <HAL_I2C_Init+0x92>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d30 <HAL_I2C_Init+0x27c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bf94      	ite	ls
 8002b40:	2301      	movls	r3, #1
 8002b42:	2300      	movhi	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0e7      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a78      	ldr	r2, [pc, #480]	@ (8002d34 <HAL_I2C_Init+0x280>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d802      	bhi.n	8002b88 <HAL_I2C_Init+0xd4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	e009      	b.n	8002b9c <HAL_I2C_Init+0xe8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	4a69      	ldr	r2, [pc, #420]	@ (8002d38 <HAL_I2C_Init+0x284>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	495c      	ldr	r1, [pc, #368]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d819      	bhi.n	8002bf0 <HAL_I2C_Init+0x13c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e59      	subs	r1, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_I2C_Init+0x138>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e59      	subs	r1, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	e051      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e04f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_I2C_Init+0x168>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e012      	b.n	8002c42 <HAL_I2C_Init+0x18e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x196>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e022      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_I2C_Init+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e58      	subs	r0, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	440b      	add	r3, r1
 8002c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6809      	ldr	r1, [r1, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6911      	ldr	r1, [r2, #16]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	000186a0 	.word	0x000186a0
 8002d2c:	001e847f 	.word	0x001e847f
 8002d30:	003d08ff 	.word	0x003d08ff
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	817b      	strh	r3, [r7, #10]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	813b      	strh	r3, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d56:	f7fe ff49 	bl	8001bec <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	f040 80d9 	bne.w	8002f1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2319      	movs	r3, #25
 8002d70:	2201      	movs	r2, #1
 8002d72:	496d      	ldr	r1, [pc, #436]	@ (8002f28 <HAL_I2C_Mem_Write+0x1ec>)
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f971 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0cc      	b.n	8002f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_Mem_Write+0x56>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0c5      	b.n	8002f1e <HAL_I2C_Mem_Write+0x1e2>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d007      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2221      	movs	r2, #33	@ 0x21
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2240      	movs	r2, #64	@ 0x40
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a4d      	ldr	r2, [pc, #308]	@ (8002f2c <HAL_I2C_Mem_Write+0x1f0>)
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dfa:	88f8      	ldrh	r0, [r7, #6]
 8002dfc:	893a      	ldrh	r2, [r7, #8]
 8002dfe:	8979      	ldrh	r1, [r7, #10]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4603      	mov	r3, r0
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f890 	bl	8002f30 <I2C_RequestMemoryWrite>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d052      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e081      	b.n	8002f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fa36 	bl	8003290 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06b      	b.n	8002f1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11b      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x180>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1aa      	bne.n	8002e1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa29 	bl	8003320 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e016      	b.n	8002f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	00100002 	.word	0x00100002
 8002f2c:	ffff0000 	.word	0xffff0000

08002f30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f878 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f80:	d103      	bne.n	8002f8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e05f      	b.n	800304e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	6a3a      	ldr	r2, [r7, #32]
 8002fa2:	492d      	ldr	r1, [pc, #180]	@ (8003058 <I2C_RequestMemoryWrite+0x128>)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f8d3 	bl	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e04c      	b.n	800304e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f95e 	bl	8003290 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d107      	bne.n	8002ff2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e02b      	b.n	800304e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffc:	893b      	ldrh	r3, [r7, #8]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	611a      	str	r2, [r3, #16]
 8003006:	e021      	b.n	800304c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003008:	893b      	ldrh	r3, [r7, #8]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b29b      	uxth	r3, r3
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003018:	6a39      	ldr	r1, [r7, #32]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f938 	bl	8003290 <I2C_WaitOnTXEFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	2b04      	cmp	r3, #4
 800302c:	d107      	bne.n	800303e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e005      	b.n	800304e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003042:	893b      	ldrh	r3, [r7, #8]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	00010002 	.word	0x00010002

0800305c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306c:	e048      	b.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d044      	beq.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fdb9 	bl	8001bec <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d139      	bne.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10d      	bne.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	e00c      	b.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d116      	bne.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e023      	b.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d10d      	bne.n	8003126 <I2C_WaitOnFlagUntilTimeout+0xca>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	43da      	mvns	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4013      	ands	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	e00c      	b.n	8003140 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	43da      	mvns	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4013      	ands	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	429a      	cmp	r2, r3
 8003144:	d093      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800315e:	e071      	b.n	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d123      	bne.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	f043 0204 	orr.w	r2, r3, #4
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e067      	b.n	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d041      	beq.n	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c0:	f7fe fd14 	bl	8001bec <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d302      	bcc.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d136      	bne.n	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10c      	bne.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	e00b      	b.n	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	43da      	mvns	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e021      	b.n	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10c      	bne.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	43da      	mvns	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e00b      	b.n	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	f47f af6d 	bne.w	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800329c:	e034      	b.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f886 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e034      	b.n	8003318 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d028      	beq.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7fe fc99 	bl	8001bec <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11d      	bne.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	2b80      	cmp	r3, #128	@ 0x80
 80032d8:	d016      	beq.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e007      	b.n	8003318 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003312:	2b80      	cmp	r3, #128	@ 0x80
 8003314:	d1c3      	bne.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800332c:	e034      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f83e 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e034      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d028      	beq.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe fc51 	bl	8001bec <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11d      	bne.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d016      	beq.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d1c3      	bne.n	800332e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d11b      	bne.n	8003400 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f043 0204 	orr.w	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af02      	add	r7, sp, #8
 8003414:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e101      	b.n	8003624 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f006 ff60 	bl	800a300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2203      	movs	r2, #3
 8003444:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800344e:	d102      	bne.n	8003456 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fb31 	bl	8006ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7c1a      	ldrb	r2, [r3, #16]
 8003468:	f88d 2000 	strb.w	r2, [sp]
 800346c:	3304      	adds	r3, #4
 800346e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003470:	f003 fa10 	bl	8006894 <USB_CoreInit>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0ce      	b.n	8003624 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fb29 	bl	8006ae4 <USB_SetCurrentMode>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0bf      	b.n	8003624 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e04a      	b.n	8003540 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3315      	adds	r3, #21
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	3314      	adds	r3, #20
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	b298      	uxth	r0, r3
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	332e      	adds	r3, #46	@ 0x2e
 80034e6:	4602      	mov	r2, r0
 80034e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3318      	adds	r3, #24
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	331c      	adds	r3, #28
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3320      	adds	r3, #32
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3324      	adds	r3, #36	@ 0x24
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	3301      	adds	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	429a      	cmp	r2, r3
 8003548:	d3af      	bcc.n	80034aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	e044      	b.n	80035da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	3301      	adds	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3b5      	bcc.n	8003550 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7c1a      	ldrb	r2, [r3, #16]
 80035ec:	f88d 2000 	strb.w	r2, [sp]
 80035f0:	3304      	adds	r3, #4
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	f003 fac2 	bl	8006b7c <USB_DevInit>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e00c      	b.n	8003624 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fb0c 	bl	8007c3a <USB_DevDisconnect>

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_PCD_Start+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e022      	b.n	800368e <HAL_PCD_Start+0x62>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fa13 	bl	8006aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f004 faba 	bl	8007bf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003696:	b590      	push	{r4, r7, lr}
 8003698:	b08d      	sub	sp, #52	@ 0x34
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 fb78 	bl	8007da2 <USB_GetMode>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 848c 	bne.w	8003fd2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 fadc 	bl	8007c7c <USB_ReadInterrupts>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8482 	beq.w	8003fd0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 fac9 	bl	8007c7c <USB_ReadInterrupts>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d107      	bne.n	8003704 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f002 0202 	and.w	r2, r2, #2
 8003702:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f004 fab7 	bl	8007c7c <USB_ReadInterrupts>
 800370e:	4603      	mov	r3, r0
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d161      	bne.n	80037dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0210 	bic.w	r2, r2, #16
 8003726:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 020f 	and.w	r2, r3, #15
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	3304      	adds	r3, #4
 8003746:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	0c5b      	lsrs	r3, r3, #17
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	2b02      	cmp	r3, #2
 8003752:	d124      	bne.n	800379e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d035      	beq.n	80037cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800376a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800376e:	b29b      	uxth	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	6a38      	ldr	r0, [r7, #32]
 8003774:	f004 f8ee 	bl	8007954 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003784:	441a      	add	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003796:	441a      	add	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	615a      	str	r2, [r3, #20]
 800379c:	e016      	b.n	80037cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	0c5b      	lsrs	r3, r3, #17
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d110      	bne.n	80037cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037b0:	2208      	movs	r2, #8
 80037b2:	4619      	mov	r1, r3
 80037b4:	6a38      	ldr	r0, [r7, #32]
 80037b6:	f004 f8cd 	bl	8007954 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c6:	441a      	add	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0210 	orr.w	r2, r2, #16
 80037da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f004 fa4b 	bl	8007c7c <USB_ReadInterrupts>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037f0:	f040 80a7 	bne.w	8003942 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f004 fa50 	bl	8007ca2 <USB_ReadDevAllOutEpInterrupt>
 8003802:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003804:	e099      	b.n	800393a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 808e 	beq.w	800392e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f004 fa74 	bl	8007d0a <USB_ReadDevOutEPInterrupt>
 8003822:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	2301      	movs	r3, #1
 800383e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fea4 	bl	8004590 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385e:	461a      	mov	r2, r3
 8003860:	2308      	movs	r3, #8
 8003862:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003864:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 ff7a 	bl	8004760 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003882:	461a      	mov	r2, r3
 8003884:	2310      	movs	r3, #16
 8003886:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d030      	beq.n	80038f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389a:	2b80      	cmp	r3, #128	@ 0x80
 800389c:	d109      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	3304      	adds	r3, #4
 80038c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	78db      	ldrb	r3, [r3, #3]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d108      	bne.n	80038e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2200      	movs	r2, #0
 80038d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f006 fe19 	bl	800a514 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ee:	461a      	mov	r2, r3
 80038f0:	2302      	movs	r3, #2
 80038f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	2320      	movs	r3, #32
 800390e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003926:	461a      	mov	r2, r3
 8003928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800392c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	3301      	adds	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f af62 	bne.w	8003806 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f004 f998 	bl	8007c7c <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003952:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003956:	f040 80db 	bne.w	8003b10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f004 f9b9 	bl	8007cd6 <USB_ReadDevAllInEpInterrupt>
 8003964:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800396a:	e0cd      	b.n	8003b08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80c2 	beq.w	8003afc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f004 f9df 	bl	8007d46 <USB_ReadDevInEPInterrupt>
 8003988:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d057      	beq.n	8003a44 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	2201      	movs	r2, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69f9      	ldr	r1, [r7, #28]
 80039b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039b4:	4013      	ands	r3, r2
 80039b6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c4:	461a      	mov	r2, r3
 80039c6:	2301      	movs	r3, #1
 80039c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	799b      	ldrb	r3, [r3, #6]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d132      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	3320      	adds	r3, #32
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4403      	add	r3, r0
 80039f2:	331c      	adds	r3, #28
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4419      	add	r1, r3
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4403      	add	r3, r0
 8003a06:	3320      	adds	r3, #32
 8003a08:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d113      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x3a2>
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3324      	adds	r3, #36	@ 0x24
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d108      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a30:	461a      	mov	r2, r3
 8003a32:	2101      	movs	r1, #1
 8003a34:	f004 f9e6 	bl	8007e04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f006 fced 	bl	800a41e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	2310      	movs	r3, #16
 8003a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	2340      	movs	r3, #64	@ 0x40
 8003a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d023      	beq.n	8003aea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aa4:	6a38      	ldr	r0, [r7, #32]
 8003aa6:	f003 f9cd 	bl	8006e44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	3310      	adds	r3, #16
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	3304      	adds	r3, #4
 8003abc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	78db      	ldrb	r3, [r3, #3]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d108      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f006 fd30 	bl	800a538 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003af4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fcbd 	bl	8004476 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	3301      	adds	r3, #1
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f47f af2e 	bne.w	800396c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f004 f8b1 	bl	8007c7c <USB_ReadInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b24:	d122      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d108      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fea4 	bl	800489c <HAL_PCDEx_LPM_Callback>
 8003b54:	e002      	b.n	8003b5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f006 fcce 	bl	800a4f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f004 f883 	bl	8007c7c <USB_ReadInterrupts>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b80:	d112      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d102      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f006 fc8a 	bl	800a4ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ba6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f004 f865 	bl	8007c7c <USB_ReadInterrupts>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bbc:	f040 80b7 	bne.w	8003d2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2110      	movs	r1, #16
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f003 f932 	bl	8006e44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be4:	e046      	b.n	8003c74 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bf8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c0a:	0151      	lsls	r1, r2, #5
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	440a      	add	r2, r1
 8003c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c26:	461a      	mov	r2, r3
 8003c28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c5e:	0151      	lsls	r1, r2, #5
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	440a      	add	r2, r1
 8003c64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c70:	3301      	adds	r3, #1
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	791b      	ldrb	r3, [r3, #4]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d3b2      	bcc.n	8003be6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c8e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7bdb      	ldrb	r3, [r3, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cac:	f043 030b 	orr.w	r3, r3, #11
 8003cb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc2:	f043 030b 	orr.w	r3, r3, #11
 8003cc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cc8:	e015      	b.n	8003cf6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cdc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003ce0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf0:	f043 030b 	orr.w	r3, r3, #11
 8003cf4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f004 f873 	bl	8007e04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f003 ffa2 	bl	8007c7c <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d42:	d123      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 f838 	bl	8007dbe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 f8ef 	bl	8006f36 <USB_GetDevSpeed>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681c      	ldr	r4, [r3, #0]
 8003d64:	f001 fa0a 	bl	800517c <HAL_RCC_GetHCLKFreq>
 8003d68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4620      	mov	r0, r4
 8003d72:	f002 fdf3 	bl	800695c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f006 fb79 	bl	800a46e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 ff73 	bl	8007c7c <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d10a      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f006 fb56 	bl	800a452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f002 0208 	and.w	r2, r2, #8
 8003db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 ff5e 	bl	8007c7c <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc6:	2b80      	cmp	r3, #128	@ 0x80
 8003dc8:	d123      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dda:	e014      	b.n	8003e06 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fb0a 	bl	8004414 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	3301      	adds	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	791b      	ldrb	r3, [r3, #4]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d3e4      	bcc.n	8003ddc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 ff30 	bl	8007c7c <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e26:	d13c      	bne.n	8003ea2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e28:	2301      	movs	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2c:	e02b      	b.n	8003e86 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d115      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da12      	bge.n	8003e80 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	3317      	adds	r3, #23
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 faca 	bl	8004414 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	3301      	adds	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	791b      	ldrb	r3, [r3, #4]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d3cd      	bcc.n	8003e2e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 fee8 	bl	8007c7c <USB_ReadInterrupts>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eb6:	d156      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eb8:	2301      	movs	r3, #1
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ebc:	e045      	b.n	8003f4a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d12e      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ee6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da2b      	bge.n	8003f44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003ef8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d121      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f40:	6053      	str	r3, [r2, #4]
            break;
 8003f42:	e008      	b.n	8003f56 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	791b      	ldrb	r3, [r3, #4]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d3b3      	bcc.n	8003ebe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 fe86 	bl	8007c7c <USB_ReadInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7a:	d10a      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f006 faed 	bl	800a55c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f003 fe70 	bl	8007c7c <USB_ReadInterrupts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d115      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f006 fadd 	bl	800a578 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	e000      	b.n	8003fd2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003fd0:	bf00      	nop
    }
  }
}
 8003fd2:	3734      	adds	r7, #52	@ 0x34
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_PCD_SetAddress+0x1a>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e012      	b.n	8004018 <HAL_PCD_SetAddress+0x40>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f003 fdcf 	bl	8007bac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4603      	mov	r3, r0
 8004030:	70fb      	strb	r3, [r7, #3]
 8004032:	460b      	mov	r3, r1
 8004034:	803b      	strh	r3, [r7, #0]
 8004036:	4613      	mov	r3, r2
 8004038:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800403e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004042:	2b00      	cmp	r3, #0
 8004044:	da0f      	bge.n	8004066 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 020f 	and.w	r2, r3, #15
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3310      	adds	r3, #16
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	705a      	strb	r2, [r3, #1]
 8004064:	e00f      	b.n	8004086 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 020f 	and.w	r2, r3, #15
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	3304      	adds	r3, #4
 800407e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004092:	883b      	ldrh	r3, [r7, #0]
 8004094:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	78ba      	ldrb	r2, [r7, #2]
 80040a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040b4:	78bb      	ldrb	r3, [r7, #2]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d102      	bne.n	80040c0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_PCD_EP_Open+0xae>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e00e      	b.n	80040ec <HAL_PCD_EP_Open+0xcc>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	4618      	mov	r0, r3
 80040de:	f002 ff4f 	bl	8006f80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80040ea:	7afb      	ldrb	r3, [r7, #11]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da0f      	bge.n	8004128 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	3310      	adds	r3, #16
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	705a      	strb	r2, [r3, #1]
 8004126:	e00f      	b.n	8004148 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_PCD_EP_Close+0x6e>
 800415e:	2302      	movs	r3, #2
 8004160:	e00e      	b.n	8004180 <HAL_PCD_EP_Close+0x8c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	f002 ff8d 	bl	8007090 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	460b      	mov	r3, r1
 8004196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2200      	movs	r2, #0
 80041c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	799b      	ldrb	r3, [r3, #6]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	799b      	ldrb	r3, [r3, #6]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6979      	ldr	r1, [r7, #20]
 80041f0:	f003 f82a 	bl	8007248 <USB_EPStartXfer>

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004220:	681b      	ldr	r3, [r3, #0]
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	460b      	mov	r3, r1
 800423c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800423e:	7afb      	ldrb	r3, [r7, #11]
 8004240:	f003 020f 	and.w	r2, r3, #15
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3310      	adds	r3, #16
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2201      	movs	r2, #1
 800426c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	b2da      	uxtb	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	799b      	ldrb	r3, [r3, #6]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	799b      	ldrb	r3, [r3, #6]
 8004290:	461a      	mov	r2, r3
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	f002 ffd8 	bl	8007248 <USB_EPStartXfer>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	7912      	ldrb	r2, [r2, #4]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e04f      	b.n	8004360 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da0f      	bge.n	80042e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	f003 020f 	and.w	r2, r3, #15
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	3310      	adds	r3, #16
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	705a      	strb	r2, [r3, #1]
 80042e6:	e00d      	b.n	8004304 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	3304      	adds	r3, #4
 80042fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_PCD_EP_SetStall+0x82>
 8004320:	2302      	movs	r3, #2
 8004322:	e01d      	b.n	8004360 <HAL_PCD_EP_SetStall+0xbe>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	4618      	mov	r0, r3
 8004334:	f003 fb66 	bl	8007a04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7999      	ldrb	r1, [r3, #6]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004350:	461a      	mov	r2, r3
 8004352:	f003 fd57 	bl	8007e04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	7912      	ldrb	r2, [r2, #4]
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e042      	b.n	800440c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800438a:	2b00      	cmp	r3, #0
 800438c:	da0f      	bge.n	80043ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	3310      	adds	r3, #16
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	3304      	adds	r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	705a      	strb	r2, [r3, #1]
 80043ac:	e00f      	b.n	80043ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	3304      	adds	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_PCD_EP_ClrStall+0x86>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e00e      	b.n	800440c <HAL_PCD_EP_ClrStall+0xa4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f003 fb6f 	bl	8007ae0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da0c      	bge.n	8004442 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	3310      	adds	r3, #16
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e00c      	b.n	800445c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4413      	add	r3, r2
 8004458:	3304      	adds	r3, #4
 800445a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	4618      	mov	r0, r3
 8004464:	f003 f98e 	bl	8007784 <USB_EPStopXfer>
 8004468:	4603      	mov	r3, r0
 800446a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800446c:	7afb      	ldrb	r3, [r7, #11]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b08a      	sub	sp, #40	@ 0x28
 800447a:	af02      	add	r7, sp, #8
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	3310      	adds	r3, #16
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	3304      	adds	r3, #4
 800449c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d901      	bls.n	80044ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06b      	b.n	8004586 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d902      	bls.n	80044ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3303      	adds	r3, #3
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d2:	e02a      	b.n	800452a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d902      	bls.n	80044f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3303      	adds	r3, #3
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68d9      	ldr	r1, [r3, #12]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4603      	mov	r3, r0
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f003 f9e3 	bl	80078d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d809      	bhi.n	8004554 <PCD_WriteEmptyTxFifo+0xde>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004548:	429a      	cmp	r2, r3
 800454a:	d203      	bcs.n	8004554 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1bf      	bne.n	80044d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	d811      	bhi.n	8004584 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	43db      	mvns	r3, r3
 800457a:	6939      	ldr	r1, [r7, #16]
 800457c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004580:	4013      	ands	r3, r2
 8004582:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	333c      	adds	r3, #60	@ 0x3c
 80045a8:	3304      	adds	r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	799b      	ldrb	r3, [r3, #6]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d17b      	bne.n	80046be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4a61      	ldr	r2, [pc, #388]	@ (8004758 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	f240 80b9 	bls.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80b3 	beq.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f8:	6093      	str	r3, [r2, #8]
 80045fa:	e0a7      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004612:	461a      	mov	r2, r3
 8004614:	2320      	movs	r3, #32
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	e098      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8093 	bne.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	4a4b      	ldr	r2, [pc, #300]	@ (8004758 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d90f      	bls.n	800464e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004644:	461a      	mov	r2, r3
 8004646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464a:	6093      	str	r3, [r2, #8]
 800464c:	e07e      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	0159      	lsls	r1, r3, #5
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	440b      	add	r3, r1
 8004670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d114      	bne.n	80046b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004698:	461a      	mov	r2, r3
 800469a:	2101      	movs	r1, #1
 800469c:	f003 fbb2 	bl	8007e04 <USB_EP0_OutStart>
 80046a0:	e006      	b.n	80046b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	441a      	add	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f005 fe96 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
 80046bc:	e046      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d124      	bne.n	8004710 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e2:	6093      	str	r3, [r2, #8]
 80046e4:	e032      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fc:	461a      	mov	r2, r3
 80046fe:	2320      	movs	r3, #32
 8004700:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f005 fe6d 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
 800470e:	e01d      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d114      	bne.n	8004740 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d108      	bne.n	8004740 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004738:	461a      	mov	r2, r3
 800473a:	2100      	movs	r1, #0
 800473c:	f003 fb62 	bl	8007e04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f005 fe4e 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	4f54300a 	.word	0x4f54300a
 800475c:	4f54310a 	.word	0x4f54310a

08004760 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	333c      	adds	r3, #60	@ 0x3c
 8004778:	3304      	adds	r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d90e      	bls.n	80047b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f005 fe05 	bl	800a3c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d90c      	bls.n	80047dc <PCD_EP_OutSetupPacket_int+0x7c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	799b      	ldrb	r3, [r3, #6]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d108      	bne.n	80047dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047d4:	461a      	mov	r2, r3
 80047d6:	2101      	movs	r1, #1
 80047d8:	f003 fb14 	bl	8007e04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	4f54300a 	.word	0x4f54300a

080047ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
 80047f8:	4613      	mov	r3, r2
 80047fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d107      	bne.n	800481a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800480a:	883b      	ldrh	r3, [r7, #0]
 800480c:	0419      	lsls	r1, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	430a      	orrs	r2, r1
 8004816:	629a      	str	r2, [r3, #40]	@ 0x28
 8004818:	e028      	b.n	800486c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004828:	2300      	movs	r3, #0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e00d      	b.n	800484a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	3340      	adds	r3, #64	@ 0x40
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	3301      	adds	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	3b01      	subs	r3, #1
 8004850:	429a      	cmp	r2, r3
 8004852:	d3ec      	bcc.n	800482e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004854:	883b      	ldrh	r3, [r7, #0]
 8004856:	0418      	lsls	r0, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	3b01      	subs	r3, #1
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4302      	orrs	r2, r0
 8004864:	3340      	adds	r3, #64	@ 0x40
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e267      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048d2:	4b88      	ldr	r3, [pc, #544]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d00c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b85      	ldr	r3, [pc, #532]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d112      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4b82      	ldr	r3, [pc, #520]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4b7e      	ldr	r3, [pc, #504]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <HAL_RCC_OscConfig+0x108>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d157      	bne.n	80049bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e242      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x74>
 800491a:	4b76      	ldr	r3, [pc, #472]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x98>
 8004932:	4b70      	ldr	r3, [pc, #448]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6f      	ldr	r2, [pc, #444]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b6d      	ldr	r3, [pc, #436]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6c      	ldr	r2, [pc, #432]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 800494c:	4b69      	ldr	r3, [pc, #420]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a68      	ldr	r2, [pc, #416]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b66      	ldr	r3, [pc, #408]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a65      	ldr	r2, [pc, #404]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fd f93e 	bl	8001bec <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd f93a 	bl	8001bec <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e207      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xc0>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fd f92a 	bl	8001bec <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7fd f926 	bl	8001bec <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	@ 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1f3      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b51      	ldr	r3, [pc, #324]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0xe8>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d063      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049ca:	4b4a      	ldr	r3, [pc, #296]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b47      	ldr	r3, [pc, #284]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b44      	ldr	r3, [pc, #272]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1c7      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b3b      	ldr	r3, [pc, #236]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4937      	ldr	r1, [pc, #220]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e03a      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b34      	ldr	r3, [pc, #208]	@ (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f8df 	bl	8001bec <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fd f8db 	bl	8001bec <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1a8      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4925      	ldr	r1, [pc, #148]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd f8be 	bl	8001bec <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fd f8ba 	bl	8001bec <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e187      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d036      	beq.n	8004b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_RCC_OscConfig+0x248>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fd f89e 	bl	8001bec <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fd f89a 	bl	8001bec <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e167      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x200>
 8004ad2:	e01b      	b.n	8004b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad4:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <HAL_RCC_OscConfig+0x248>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ada:	f7fd f887 	bl	8001bec <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fd f883 	bl	8001bec <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d907      	bls.n	8004b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e150      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470000 	.word	0x42470000
 8004afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b88      	ldr	r3, [pc, #544]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ea      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8097 	beq.w	8004c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b81      	ldr	r3, [pc, #516]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	4a7c      	ldr	r2, [pc, #496]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b77      	ldr	r3, [pc, #476]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d118      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b74      	ldr	r3, [pc, #464]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a73      	ldr	r2, [pc, #460]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fd f843 	bl	8001bec <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fd f83f 	bl	8001bec <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e10c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x2ea>
 8004b90:	4b64      	ldr	r3, [pc, #400]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b94:	4a63      	ldr	r2, [pc, #396]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b9c:	e01c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x30c>
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a5e      	ldr	r2, [pc, #376]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004bc0:	4b58      	ldr	r3, [pc, #352]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a57      	ldr	r2, [pc, #348]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bcc:	4b55      	ldr	r3, [pc, #340]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	4a54      	ldr	r2, [pc, #336]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fd f804 	bl	8001bec <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fd f800 	bl	8001bec <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0cb      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	4b49      	ldr	r3, [pc, #292]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ee      	beq.n	8004be8 <HAL_RCC_OscConfig+0x334>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fc ffee 	bl	8001bec <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fc ffea 	bl	8001bec <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0b5      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b39      	ldr	r3, [pc, #228]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	4a38      	ldr	r2, [pc, #224]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a1 	beq.w	8004d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c52:	4b34      	ldr	r3, [pc, #208]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d05c      	beq.n	8004d18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d141      	bne.n	8004cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b31      	ldr	r3, [pc, #196]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fc ffbe 	bl	8001bec <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fc ffba 	bl	8001bec <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e087      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	3b01      	subs	r3, #1
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	491b      	ldr	r1, [pc, #108]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fc ff93 	bl	8001bec <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fc ff8f 	bl	8001bec <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e05c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x416>
 8004ce8:	e054      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fc ff7c 	bl	8001bec <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fc ff78 	bl	8001bec <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e045      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x444>
 8004d16:	e03d      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e038      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d30:	4b1b      	ldr	r3, [pc, #108]	@ (8004da0 <HAL_RCC_OscConfig+0x4ec>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d121      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11a      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800

08004da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0cc      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b68      	ldr	r3, [pc, #416]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d90c      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b63      	ldr	r3, [pc, #396]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b8      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df8:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a58      	ldr	r2, [pc, #352]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e10:	4b53      	ldr	r3, [pc, #332]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	494d      	ldr	r1, [pc, #308]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d044      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d119      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d003      	beq.n	8004e62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b3f      	ldr	r3, [pc, #252]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e067      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4934      	ldr	r1, [pc, #208]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e94:	f7fc feaa 	bl	8001bec <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fc fea6 	bl	8001bec <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e04f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b25      	ldr	r3, [pc, #148]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d20c      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b22      	ldr	r3, [pc, #136]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e032      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4916      	ldr	r1, [pc, #88]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f16:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	490e      	ldr	r1, [pc, #56]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f2a:	f000 f821 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	490a      	ldr	r1, [pc, #40]	@ (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_RCC_ClockConfig+0x1c8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fc fe0a 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023c00 	.word	0x40023c00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	0800bf3c 	.word	0x0800bf3c
 8004f68:	20000004 	.word	0x20000004
 8004f6c:	20000008 	.word	0x20000008

08004f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b094      	sub	sp, #80	@ 0x50
 8004f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f88:	4b79      	ldr	r3, [pc, #484]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d00d      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	f200 80e1 	bhi.w	800515c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x3a>
 8004fa2:	e0db      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa4:	4b73      	ldr	r3, [pc, #460]	@ (8005174 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fa8:	e0db      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004faa:	4b73      	ldr	r3, [pc, #460]	@ (8005178 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fae:	e0d8      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fba:	4b6d      	ldr	r3, [pc, #436]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d063      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	2200      	movs	r2, #0
 8004fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fda:	2300      	movs	r3, #0
 8004fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	f04f 0000 	mov.w	r0, #0
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	0159      	lsls	r1, r3, #5
 8004ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff4:	0150      	lsls	r0, r2, #5
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	1a51      	subs	r1, r2, r1
 8004ffe:	6139      	str	r1, [r7, #16]
 8005000:	4629      	mov	r1, r5
 8005002:	eb63 0301 	sbc.w	r3, r3, r1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005014:	4659      	mov	r1, fp
 8005016:	018b      	lsls	r3, r1, #6
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800501e:	4651      	mov	r1, sl
 8005020:	018a      	lsls	r2, r1, #6
 8005022:	4651      	mov	r1, sl
 8005024:	ebb2 0801 	subs.w	r8, r2, r1
 8005028:	4659      	mov	r1, fp
 800502a:	eb63 0901 	sbc.w	r9, r3, r1
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800503a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005042:	4690      	mov	r8, r2
 8005044:	4699      	mov	r9, r3
 8005046:	4623      	mov	r3, r4
 8005048:	eb18 0303 	adds.w	r3, r8, r3
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	462b      	mov	r3, r5
 8005050:	eb49 0303 	adc.w	r3, r9, r3
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005062:	4629      	mov	r1, r5
 8005064:	024b      	lsls	r3, r1, #9
 8005066:	4621      	mov	r1, r4
 8005068:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800506c:	4621      	mov	r1, r4
 800506e:	024a      	lsls	r2, r1, #9
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005076:	2200      	movs	r2, #0
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800507c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005080:	f7fb f916 	bl	80002b0 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800508c:	e058      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508e:	4b38      	ldr	r3, [pc, #224]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	099b      	lsrs	r3, r3, #6
 8005094:	2200      	movs	r2, #0
 8005096:	4618      	mov	r0, r3
 8005098:	4611      	mov	r1, r2
 800509a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	2300      	movs	r3, #0
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	f04f 0000 	mov.w	r0, #0
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	0159      	lsls	r1, r3, #5
 80050b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ba:	0150      	lsls	r0, r2, #5
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4641      	mov	r1, r8
 80050c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80050c6:	4649      	mov	r1, r9
 80050c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050e0:	ebb2 040a 	subs.w	r4, r2, sl
 80050e4:	eb63 050b 	sbc.w	r5, r3, fp
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	00eb      	lsls	r3, r5, #3
 80050f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f6:	00e2      	lsls	r2, r4, #3
 80050f8:	4614      	mov	r4, r2
 80050fa:	461d      	mov	r5, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	18e3      	adds	r3, r4, r3
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	464b      	mov	r3, r9
 8005104:	eb45 0303 	adc.w	r3, r5, r3
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005116:	4629      	mov	r1, r5
 8005118:	028b      	lsls	r3, r1, #10
 800511a:	4621      	mov	r1, r4
 800511c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005120:	4621      	mov	r1, r4
 8005122:	028a      	lsls	r2, r1, #10
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800512a:	2200      	movs	r2, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	61fa      	str	r2, [r7, #28]
 8005130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005134:	f7fb f8bc 	bl	80002b0 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4613      	mov	r3, r2
 800513e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005140:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	3301      	adds	r3, #1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800515a:	e002      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <HAL_RCC_GetSysClockFreq+0x204>)
 800515e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005164:	4618      	mov	r0, r3
 8005166:	3750      	adds	r7, #80	@ 0x50
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800
 8005174:	00f42400 	.word	0x00f42400
 8005178:	007a1200 	.word	0x007a1200

0800517c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005180:	4b03      	ldr	r3, [pc, #12]	@ (8005190 <HAL_RCC_GetHCLKFreq+0x14>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000004 	.word	0x20000004

08005194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005198:	f7ff fff0 	bl	800517c <HAL_RCC_GetHCLKFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0a9b      	lsrs	r3, r3, #10
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4903      	ldr	r1, [pc, #12]	@ (80051b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	0800bf4c 	.word	0x0800bf4c

080051bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051c0:	f7ff ffdc 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	0b5b      	lsrs	r3, r3, #13
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4903      	ldr	r1, [pc, #12]	@ (80051e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40023800 	.word	0x40023800
 80051e0:	0800bf4c 	.word	0x0800bf4c

080051e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e041      	b.n	800527a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc f86c 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 fa70 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d001      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e044      	b.n	8005326 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <HAL_TIM_Base_Start_IT+0xb0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x6c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c6:	d013      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x6c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <HAL_TIM_Base_Start_IT+0xb4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x6c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a19      	ldr	r2, [pc, #100]	@ (800533c <HAL_TIM_Base_Start_IT+0xb8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x6c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a17      	ldr	r2, [pc, #92]	@ (8005340 <HAL_TIM_Base_Start_IT+0xbc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x6c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a16      	ldr	r2, [pc, #88]	@ (8005344 <HAL_TIM_Base_Start_IT+0xc0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d111      	bne.n	8005314 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d010      	beq.n	8005324 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0201 	orr.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005312:	e007      	b.n	8005324 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40010000 	.word	0x40010000
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40014000 	.word	0x40014000

08005348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d020      	beq.n	80053ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0202 	mvn.w	r2, #2
 800537c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f999 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f98b 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f99c 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d020      	beq.n	80053f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01b      	beq.n	80053f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0204 	mvn.w	r2, #4
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f973 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f965 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f976 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d020      	beq.n	8005444 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01b      	beq.n	8005444 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0208 	mvn.w	r2, #8
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2204      	movs	r2, #4
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f94d 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f93f 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f950 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01b      	beq.n	8005490 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0210 	mvn.w	r2, #16
 8005460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2208      	movs	r2, #8
 8005466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f927 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f919 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f92a 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0201 	mvn.w	r2, #1
 80054ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fb faac 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fab6 	bl	8005a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8fb 	bl	80056f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00c      	beq.n	8005520 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0220 	mvn.w	r2, #32
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa88 	bl	8005a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIM_ConfigClockSource+0x1c>
 8005540:	2302      	movs	r3, #2
 8005542:	e0b4      	b.n	80056ae <HAL_TIM_ConfigClockSource+0x186>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800556a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800557c:	d03e      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0xd4>
 800557e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005582:	f200 8087 	bhi.w	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558a:	f000 8086 	beq.w	800569a <HAL_TIM_ConfigClockSource+0x172>
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005592:	d87f      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b70      	cmp	r3, #112	@ 0x70
 8005596:	d01a      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0xa6>
 8005598:	2b70      	cmp	r3, #112	@ 0x70
 800559a:	d87b      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b60      	cmp	r3, #96	@ 0x60
 800559e:	d050      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x11a>
 80055a0:	2b60      	cmp	r3, #96	@ 0x60
 80055a2:	d877      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b50      	cmp	r3, #80	@ 0x50
 80055a6:	d03c      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xfa>
 80055a8:	2b50      	cmp	r3, #80	@ 0x50
 80055aa:	d873      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b40      	cmp	r3, #64	@ 0x40
 80055ae:	d058      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x13a>
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d86f      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b30      	cmp	r3, #48	@ 0x30
 80055b6:	d064      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x15a>
 80055b8:	2b30      	cmp	r3, #48	@ 0x30
 80055ba:	d86b      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d060      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x15a>
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d867      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d05c      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x15a>
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d05a      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x15a>
 80055cc:	e062      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055de:	f000 f999 	bl	8005914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	609a      	str	r2, [r3, #8]
      break;
 80055fa:	e04f      	b.n	800569c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800560c:	f000 f982 	bl	8005914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800561e:	609a      	str	r2, [r3, #8]
      break;
 8005620:	e03c      	b.n	800569c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800562e:	461a      	mov	r2, r3
 8005630:	f000 f8f6 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2150      	movs	r1, #80	@ 0x50
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f94f 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005640:	e02c      	b.n	800569c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800564e:	461a      	mov	r2, r3
 8005650:	f000 f915 	bl	800587e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2160      	movs	r1, #96	@ 0x60
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f93f 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005660:	e01c      	b.n	800569c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	461a      	mov	r2, r3
 8005670:	f000 f8d6 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2140      	movs	r1, #64	@ 0x40
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f92f 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005680:	e00c      	b.n	800569c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f000 f926 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005692:	e003      	b.n	800569c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
      break;
 8005698:	e000      	b.n	800569c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800569a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3a      	ldr	r2, [pc, #232]	@ (8005804 <TIM_Base_SetConfig+0xfc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a37      	ldr	r2, [pc, #220]	@ (8005808 <TIM_Base_SetConfig+0x100>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a36      	ldr	r2, [pc, #216]	@ (800580c <TIM_Base_SetConfig+0x104>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a35      	ldr	r2, [pc, #212]	@ (8005810 <TIM_Base_SetConfig+0x108>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2b      	ldr	r2, [pc, #172]	@ (8005804 <TIM_Base_SetConfig+0xfc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01b      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005760:	d017      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a28      	ldr	r2, [pc, #160]	@ (8005808 <TIM_Base_SetConfig+0x100>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a27      	ldr	r2, [pc, #156]	@ (800580c <TIM_Base_SetConfig+0x104>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a26      	ldr	r2, [pc, #152]	@ (8005810 <TIM_Base_SetConfig+0x108>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a25      	ldr	r2, [pc, #148]	@ (8005814 <TIM_Base_SetConfig+0x10c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a24      	ldr	r2, [pc, #144]	@ (8005818 <TIM_Base_SetConfig+0x110>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a23      	ldr	r2, [pc, #140]	@ (800581c <TIM_Base_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005804 <TIM_Base_SetConfig+0xfc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d103      	bne.n	80057d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d105      	bne.n	80057f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]
  }
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40010000 	.word	0x40010000
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00
 8005814:	40014000 	.word	0x40014000
 8005818:	40014400 	.word	0x40014400
 800581c:	40014800 	.word	0x40014800

08005820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f023 0201 	bic.w	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 030a 	bic.w	r3, r3, #10
 800585c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b087      	sub	sp, #28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f023 0210 	bic.w	r2, r3, #16
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	031b      	lsls	r3, r3, #12
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f043 0307 	orr.w	r3, r3, #7
 8005900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800592e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	431a      	orrs	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4313      	orrs	r3, r2
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	609a      	str	r2, [r3, #8]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e050      	b.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d018      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b8:	d013      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a18      	ldr	r2, [pc, #96]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00e      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a15      	ldr	r2, [pc, #84]	@ (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d004      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10c      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40014000 	.word	0x40014000

08005a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e042      	b.n	8005af0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fb fc58 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2224      	movs	r2, #36	@ 0x24
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fc85 	bl	80063ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b0ba      	sub	sp, #232	@ 0xe8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_UART_IRQHandler+0x66>
 8005b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fb69 	bl	800622e <UART_Receive_IT>
      return;
 8005b5c:	e25b      	b.n	8006016 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80de 	beq.w	8005d24 <HAL_UART_IRQHandler+0x22c>
 8005b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80d1 	beq.w	8005d24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <HAL_UART_IRQHandler+0xae>
 8005b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9e:	f043 0201 	orr.w	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_UART_IRQHandler+0xd2>
 8005bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc2:	f043 0202 	orr.w	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_UART_IRQHandler+0xf6>
 8005bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	f043 0204 	orr.w	r2, r3, #4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d011      	beq.n	8005c1e <HAL_UART_IRQHandler+0x126>
 8005bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d105      	bne.n	8005c12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c16:	f043 0208 	orr.w	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 81f2 	beq.w	800600c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_UART_IRQHandler+0x14e>
 8005c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 faf4 	bl	800622e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b40      	cmp	r3, #64	@ 0x40
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <HAL_UART_IRQHandler+0x17a>
 8005c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d04f      	beq.n	8005d12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9fc 	bl	8006070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c82:	2b40      	cmp	r3, #64	@ 0x40
 8005c84:	d141      	bne.n	8005d0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1d9      	bne.n	8005c86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d013      	beq.n	8005d02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cde:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed8 <HAL_UART_IRQHandler+0x3e0>)
 8005ce0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fc fd23 	bl	8002732 <HAL_DMA_Abort_IT>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d016      	beq.n	8005d20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	e00e      	b.n	8005d20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f99e 	bl	8006044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	e00a      	b.n	8005d20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f99a 	bl	8006044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	e006      	b.n	8005d20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f996 	bl	8006044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d1e:	e175      	b.n	800600c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	bf00      	nop
    return;
 8005d22:	e173      	b.n	800600c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	f040 814f 	bne.w	8005fcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8148 	beq.w	8005fcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8141 	beq.w	8005fcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	f040 80b6 	bne.w	8005edc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8145 	beq.w	8006010 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	f080 813e 	bcs.w	8006010 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da6:	f000 8088 	beq.w	8005eba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005dd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1d9      	bne.n	8005daa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3314      	adds	r3, #20
 8005dfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e1      	bne.n	8005df6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3314      	adds	r3, #20
 8005e38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3314      	adds	r3, #20
 8005e52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e3      	bne.n	8005e32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e8a:	f023 0310 	bic.w	r3, r3, #16
 8005e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ea2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e3      	bne.n	8005e78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fc fbcc 	bl	8002652 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f8c1 	bl	8006058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ed6:	e09b      	b.n	8006010 <HAL_UART_IRQHandler+0x518>
 8005ed8:	08006137 	.word	0x08006137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 808e 	beq.w	8006014 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8089 	beq.w	8006014 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f26:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e3      	bne.n	8005f02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	623b      	str	r3, [r7, #32]
   return(result);
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3314      	adds	r3, #20
 8005f5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e3      	bne.n	8005f3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0310 	bic.w	r3, r3, #16
 8005f96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005fa4:	61fa      	str	r2, [r7, #28]
 8005fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	69b9      	ldr	r1, [r7, #24]
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e3      	bne.n	8005f80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f847 	bl	8006058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fca:	e023      	b.n	8006014 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <HAL_UART_IRQHandler+0x4f4>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f8ba 	bl	800615e <UART_Transmit_IT>
    return;
 8005fea:	e014      	b.n	8006016 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00e      	beq.n	8006016 <HAL_UART_IRQHandler+0x51e>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8fa 	bl	80061fe <UART_EndTransmit_IT>
    return;
 800600a:	e004      	b.n	8006016 <HAL_UART_IRQHandler+0x51e>
    return;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <HAL_UART_IRQHandler+0x51e>
      return;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_UART_IRQHandler+0x51e>
      return;
 8006014:	bf00      	nop
  }
}
 8006016:	37e8      	adds	r7, #232	@ 0xe8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b095      	sub	sp, #84	@ 0x54
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800608e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006098:	643a      	str	r2, [r7, #64]	@ 0x40
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800609e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e5      	bne.n	8006078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3314      	adds	r3, #20
 80060b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3314      	adds	r3, #20
 80060ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d119      	bne.n	800611c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f023 0310 	bic.w	r3, r3, #16
 80060fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006108:	61ba      	str	r2, [r7, #24]
 800610a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6979      	ldr	r1, [r7, #20]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	613b      	str	r3, [r7, #16]
   return(result);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e5      	bne.n	80060e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800612a:	bf00      	nop
 800612c:	3754      	adds	r7, #84	@ 0x54
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff77 	bl	8006044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b21      	cmp	r3, #33	@ 0x21
 8006170:	d13e      	bne.n	80061f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617a:	d114      	bne.n	80061a6 <UART_Transmit_IT+0x48>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d110      	bne.n	80061a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]
 80061a4:	e008      	b.n	80061b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6211      	str	r1, [r2, #32]
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4619      	mov	r1, r3
 80061c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10f      	bne.n	80061ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fefc 	bl	800601c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b08c      	sub	sp, #48	@ 0x30
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b22      	cmp	r3, #34	@ 0x22
 8006240:	f040 80ae 	bne.w	80063a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624c:	d117      	bne.n	800627e <UART_Receive_IT+0x50>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d113      	bne.n	800627e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626c:	b29a      	uxth	r2, r3
 800626e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	629a      	str	r2, [r3, #40]	@ 0x28
 800627c:	e026      	b.n	80062cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006290:	d007      	beq.n	80062a2 <UART_Receive_IT+0x74>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <UART_Receive_IT+0x82>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e008      	b.n	80062c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	4619      	mov	r1, r3
 80062da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d15d      	bne.n	800639c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0220 	bic.w	r2, r2, #32
 80062ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006322:	2b01      	cmp	r3, #1
 8006324:	d135      	bne.n	8006392 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	613b      	str	r3, [r7, #16]
   return(result);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f023 0310 	bic.w	r3, r3, #16
 8006342:	627b      	str	r3, [r7, #36]	@ 0x24
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634c:	623a      	str	r2, [r7, #32]
 800634e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	69f9      	ldr	r1, [r7, #28]
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	61bb      	str	r3, [r7, #24]
   return(result);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e5      	bne.n	800632c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b10      	cmp	r3, #16
 800636c:	d10a      	bne.n	8006384 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff fe64 	bl	8006058 <HAL_UARTEx_RxEventCallback>
 8006390:	e002      	b.n	8006398 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe4c 	bl	8006030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e002      	b.n	80063a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3730      	adds	r7, #48	@ 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b0:	b0c0      	sub	sp, #256	@ 0x100
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c8:	68d9      	ldr	r1, [r3, #12]
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	ea40 0301 	orr.w	r3, r0, r1
 80063d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006404:	f021 010c 	bic.w	r1, r1, #12
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006412:	430b      	orrs	r3, r1
 8006414:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006426:	6999      	ldr	r1, [r3, #24]
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	ea40 0301 	orr.w	r3, r0, r1
 8006432:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b8f      	ldr	r3, [pc, #572]	@ (8006678 <UART_SetConfig+0x2cc>)
 800643c:	429a      	cmp	r2, r3
 800643e:	d005      	beq.n	800644c <UART_SetConfig+0xa0>
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b8d      	ldr	r3, [pc, #564]	@ (800667c <UART_SetConfig+0x2d0>)
 8006448:	429a      	cmp	r2, r3
 800644a:	d104      	bne.n	8006456 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800644c:	f7fe feb6 	bl	80051bc <HAL_RCC_GetPCLK2Freq>
 8006450:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006454:	e003      	b.n	800645e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006456:	f7fe fe9d 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 800645a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006468:	f040 810c 	bne.w	8006684 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800646c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006470:	2200      	movs	r2, #0
 8006472:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006476:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800647a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800647e:	4622      	mov	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	1891      	adds	r1, r2, r2
 8006484:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006486:	415b      	adcs	r3, r3
 8006488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800648a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800648e:	4621      	mov	r1, r4
 8006490:	eb12 0801 	adds.w	r8, r2, r1
 8006494:	4629      	mov	r1, r5
 8006496:	eb43 0901 	adc.w	r9, r3, r1
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ae:	4690      	mov	r8, r2
 80064b0:	4699      	mov	r9, r3
 80064b2:	4623      	mov	r3, r4
 80064b4:	eb18 0303 	adds.w	r3, r8, r3
 80064b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064bc:	462b      	mov	r3, r5
 80064be:	eb49 0303 	adc.w	r3, r9, r3
 80064c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064da:	460b      	mov	r3, r1
 80064dc:	18db      	adds	r3, r3, r3
 80064de:	653b      	str	r3, [r7, #80]	@ 0x50
 80064e0:	4613      	mov	r3, r2
 80064e2:	eb42 0303 	adc.w	r3, r2, r3
 80064e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80064e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064f0:	f7f9 fede 	bl	80002b0 <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4b61      	ldr	r3, [pc, #388]	@ (8006680 <UART_SetConfig+0x2d4>)
 80064fa:	fba3 2302 	umull	r2, r3, r3, r2
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	011c      	lsls	r4, r3, #4
 8006502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006506:	2200      	movs	r2, #0
 8006508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800650c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006510:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	1891      	adds	r1, r2, r2
 800651a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800651c:	415b      	adcs	r3, r3
 800651e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006524:	4641      	mov	r1, r8
 8006526:	eb12 0a01 	adds.w	sl, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb43 0b01 	adc.w	fp, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800653c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006544:	4692      	mov	sl, r2
 8006546:	469b      	mov	fp, r3
 8006548:	4643      	mov	r3, r8
 800654a:	eb1a 0303 	adds.w	r3, sl, r3
 800654e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006552:	464b      	mov	r3, r9
 8006554:	eb4b 0303 	adc.w	r3, fp, r3
 8006558:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006568:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800656c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006570:	460b      	mov	r3, r1
 8006572:	18db      	adds	r3, r3, r3
 8006574:	643b      	str	r3, [r7, #64]	@ 0x40
 8006576:	4613      	mov	r3, r2
 8006578:	eb42 0303 	adc.w	r3, r2, r3
 800657c:	647b      	str	r3, [r7, #68]	@ 0x44
 800657e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006582:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006586:	f7f9 fe93 	bl	80002b0 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4611      	mov	r1, r2
 8006590:	4b3b      	ldr	r3, [pc, #236]	@ (8006680 <UART_SetConfig+0x2d4>)
 8006592:	fba3 2301 	umull	r2, r3, r3, r1
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	2264      	movs	r2, #100	@ 0x64
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	1acb      	subs	r3, r1, r3
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065a6:	4b36      	ldr	r3, [pc, #216]	@ (8006680 <UART_SetConfig+0x2d4>)
 80065a8:	fba3 2302 	umull	r2, r3, r3, r2
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065b4:	441c      	add	r4, r3
 80065b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	1891      	adds	r1, r2, r2
 80065ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065d0:	415b      	adcs	r3, r3
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065d8:	4641      	mov	r1, r8
 80065da:	1851      	adds	r1, r2, r1
 80065dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80065de:	4649      	mov	r1, r9
 80065e0:	414b      	adcs	r3, r1
 80065e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065f0:	4659      	mov	r1, fp
 80065f2:	00cb      	lsls	r3, r1, #3
 80065f4:	4651      	mov	r1, sl
 80065f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065fa:	4651      	mov	r1, sl
 80065fc:	00ca      	lsls	r2, r1, #3
 80065fe:	4610      	mov	r0, r2
 8006600:	4619      	mov	r1, r3
 8006602:	4603      	mov	r3, r0
 8006604:	4642      	mov	r2, r8
 8006606:	189b      	adds	r3, r3, r2
 8006608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800660c:	464b      	mov	r3, r9
 800660e:	460a      	mov	r2, r1
 8006610:	eb42 0303 	adc.w	r3, r2, r3
 8006614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006624:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800662c:	460b      	mov	r3, r1
 800662e:	18db      	adds	r3, r3, r3
 8006630:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006632:	4613      	mov	r3, r2
 8006634:	eb42 0303 	adc.w	r3, r2, r3
 8006638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800663a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800663e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006642:	f7f9 fe35 	bl	80002b0 <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4b0d      	ldr	r3, [pc, #52]	@ (8006680 <UART_SetConfig+0x2d4>)
 800664c:	fba3 1302 	umull	r1, r3, r3, r2
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	2164      	movs	r1, #100	@ 0x64
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	3332      	adds	r3, #50	@ 0x32
 800665e:	4a08      	ldr	r2, [pc, #32]	@ (8006680 <UART_SetConfig+0x2d4>)
 8006660:	fba2 2303 	umull	r2, r3, r2, r3
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f003 0207 	and.w	r2, r3, #7
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4422      	add	r2, r4
 8006672:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006674:	e106      	b.n	8006884 <UART_SetConfig+0x4d8>
 8006676:	bf00      	nop
 8006678:	40011000 	.word	0x40011000
 800667c:	40011400 	.word	0x40011400
 8006680:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006688:	2200      	movs	r2, #0
 800668a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800668e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006692:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006696:	4642      	mov	r2, r8
 8006698:	464b      	mov	r3, r9
 800669a:	1891      	adds	r1, r2, r2
 800669c:	6239      	str	r1, [r7, #32]
 800669e:	415b      	adcs	r3, r3
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066a6:	4641      	mov	r1, r8
 80066a8:	1854      	adds	r4, r2, r1
 80066aa:	4649      	mov	r1, r9
 80066ac:	eb43 0501 	adc.w	r5, r3, r1
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	00eb      	lsls	r3, r5, #3
 80066ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066be:	00e2      	lsls	r2, r4, #3
 80066c0:	4614      	mov	r4, r2
 80066c2:	461d      	mov	r5, r3
 80066c4:	4643      	mov	r3, r8
 80066c6:	18e3      	adds	r3, r4, r3
 80066c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066cc:	464b      	mov	r3, r9
 80066ce:	eb45 0303 	adc.w	r3, r5, r3
 80066d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066f2:	4629      	mov	r1, r5
 80066f4:	008b      	lsls	r3, r1, #2
 80066f6:	4621      	mov	r1, r4
 80066f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066fc:	4621      	mov	r1, r4
 80066fe:	008a      	lsls	r2, r1, #2
 8006700:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006704:	f7f9 fdd4 	bl	80002b0 <__aeabi_uldivmod>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4b60      	ldr	r3, [pc, #384]	@ (8006890 <UART_SetConfig+0x4e4>)
 800670e:	fba3 2302 	umull	r2, r3, r3, r2
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	011c      	lsls	r4, r3, #4
 8006716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006724:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006728:	4642      	mov	r2, r8
 800672a:	464b      	mov	r3, r9
 800672c:	1891      	adds	r1, r2, r2
 800672e:	61b9      	str	r1, [r7, #24]
 8006730:	415b      	adcs	r3, r3
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006738:	4641      	mov	r1, r8
 800673a:	1851      	adds	r1, r2, r1
 800673c:	6139      	str	r1, [r7, #16]
 800673e:	4649      	mov	r1, r9
 8006740:	414b      	adcs	r3, r1
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006750:	4659      	mov	r1, fp
 8006752:	00cb      	lsls	r3, r1, #3
 8006754:	4651      	mov	r1, sl
 8006756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800675a:	4651      	mov	r1, sl
 800675c:	00ca      	lsls	r2, r1, #3
 800675e:	4610      	mov	r0, r2
 8006760:	4619      	mov	r1, r3
 8006762:	4603      	mov	r3, r0
 8006764:	4642      	mov	r2, r8
 8006766:	189b      	adds	r3, r3, r2
 8006768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800676c:	464b      	mov	r3, r9
 800676e:	460a      	mov	r2, r1
 8006770:	eb42 0303 	adc.w	r3, r2, r3
 8006774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006782:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006790:	4649      	mov	r1, r9
 8006792:	008b      	lsls	r3, r1, #2
 8006794:	4641      	mov	r1, r8
 8006796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800679a:	4641      	mov	r1, r8
 800679c:	008a      	lsls	r2, r1, #2
 800679e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067a2:	f7f9 fd85 	bl	80002b0 <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4611      	mov	r1, r2
 80067ac:	4b38      	ldr	r3, [pc, #224]	@ (8006890 <UART_SetConfig+0x4e4>)
 80067ae:	fba3 2301 	umull	r2, r3, r3, r1
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	2264      	movs	r2, #100	@ 0x64
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	1acb      	subs	r3, r1, r3
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	3332      	adds	r3, #50	@ 0x32
 80067c0:	4a33      	ldr	r2, [pc, #204]	@ (8006890 <UART_SetConfig+0x4e4>)
 80067c2:	fba2 2303 	umull	r2, r3, r2, r3
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067cc:	441c      	add	r4, r3
 80067ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d2:	2200      	movs	r2, #0
 80067d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80067d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80067d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067dc:	4642      	mov	r2, r8
 80067de:	464b      	mov	r3, r9
 80067e0:	1891      	adds	r1, r2, r2
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	415b      	adcs	r3, r3
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067ec:	4641      	mov	r1, r8
 80067ee:	1851      	adds	r1, r2, r1
 80067f0:	6039      	str	r1, [r7, #0]
 80067f2:	4649      	mov	r1, r9
 80067f4:	414b      	adcs	r3, r1
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006804:	4659      	mov	r1, fp
 8006806:	00cb      	lsls	r3, r1, #3
 8006808:	4651      	mov	r1, sl
 800680a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800680e:	4651      	mov	r1, sl
 8006810:	00ca      	lsls	r2, r1, #3
 8006812:	4610      	mov	r0, r2
 8006814:	4619      	mov	r1, r3
 8006816:	4603      	mov	r3, r0
 8006818:	4642      	mov	r2, r8
 800681a:	189b      	adds	r3, r3, r2
 800681c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800681e:	464b      	mov	r3, r9
 8006820:	460a      	mov	r2, r1
 8006822:	eb42 0303 	adc.w	r3, r2, r3
 8006826:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	663b      	str	r3, [r7, #96]	@ 0x60
 8006832:	667a      	str	r2, [r7, #100]	@ 0x64
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006840:	4649      	mov	r1, r9
 8006842:	008b      	lsls	r3, r1, #2
 8006844:	4641      	mov	r1, r8
 8006846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800684a:	4641      	mov	r1, r8
 800684c:	008a      	lsls	r2, r1, #2
 800684e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006852:	f7f9 fd2d 	bl	80002b0 <__aeabi_uldivmod>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <UART_SetConfig+0x4e4>)
 800685c:	fba3 1302 	umull	r1, r3, r3, r2
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	2164      	movs	r1, #100	@ 0x64
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	3332      	adds	r3, #50	@ 0x32
 800686e:	4a08      	ldr	r2, [pc, #32]	@ (8006890 <UART_SetConfig+0x4e4>)
 8006870:	fba2 2303 	umull	r2, r3, r2, r3
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4422      	add	r2, r4
 8006882:	609a      	str	r2, [r3, #8]
}
 8006884:	bf00      	nop
 8006886:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800688a:	46bd      	mov	sp, r7
 800688c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006890:	51eb851f 	.word	0x51eb851f

08006894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006894:	b084      	sub	sp, #16
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	f107 001c 	add.w	r0, r7, #28
 80068a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d123      	bne.n	80068f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80068c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d105      	bne.n	80068ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fae8 	bl	8007ec0 <USB_CoreReset>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e01b      	b.n	800692e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fadc 	bl	8007ec0 <USB_CoreReset>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800690c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006918:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006920:	e005      	b.n	800692e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800692e:	7fbb      	ldrb	r3, [r7, #30]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d10b      	bne.n	800694c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f043 0206 	orr.w	r2, r3, #6
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006958:	b004      	add	sp, #16
 800695a:	4770      	bx	lr

0800695c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d165      	bne.n	8006a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4a41      	ldr	r2, [pc, #260]	@ (8006a78 <USB_SetTurnaroundTime+0x11c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d906      	bls.n	8006986 <USB_SetTurnaroundTime+0x2a>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4a40      	ldr	r2, [pc, #256]	@ (8006a7c <USB_SetTurnaroundTime+0x120>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d202      	bcs.n	8006986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006980:	230f      	movs	r3, #15
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e062      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4a3c      	ldr	r2, [pc, #240]	@ (8006a7c <USB_SetTurnaroundTime+0x120>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d306      	bcc.n	800699c <USB_SetTurnaroundTime+0x40>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4a3b      	ldr	r2, [pc, #236]	@ (8006a80 <USB_SetTurnaroundTime+0x124>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d202      	bcs.n	800699c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006996:	230e      	movs	r3, #14
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e057      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4a38      	ldr	r2, [pc, #224]	@ (8006a80 <USB_SetTurnaroundTime+0x124>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d306      	bcc.n	80069b2 <USB_SetTurnaroundTime+0x56>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4a37      	ldr	r2, [pc, #220]	@ (8006a84 <USB_SetTurnaroundTime+0x128>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d202      	bcs.n	80069b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069ac:	230d      	movs	r3, #13
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e04c      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4a33      	ldr	r2, [pc, #204]	@ (8006a84 <USB_SetTurnaroundTime+0x128>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d306      	bcc.n	80069c8 <USB_SetTurnaroundTime+0x6c>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	4a32      	ldr	r2, [pc, #200]	@ (8006a88 <USB_SetTurnaroundTime+0x12c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d802      	bhi.n	80069c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069c2:	230c      	movs	r3, #12
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	e041      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006a88 <USB_SetTurnaroundTime+0x12c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d906      	bls.n	80069de <USB_SetTurnaroundTime+0x82>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4a2e      	ldr	r2, [pc, #184]	@ (8006a8c <USB_SetTurnaroundTime+0x130>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d802      	bhi.n	80069de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069d8:	230b      	movs	r3, #11
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	e036      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a8c <USB_SetTurnaroundTime+0x130>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d906      	bls.n	80069f4 <USB_SetTurnaroundTime+0x98>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4a29      	ldr	r2, [pc, #164]	@ (8006a90 <USB_SetTurnaroundTime+0x134>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d802      	bhi.n	80069f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069ee:	230a      	movs	r3, #10
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	e02b      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4a26      	ldr	r2, [pc, #152]	@ (8006a90 <USB_SetTurnaroundTime+0x134>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d906      	bls.n	8006a0a <USB_SetTurnaroundTime+0xae>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4a25      	ldr	r2, [pc, #148]	@ (8006a94 <USB_SetTurnaroundTime+0x138>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d202      	bcs.n	8006a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a04:	2309      	movs	r3, #9
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	e020      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4a21      	ldr	r2, [pc, #132]	@ (8006a94 <USB_SetTurnaroundTime+0x138>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d306      	bcc.n	8006a20 <USB_SetTurnaroundTime+0xc4>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4a20      	ldr	r2, [pc, #128]	@ (8006a98 <USB_SetTurnaroundTime+0x13c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d802      	bhi.n	8006a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a1a:	2308      	movs	r3, #8
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	e015      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4a1d      	ldr	r2, [pc, #116]	@ (8006a98 <USB_SetTurnaroundTime+0x13c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d906      	bls.n	8006a36 <USB_SetTurnaroundTime+0xda>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006a9c <USB_SetTurnaroundTime+0x140>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d202      	bcs.n	8006a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a30:	2307      	movs	r3, #7
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e00a      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a36:	2306      	movs	r3, #6
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e007      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a42:	2309      	movs	r3, #9
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e001      	b.n	8006a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a48:	2309      	movs	r3, #9
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	029b      	lsls	r3, r3, #10
 8006a60:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006a64:	431a      	orrs	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	00d8acbf 	.word	0x00d8acbf
 8006a7c:	00e4e1c0 	.word	0x00e4e1c0
 8006a80:	00f42400 	.word	0x00f42400
 8006a84:	01067380 	.word	0x01067380
 8006a88:	011a499f 	.word	0x011a499f
 8006a8c:	01312cff 	.word	0x01312cff
 8006a90:	014ca43f 	.word	0x014ca43f
 8006a94:	016e3600 	.word	0x016e3600
 8006a98:	01a6ab1f 	.word	0x01a6ab1f
 8006a9c:	01e84800 	.word	0x01e84800

08006aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f043 0201 	orr.w	r2, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f023 0201 	bic.w	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d115      	bne.n	8006b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b12:	200a      	movs	r0, #10
 8006b14:	f7fb f876 	bl	8001c04 <HAL_Delay>
      ms += 10U;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	330a      	adds	r3, #10
 8006b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 f93f 	bl	8007da2 <USB_GetMode>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d01e      	beq.n	8006b68 <USB_SetCurrentMode+0x84>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b2e:	d9f0      	bls.n	8006b12 <USB_SetCurrentMode+0x2e>
 8006b30:	e01a      	b.n	8006b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d115      	bne.n	8006b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b44:	200a      	movs	r0, #10
 8006b46:	f7fb f85d 	bl	8001c04 <HAL_Delay>
      ms += 10U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	330a      	adds	r3, #10
 8006b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 f926 	bl	8007da2 <USB_GetMode>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d005      	beq.n	8006b68 <USB_SetCurrentMode+0x84>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b60:	d9f0      	bls.n	8006b44 <USB_SetCurrentMode+0x60>
 8006b62:	e001      	b.n	8006b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e005      	b.n	8006b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b6c:	d101      	bne.n	8006b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b96:	2300      	movs	r3, #0
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	e009      	b.n	8006bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3340      	adds	r3, #64	@ 0x40
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b0e      	cmp	r3, #14
 8006bb4:	d9f2      	bls.n	8006b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d11c      	bne.n	8006bf8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bcc:	f043 0302 	orr.w	r3, r3, #2
 8006bd0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bf6:	e00b      	b.n	8006c10 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c16:	461a      	mov	r2, r3
 8006c18:	2300      	movs	r3, #0
 8006c1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d10d      	bne.n	8006c40 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f968 	bl	8006f04 <USB_SetDevSpeed>
 8006c34:	e008      	b.n	8006c48 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c36:	2101      	movs	r1, #1
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f963 	bl	8006f04 <USB_SetDevSpeed>
 8006c3e:	e003      	b.n	8006c48 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c40:	2103      	movs	r1, #3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f95e 	bl	8006f04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c48:	2110      	movs	r1, #16
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8fa 	bl	8006e44 <USB_FlushTxFifo>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f924 	bl	8006ea8 <USB_FlushRxFifo>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e043      	b.n	8006d1c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006caa:	d118      	bne.n	8006cde <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e013      	b.n	8006cf0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e008      	b.n	8006cf0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cea:	461a      	mov	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d20:	461a      	mov	r2, r3
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d3b5      	bcc.n	8006c94 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	e043      	b.n	8006db6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d44:	d118      	bne.n	8006d78 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e013      	b.n	8006d8a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e008      	b.n	8006d8a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d96:	461a      	mov	r2, r3
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da8:	461a      	mov	r2, r3
 8006daa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	3301      	adds	r3, #1
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006dba:	461a      	mov	r2, r3
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d3b5      	bcc.n	8006d2e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dd4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006de2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006de4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d105      	bne.n	8006df8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f043 0210 	orr.w	r2, r3, #16
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	4b10      	ldr	r3, [pc, #64]	@ (8006e40 <USB_DevInit+0x2c4>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f043 0208 	orr.w	r2, r3, #8
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d107      	bne.n	8006e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e28:	f043 0304 	orr.w	r3, r3, #4
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e3c:	b004      	add	sp, #16
 8006e3e:	4770      	bx	lr
 8006e40:	803c3800 	.word	0x803c3800

08006e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e5e:	d901      	bls.n	8006e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e01b      	b.n	8006e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	daf2      	bge.n	8006e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	019b      	lsls	r3, r3, #6
 8006e74:	f043 0220 	orr.w	r2, r3, #32
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e88:	d901      	bls.n	8006e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e006      	b.n	8006e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d0f0      	beq.n	8006e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ec0:	d901      	bls.n	8006ec6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e018      	b.n	8006ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	daf2      	bge.n	8006eb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ee4:	d901      	bls.n	8006eea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e006      	b.n	8006ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b10      	cmp	r3, #16
 8006ef4:	d0f0      	beq.n	8006ed8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f24:	4313      	orrs	r3, r2
 8006f26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b087      	sub	sp, #28
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0306 	and.w	r3, r3, #6
 8006f4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f56:	2300      	movs	r3, #0
 8006f58:	75fb      	strb	r3, [r7, #23]
 8006f5a:	e00a      	b.n	8006f72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d002      	beq.n	8006f68 <USB_GetDevSpeed+0x32>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b06      	cmp	r3, #6
 8006f66:	d102      	bne.n	8006f6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	75fb      	strb	r3, [r7, #23]
 8006f6c:	e001      	b.n	8006f72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f6e:	230f      	movs	r3, #15
 8006f70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d13a      	bne.n	8007012 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	2101      	movs	r1, #1
 8006fae:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d155      	bne.n	8007080 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	791b      	ldrb	r3, [r3, #4]
 8006fee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ff0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	059b      	lsls	r3, r3, #22
 8006ff6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800700a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	e036      	b.n	8007080 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007018:	69da      	ldr	r2, [r3, #28]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	2101      	movs	r1, #1
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	68f9      	ldr	r1, [r7, #12]
 800702c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007030:	4313      	orrs	r3, r2
 8007032:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d11a      	bne.n	8007080 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	791b      	ldrb	r3, [r3, #4]
 8007064:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007066:	430b      	orrs	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800707a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800707e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d161      	bne.n	8007170 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070c2:	d11f      	bne.n	8007104 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007102:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800710a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	2101      	movs	r1, #1
 8007116:	fa01 f303 	lsl.w	r3, r1, r3
 800711a:	b29b      	uxth	r3, r3
 800711c:	43db      	mvns	r3, r3
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007124:	4013      	ands	r3, r2
 8007126:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712e:	69da      	ldr	r2, [r3, #28]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	2101      	movs	r1, #1
 800713a:	fa01 f303 	lsl.w	r3, r1, r3
 800713e:	b29b      	uxth	r3, r3
 8007140:	43db      	mvns	r3, r3
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007148:	4013      	ands	r3, r2
 800714a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	0159      	lsls	r1, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	440b      	add	r3, r1
 8007162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007166:	4619      	mov	r1, r3
 8007168:	4b35      	ldr	r3, [pc, #212]	@ (8007240 <USB_DeactivateEndpoint+0x1b0>)
 800716a:	4013      	ands	r3, r2
 800716c:	600b      	str	r3, [r1, #0]
 800716e:	e060      	b.n	8007232 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007186:	d11f      	bne.n	80071c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	440a      	add	r2, r1
 800719e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f303 	lsl.w	r3, r1, r3
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	43db      	mvns	r3, r3
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071e8:	4013      	ands	r3, r2
 80071ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007202:	041b      	lsls	r3, r3, #16
 8007204:	43db      	mvns	r3, r3
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800720c:	4013      	ands	r3, r2
 800720e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	0159      	lsls	r1, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	440b      	add	r3, r1
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	4619      	mov	r1, r3
 800722c:	4b05      	ldr	r3, [pc, #20]	@ (8007244 <USB_DeactivateEndpoint+0x1b4>)
 800722e:	4013      	ands	r3, r2
 8007230:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	ec337800 	.word	0xec337800
 8007244:	eff37800 	.word	0xeff37800

08007248 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	@ 0x28
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b01      	cmp	r3, #1
 8007266:	f040 817f 	bne.w	8007568 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d132      	bne.n	80072d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	440a      	add	r2, r1
 8007288:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800728c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007290:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072d0:	0cdb      	lsrs	r3, r3, #19
 80072d2:	04db      	lsls	r3, r3, #19
 80072d4:	6113      	str	r3, [r2, #16]
 80072d6:	e097      	b.n	8007408 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072f2:	0cdb      	lsrs	r3, r3, #19
 80072f4:	04db      	lsls	r3, r3, #19
 80072f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007312:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007316:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800731a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11a      	bne.n	8007358 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	429a      	cmp	r2, r3
 800732c:	d903      	bls.n	8007336 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007350:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007354:	6113      	str	r3, [r2, #16]
 8007356:	e044      	b.n	80073e2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	4413      	add	r3, r2
 8007362:	1e5a      	subs	r2, r3, #1
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	8afb      	ldrh	r3, [r7, #22]
 800737e:	04d9      	lsls	r1, r3, #19
 8007380:	4ba4      	ldr	r3, [pc, #656]	@ (8007614 <USB_EPStartXfer+0x3cc>)
 8007382:	400b      	ands	r3, r1
 8007384:	69b9      	ldr	r1, [r7, #24]
 8007386:	0148      	lsls	r0, r1, #5
 8007388:	69f9      	ldr	r1, [r7, #28]
 800738a:	4401      	add	r1, r0
 800738c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007390:	4313      	orrs	r3, r2
 8007392:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	791b      	ldrb	r3, [r3, #4]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d122      	bne.n	80073e2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	0151      	lsls	r1, r2, #5
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	440a      	add	r2, r1
 80073b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80073ba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	8afb      	ldrh	r3, [r7, #22]
 80073cc:	075b      	lsls	r3, r3, #29
 80073ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80073d2:	69b9      	ldr	r1, [r7, #24]
 80073d4:	0148      	lsls	r0, r1, #5
 80073d6:	69f9      	ldr	r1, [r7, #28]
 80073d8:	4401      	add	r1, r0
 80073da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80073de:	4313      	orrs	r3, r2
 80073e0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f8:	69b9      	ldr	r1, [r7, #24]
 80073fa:	0148      	lsls	r0, r1, #5
 80073fc:	69f9      	ldr	r1, [r7, #28]
 80073fe:	4401      	add	r1, r0
 8007400:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007404:	4313      	orrs	r3, r2
 8007406:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d14b      	bne.n	80074a6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d009      	beq.n	800742a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	461a      	mov	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	791b      	ldrb	r3, [r3, #4]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d128      	bne.n	8007484 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800743e:	2b00      	cmp	r3, #0
 8007440:	d110      	bne.n	8007464 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800745c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	e00f      	b.n	8007484 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800747e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007482:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	e166      	b.n	8007774 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074c4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d015      	beq.n	80074fa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 814e 	beq.w	8007774 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	2101      	movs	r1, #1
 80074ea:	fa01 f303 	lsl.w	r3, r1, r3
 80074ee:	69f9      	ldr	r1, [r7, #28]
 80074f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074f4:	4313      	orrs	r3, r2
 80074f6:	634b      	str	r3, [r1, #52]	@ 0x34
 80074f8:	e13c      	b.n	8007774 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007524:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	e00f      	b.n	800754c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800754a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68d9      	ldr	r1, [r3, #12]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781a      	ldrb	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	b298      	uxth	r0, r3
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4603      	mov	r3, r0
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f9b9 	bl	80078d8 <USB_WritePacket>
 8007566:	e105      	b.n	8007774 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	440a      	add	r2, r1
 800757e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007582:	0cdb      	lsrs	r3, r3, #19
 8007584:	04db      	lsls	r3, r3, #19
 8007586:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80075a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80075aa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d132      	bne.n	8007618 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e0:	69b9      	ldr	r1, [r7, #24]
 80075e2:	0148      	lsls	r0, r1, #5
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	4401      	add	r1, r0
 80075e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075ec:	4313      	orrs	r3, r2
 80075ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800760a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800760e:	6113      	str	r3, [r2, #16]
 8007610:	e062      	b.n	80076d8 <USB_EPStartXfer+0x490>
 8007612:	bf00      	nop
 8007614:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d123      	bne.n	8007668 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007636:	69b9      	ldr	r1, [r7, #24]
 8007638:	0148      	lsls	r0, r1, #5
 800763a:	69f9      	ldr	r1, [r7, #28]
 800763c:	4401      	add	r1, r0
 800763e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007642:	4313      	orrs	r3, r2
 8007644:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	440a      	add	r2, r1
 800765c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007664:	6113      	str	r3, [r2, #16]
 8007666:	e037      	b.n	80076d8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4413      	add	r3, r2
 8007672:	1e5a      	subs	r2, r3, #1
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	fbb2 f3f3 	udiv	r3, r2, r3
 800767c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	8afa      	ldrh	r2, [r7, #22]
 8007684:	fb03 f202 	mul.w	r2, r3, r2
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	8afb      	ldrh	r3, [r7, #22]
 800769c:	04d9      	lsls	r1, r3, #19
 800769e:	4b38      	ldr	r3, [pc, #224]	@ (8007780 <USB_EPStartXfer+0x538>)
 80076a0:	400b      	ands	r3, r1
 80076a2:	69b9      	ldr	r1, [r7, #24]
 80076a4:	0148      	lsls	r0, r1, #5
 80076a6:	69f9      	ldr	r1, [r7, #28]
 80076a8:	4401      	add	r1, r0
 80076aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076ae:	4313      	orrs	r3, r2
 80076b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c8:	69b9      	ldr	r1, [r7, #24]
 80076ca:	0148      	lsls	r0, r1, #5
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	4401      	add	r1, r0
 80076d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076d4:	4313      	orrs	r3, r2
 80076d6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10d      	bne.n	80076fa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	68d9      	ldr	r1, [r3, #12]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f6:	460a      	mov	r2, r1
 80076f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	791b      	ldrb	r3, [r3, #4]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d128      	bne.n	8007754 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800770e:	2b00      	cmp	r3, #0
 8007710:	d110      	bne.n	8007734 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800772c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e00f      	b.n	8007754 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007752:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800776e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3720      	adds	r7, #32
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	1ff80000 	.word	0x1ff80000

08007784 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d14a      	bne.n	8007838 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077ba:	f040 8086 	bne.w	80078ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	7812      	ldrb	r2, [r2, #0]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007800:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007804:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007812:	4293      	cmp	r3, r2
 8007814:	d902      	bls.n	800781c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
          break;
 800781a:	e056      	b.n	80078ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007834:	d0e7      	beq.n	8007806 <USB_EPStopXfer+0x82>
 8007836:	e048      	b.n	80078ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800784c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007850:	d13b      	bne.n	80078ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007870:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007874:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	7812      	ldrb	r2, [r2, #0]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	440a      	add	r2, r1
 8007890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007894:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007898:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3301      	adds	r3, #1
 800789e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d902      	bls.n	80078b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	75fb      	strb	r3, [r7, #23]
          break;
 80078ae:	e00c      	b.n	80078ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078c8:	d0e7      	beq.n	800789a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	@ 0x24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4611      	mov	r1, r2
 80078e4:	461a      	mov	r2, r3
 80078e6:	460b      	mov	r3, r1
 80078e8:	71fb      	strb	r3, [r7, #7]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d123      	bne.n	8007946 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078fe:	88bb      	ldrh	r3, [r7, #4]
 8007900:	3303      	adds	r3, #3
 8007902:	089b      	lsrs	r3, r3, #2
 8007904:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007906:	2300      	movs	r3, #0
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e018      	b.n	800793e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	031a      	lsls	r2, r3, #12
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007918:	461a      	mov	r2, r3
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	3301      	adds	r3, #1
 8007924:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	3301      	adds	r3, #1
 800792a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	3301      	adds	r3, #1
 8007930:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	3301      	adds	r3, #1
 8007936:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	3301      	adds	r3, #1
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	d3e2      	bcc.n	800790c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3724      	adds	r7, #36	@ 0x24
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007954:	b480      	push	{r7}
 8007956:	b08b      	sub	sp, #44	@ 0x2c
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	089b      	lsrs	r3, r3, #2
 800796e:	b29b      	uxth	r3, r3
 8007970:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800797a:	2300      	movs	r3, #0
 800797c:	623b      	str	r3, [r7, #32]
 800797e:	e014      	b.n	80079aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	601a      	str	r2, [r3, #0]
    pDest++;
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	3301      	adds	r3, #1
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	3301      	adds	r3, #1
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	3301      	adds	r3, #1
 800799c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	3301      	adds	r3, #1
 80079a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	3301      	adds	r3, #1
 80079a8:	623b      	str	r3, [r7, #32]
 80079aa:	6a3a      	ldr	r2, [r7, #32]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d3e6      	bcc.n	8007980 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079b2:	8bfb      	ldrh	r3, [r7, #30]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01e      	beq.n	80079f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079c2:	461a      	mov	r2, r3
 80079c4:	f107 0310 	add.w	r3, r7, #16
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	701a      	strb	r2, [r3, #0]
      i++;
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	3301      	adds	r3, #1
 80079e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	3301      	adds	r3, #1
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80079ea:	8bfb      	ldrh	r3, [r7, #30]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079f0:	8bfb      	ldrh	r3, [r7, #30]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1ea      	bne.n	80079cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	372c      	adds	r7, #44	@ 0x2c
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d12c      	bne.n	8007a7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	db12      	blt.n	8007a58 <USB_EPSetStall+0x54>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00f      	beq.n	8007a58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e02b      	b.n	8007ad2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	db12      	blt.n	8007ab2 <USB_EPSetStall+0xae>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00f      	beq.n	8007ab2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ab0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007acc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ad0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d128      	bne.n	8007b4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	791b      	ldrb	r3, [r3, #4]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d003      	beq.n	8007b2c <USB_EPClearStall+0x4c>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	791b      	ldrb	r3, [r3, #4]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d138      	bne.n	8007b9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	e027      	b.n	8007b9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	791b      	ldrb	r3, [r3, #4]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d003      	beq.n	8007b7e <USB_EPClearStall+0x9e>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	791b      	ldrb	r3, [r3, #4]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d10f      	bne.n	8007b9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007bce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007be0:	68f9      	ldr	r1, [r7, #12]
 8007be2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007be6:	4313      	orrs	r3, r2
 8007be8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c26:	f023 0302 	bic.w	r3, r3, #2
 8007c2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c54:	f023 0303 	bic.w	r3, r3, #3
 8007c58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	0c1b      	lsrs	r3, r3, #16
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	b29b      	uxth	r3, r3
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	4013      	ands	r3, r2
 8007d36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d38:	68bb      	ldr	r3, [r7, #8]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b087      	sub	sp, #28
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	01db      	lsls	r3, r3, #7
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4013      	ands	r3, r2
 8007d92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d94:	68bb      	ldr	r3, [r7, #8]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0301 	and.w	r3, r3, #1
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007ddc:	f023 0307 	bic.w	r3, r3, #7
 8007de0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007df4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	333c      	adds	r3, #60	@ 0x3c
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4a26      	ldr	r2, [pc, #152]	@ (8007ebc <USB_EP0_OutStart+0xb8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d90a      	bls.n	8007e3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e38:	d101      	bne.n	8007e3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e037      	b.n	8007eae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e44:	461a      	mov	r2, r3
 8007e46:	2300      	movs	r3, #0
 8007e48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6c:	f043 0318 	orr.w	r3, r3, #24
 8007e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e80:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007e84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d10f      	bne.n	8007eac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007eaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	4f54300a 	.word	0x4f54300a

08007ec0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ed8:	d901      	bls.n	8007ede <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e01b      	b.n	8007f16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	daf2      	bge.n	8007ecc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f043 0201 	orr.w	r2, r3, #1
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f02:	d901      	bls.n	8007f08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e006      	b.n	8007f16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d0f0      	beq.n	8007ef6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f30:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007f34:	f002 fcb8 	bl	800a8a8 <USBD_static_malloc>
 8007f38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	32b0      	adds	r2, #176	@ 0xb0
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f50:	2302      	movs	r3, #2
 8007f52:	e0d4      	b.n	80080fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f54:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007f58:	2100      	movs	r1, #0
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f002 ff01 	bl	800ad62 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	32b0      	adds	r2, #176	@ 0xb0
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	32b0      	adds	r2, #176	@ 0xb0
 8007f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	7c1b      	ldrb	r3, [r3, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d138      	bne.n	8007ffe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8008108 <USBD_CDC_Init+0x1e4>)
 8007f8e:	7819      	ldrb	r1, [r3, #0]
 8007f90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f94:	2202      	movs	r2, #2
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f002 fb63 	bl	800a662 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8008108 <USBD_CDC_Init+0x1e4>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3324      	adds	r3, #36	@ 0x24
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fb6:	4b55      	ldr	r3, [pc, #340]	@ (800810c <USBD_CDC_Init+0x1e8>)
 8007fb8:	7819      	ldrb	r1, [r3, #0]
 8007fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f002 fb4e 	bl	800a662 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fc6:	4b51      	ldr	r3, [pc, #324]	@ (800810c <USBD_CDC_Init+0x1e8>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	f003 020f 	and.w	r2, r3, #15
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fde:	2201      	movs	r2, #1
 8007fe0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8008110 <USBD_CDC_Init+0x1ec>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	f003 020f 	and.w	r2, r3, #15
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	3326      	adds	r3, #38	@ 0x26
 8007ff8:	2210      	movs	r2, #16
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e035      	b.n	800806a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ffe:	4b42      	ldr	r3, [pc, #264]	@ (8008108 <USBD_CDC_Init+0x1e4>)
 8008000:	7819      	ldrb	r1, [r3, #0]
 8008002:	2340      	movs	r3, #64	@ 0x40
 8008004:	2202      	movs	r2, #2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f002 fb2b 	bl	800a662 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800800c:	4b3e      	ldr	r3, [pc, #248]	@ (8008108 <USBD_CDC_Init+0x1e4>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f003 020f 	and.w	r2, r3, #15
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	3324      	adds	r3, #36	@ 0x24
 8008022:	2201      	movs	r2, #1
 8008024:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008026:	4b39      	ldr	r3, [pc, #228]	@ (800810c <USBD_CDC_Init+0x1e8>)
 8008028:	7819      	ldrb	r1, [r3, #0]
 800802a:	2340      	movs	r3, #64	@ 0x40
 800802c:	2202      	movs	r2, #2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f002 fb17 	bl	800a662 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008034:	4b35      	ldr	r3, [pc, #212]	@ (800810c <USBD_CDC_Init+0x1e8>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 020f 	and.w	r2, r3, #15
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800804c:	2201      	movs	r2, #1
 800804e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008050:	4b2f      	ldr	r3, [pc, #188]	@ (8008110 <USBD_CDC_Init+0x1ec>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f003 020f 	and.w	r2, r3, #15
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	3326      	adds	r3, #38	@ 0x26
 8008066:	2210      	movs	r2, #16
 8008068:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800806a:	4b29      	ldr	r3, [pc, #164]	@ (8008110 <USBD_CDC_Init+0x1ec>)
 800806c:	7819      	ldrb	r1, [r3, #0]
 800806e:	2308      	movs	r3, #8
 8008070:	2203      	movs	r2, #3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f002 faf5 	bl	800a662 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008078:	4b25      	ldr	r3, [pc, #148]	@ (8008110 <USBD_CDC_Init+0x1ec>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	3324      	adds	r3, #36	@ 0x24
 800808e:	2201      	movs	r2, #1
 8008090:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	33b0      	adds	r3, #176	@ 0xb0
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80080c8:	2302      	movs	r3, #2
 80080ca:	e018      	b.n	80080fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	7c1b      	ldrb	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080d4:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <USBD_CDC_Init+0x1e8>)
 80080d6:	7819      	ldrb	r1, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f002 fbac 	bl	800a840 <USBD_LL_PrepareReceive>
 80080e8:	e008      	b.n	80080fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080ea:	4b08      	ldr	r3, [pc, #32]	@ (800810c <USBD_CDC_Init+0x1e8>)
 80080ec:	7819      	ldrb	r1, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080f4:	2340      	movs	r3, #64	@ 0x40
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f002 fba2 	bl	800a840 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000097 	.word	0x20000097
 800810c:	20000098 	.word	0x20000098
 8008110:	20000099 	.word	0x20000099

08008114 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008120:	4b3a      	ldr	r3, [pc, #232]	@ (800820c <USBD_CDC_DeInit+0xf8>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f002 fac1 	bl	800a6ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800812c:	4b37      	ldr	r3, [pc, #220]	@ (800820c <USBD_CDC_DeInit+0xf8>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	f003 020f 	and.w	r2, r3, #15
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	3324      	adds	r3, #36	@ 0x24
 8008142:	2200      	movs	r2, #0
 8008144:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008146:	4b32      	ldr	r3, [pc, #200]	@ (8008210 <USBD_CDC_DeInit+0xfc>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f002 faae 	bl	800a6ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008152:	4b2f      	ldr	r3, [pc, #188]	@ (8008210 <USBD_CDC_DeInit+0xfc>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	f003 020f 	and.w	r2, r3, #15
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800816a:	2200      	movs	r2, #0
 800816c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800816e:	4b29      	ldr	r3, [pc, #164]	@ (8008214 <USBD_CDC_DeInit+0x100>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f002 fa9a 	bl	800a6ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800817a:	4b26      	ldr	r3, [pc, #152]	@ (8008214 <USBD_CDC_DeInit+0x100>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 020f 	and.w	r2, r3, #15
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	3324      	adds	r3, #36	@ 0x24
 8008190:	2200      	movs	r2, #0
 8008192:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008194:	4b1f      	ldr	r3, [pc, #124]	@ (8008214 <USBD_CDC_DeInit+0x100>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	3326      	adds	r3, #38	@ 0x26
 80081aa:	2200      	movs	r2, #0
 80081ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	32b0      	adds	r2, #176	@ 0xb0
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01f      	beq.n	8008200 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	33b0      	adds	r3, #176	@ 0xb0
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	32b0      	adds	r2, #176	@ 0xb0
 80081de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f002 fb6e 	bl	800a8c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	32b0      	adds	r2, #176	@ 0xb0
 80081f2:	2100      	movs	r1, #0
 80081f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000097 	.word	0x20000097
 8008210:	20000098 	.word	0x20000098
 8008214:	20000099 	.word	0x20000099

08008218 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	32b0      	adds	r2, #176	@ 0xb0
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	e0bf      	b.n	80083c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008250:	2b00      	cmp	r3, #0
 8008252:	d050      	beq.n	80082f6 <USBD_CDC_Setup+0xde>
 8008254:	2b20      	cmp	r3, #32
 8008256:	f040 80af 	bne.w	80083b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	88db      	ldrh	r3, [r3, #6]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d03a      	beq.n	80082d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	b25b      	sxtb	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	da1b      	bge.n	80082a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	33b0      	adds	r3, #176	@ 0xb0
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008282:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	88d2      	ldrh	r2, [r2, #6]
 8008288:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	88db      	ldrh	r3, [r3, #6]
 800828e:	2b07      	cmp	r3, #7
 8008290:	bf28      	it	cs
 8008292:	2307      	movcs	r3, #7
 8008294:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	89fa      	ldrh	r2, [r7, #14]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 fd93 	bl	8009dc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082a2:	e090      	b.n	80083c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785a      	ldrb	r2, [r3, #1]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	88db      	ldrh	r3, [r3, #6]
 80082b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80082b4:	d803      	bhi.n	80082be <USBD_CDC_Setup+0xa6>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	88db      	ldrh	r3, [r3, #6]
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	e000      	b.n	80082c0 <USBD_CDC_Setup+0xa8>
 80082be:	2240      	movs	r2, #64	@ 0x40
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082c6:	6939      	ldr	r1, [r7, #16]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80082ce:	461a      	mov	r2, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 fda5 	bl	8009e20 <USBD_CtlPrepareRx>
      break;
 80082d6:	e076      	b.n	80083c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	33b0      	adds	r3, #176	@ 0xb0
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	7850      	ldrb	r0, [r2, #1]
 80082ee:	2200      	movs	r2, #0
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	4798      	blx	r3
      break;
 80082f4:	e067      	b.n	80083c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	2b0b      	cmp	r3, #11
 80082fc:	d851      	bhi.n	80083a2 <USBD_CDC_Setup+0x18a>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <USBD_CDC_Setup+0xec>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008335 	.word	0x08008335
 8008308:	080083b1 	.word	0x080083b1
 800830c:	080083a3 	.word	0x080083a3
 8008310:	080083a3 	.word	0x080083a3
 8008314:	080083a3 	.word	0x080083a3
 8008318:	080083a3 	.word	0x080083a3
 800831c:	080083a3 	.word	0x080083a3
 8008320:	080083a3 	.word	0x080083a3
 8008324:	080083a3 	.word	0x080083a3
 8008328:	080083a3 	.word	0x080083a3
 800832c:	0800835f 	.word	0x0800835f
 8008330:	08008389 	.word	0x08008389
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b03      	cmp	r3, #3
 800833e:	d107      	bne.n	8008350 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008340:	f107 030a 	add.w	r3, r7, #10
 8008344:	2202      	movs	r2, #2
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 fd3d 	bl	8009dc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800834e:	e032      	b.n	80083b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fcbb 	bl	8009cce <USBD_CtlError>
            ret = USBD_FAIL;
 8008358:	2303      	movs	r3, #3
 800835a:	75fb      	strb	r3, [r7, #23]
          break;
 800835c:	e02b      	b.n	80083b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b03      	cmp	r3, #3
 8008368:	d107      	bne.n	800837a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800836a:	f107 030d 	add.w	r3, r7, #13
 800836e:	2201      	movs	r2, #1
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fd28 	bl	8009dc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008378:	e01d      	b.n	80083b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 fca6 	bl	8009cce <USBD_CtlError>
            ret = USBD_FAIL;
 8008382:	2303      	movs	r3, #3
 8008384:	75fb      	strb	r3, [r7, #23]
          break;
 8008386:	e016      	b.n	80083b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b03      	cmp	r3, #3
 8008392:	d00f      	beq.n	80083b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fc99 	bl	8009cce <USBD_CtlError>
            ret = USBD_FAIL;
 800839c:	2303      	movs	r3, #3
 800839e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083a0:	e008      	b.n	80083b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fc92 	bl	8009cce <USBD_CtlError>
          ret = USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	75fb      	strb	r3, [r7, #23]
          break;
 80083ae:	e002      	b.n	80083b6 <USBD_CDC_Setup+0x19e>
          break;
 80083b0:	bf00      	nop
 80083b2:	e008      	b.n	80083c6 <USBD_CDC_Setup+0x1ae>
          break;
 80083b4:	bf00      	nop
      }
      break;
 80083b6:	e006      	b.n	80083c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fc87 	bl	8009cce <USBD_CtlError>
      ret = USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	75fb      	strb	r3, [r7, #23]
      break;
 80083c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	32b0      	adds	r2, #176	@ 0xb0
 80083ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e065      	b.n	80084c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	32b0      	adds	r2, #176	@ 0xb0
 8008404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008408:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	f003 020f 	and.w	r2, r3, #15
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	3318      	adds	r3, #24
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d02f      	beq.n	8008484 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	f003 020f 	and.w	r2, r3, #15
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	3318      	adds	r3, #24
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	f003 010f 	and.w	r1, r3, #15
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	460b      	mov	r3, r1
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	440b      	add	r3, r1
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4403      	add	r3, r0
 800844c:	331c      	adds	r3, #28
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	fbb2 f1f3 	udiv	r1, r2, r3
 8008454:	fb01 f303 	mul.w	r3, r1, r3
 8008458:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800845a:	2b00      	cmp	r3, #0
 800845c:	d112      	bne.n	8008484 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	3318      	adds	r3, #24
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008476:	78f9      	ldrb	r1, [r7, #3]
 8008478:	2300      	movs	r3, #0
 800847a:	2200      	movs	r2, #0
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f002 f9be 	bl	800a7fe <USBD_LL_Transmit>
 8008482:	e01f      	b.n	80084c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	33b0      	adds	r3, #176	@ 0xb0
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d010      	beq.n	80084c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	33b0      	adds	r3, #176	@ 0xb0
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80084c0:	78fa      	ldrb	r2, [r7, #3]
 80084c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	32b0      	adds	r2, #176	@ 0xb0
 80084e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	32b0      	adds	r2, #176	@ 0xb0
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e01a      	b.n	8008536 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f002 f9bc 	bl	800a882 <USBD_LL_GetRxDataSize>
 800850a:	4602      	mov	r2, r0
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	33b0      	adds	r3, #176	@ 0xb0
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008530:	4611      	mov	r1, r2
 8008532:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	32b0      	adds	r2, #176	@ 0xb0
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800855c:	2303      	movs	r3, #3
 800855e:	e024      	b.n	80085aa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	33b0      	adds	r3, #176	@ 0xb0
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d019      	beq.n	80085a8 <USBD_CDC_EP0_RxReady+0x6a>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800857a:	2bff      	cmp	r3, #255	@ 0xff
 800857c:	d014      	beq.n	80085a8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	33b0      	adds	r3, #176	@ 0xb0
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008596:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800859e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	22ff      	movs	r2, #255	@ 0xff
 80085a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085bc:	2182      	movs	r1, #130	@ 0x82
 80085be:	4818      	ldr	r0, [pc, #96]	@ (8008620 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085c0:	f000 fd4f 	bl	8009062 <USBD_GetEpDesc>
 80085c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085c6:	2101      	movs	r1, #1
 80085c8:	4815      	ldr	r0, [pc, #84]	@ (8008620 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085ca:	f000 fd4a 	bl	8009062 <USBD_GetEpDesc>
 80085ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085d0:	2181      	movs	r1, #129	@ 0x81
 80085d2:	4813      	ldr	r0, [pc, #76]	@ (8008620 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085d4:	f000 fd45 	bl	8009062 <USBD_GetEpDesc>
 80085d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2210      	movs	r2, #16
 80085e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085f4:	711a      	strb	r2, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008608:	711a      	strb	r2, [r3, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2243      	movs	r2, #67	@ 0x43
 8008612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008614:	4b02      	ldr	r3, [pc, #8]	@ (8008620 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000054 	.word	0x20000054

08008624 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800862c:	2182      	movs	r1, #130	@ 0x82
 800862e:	4818      	ldr	r0, [pc, #96]	@ (8008690 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008630:	f000 fd17 	bl	8009062 <USBD_GetEpDesc>
 8008634:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008636:	2101      	movs	r1, #1
 8008638:	4815      	ldr	r0, [pc, #84]	@ (8008690 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800863a:	f000 fd12 	bl	8009062 <USBD_GetEpDesc>
 800863e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008640:	2181      	movs	r1, #129	@ 0x81
 8008642:	4813      	ldr	r0, [pc, #76]	@ (8008690 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008644:	f000 fd0d 	bl	8009062 <USBD_GetEpDesc>
 8008648:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2210      	movs	r2, #16
 8008654:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2200      	movs	r2, #0
 8008660:	711a      	strb	r2, [r3, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f042 0202 	orr.w	r2, r2, #2
 8008668:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d006      	beq.n	800867e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	711a      	strb	r2, [r3, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f042 0202 	orr.w	r2, r2, #2
 800867c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2243      	movs	r2, #67	@ 0x43
 8008682:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008684:	4b02      	ldr	r3, [pc, #8]	@ (8008690 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000054 	.word	0x20000054

08008694 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800869c:	2182      	movs	r1, #130	@ 0x82
 800869e:	4818      	ldr	r0, [pc, #96]	@ (8008700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086a0:	f000 fcdf 	bl	8009062 <USBD_GetEpDesc>
 80086a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086a6:	2101      	movs	r1, #1
 80086a8:	4815      	ldr	r0, [pc, #84]	@ (8008700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086aa:	f000 fcda 	bl	8009062 <USBD_GetEpDesc>
 80086ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086b0:	2181      	movs	r1, #129	@ 0x81
 80086b2:	4813      	ldr	r0, [pc, #76]	@ (8008700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086b4:	f000 fcd5 	bl	8009062 <USBD_GetEpDesc>
 80086b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2210      	movs	r2, #16
 80086c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d006      	beq.n	80086da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086d4:	711a      	strb	r2, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d006      	beq.n	80086ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086e8:	711a      	strb	r2, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2243      	movs	r2, #67	@ 0x43
 80086f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086f4:	4b02      	ldr	r3, [pc, #8]	@ (8008700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000054 	.word	0x20000054

08008704 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	220a      	movs	r2, #10
 8008710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008712:	4b03      	ldr	r3, [pc, #12]	@ (8008720 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20000010 	.word	0x20000010

08008724 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008734:	2303      	movs	r3, #3
 8008736:	e009      	b.n	800874c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	33b0      	adds	r3, #176	@ 0xb0
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	32b0      	adds	r2, #176	@ 0xb0
 800876e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008772:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800877a:	2303      	movs	r3, #3
 800877c:	e008      	b.n	8008790 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	32b0      	adds	r2, #176	@ 0xb0
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e004      	b.n	80087ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
	...

080087d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	32b0      	adds	r2, #176	@ 0xb0
 80087ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e025      	b.n	800884a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008804:	2b00      	cmp	r3, #0
 8008806:	d11f      	bne.n	8008848 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2201      	movs	r2, #1
 800880c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008810:	4b10      	ldr	r3, [pc, #64]	@ (8008854 <USBD_CDC_TransmitPacket+0x7c>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f003 020f 	and.w	r2, r3, #15
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4403      	add	r3, r0
 800882a:	3318      	adds	r3, #24
 800882c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800882e:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <USBD_CDC_TransmitPacket+0x7c>)
 8008830:	7819      	ldrb	r1, [r3, #0]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 ffdd 	bl	800a7fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000097 	.word	0x20000097

08008858 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	32b0      	adds	r2, #176	@ 0xb0
 800886a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	32b0      	adds	r2, #176	@ 0xb0
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008882:	2303      	movs	r3, #3
 8008884:	e018      	b.n	80088b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7c1b      	ldrb	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10a      	bne.n	80088a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800888e:	4b0c      	ldr	r3, [pc, #48]	@ (80088c0 <USBD_CDC_ReceivePacket+0x68>)
 8008890:	7819      	ldrb	r1, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 ffcf 	bl	800a840 <USBD_LL_PrepareReceive>
 80088a2:	e008      	b.n	80088b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088a4:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <USBD_CDC_ReceivePacket+0x68>)
 80088a6:	7819      	ldrb	r1, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088ae:	2340      	movs	r3, #64	@ 0x40
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 ffc5 	bl	800a840 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000098 	.word	0x20000098

080088c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	e01f      	b.n	800891c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	79fa      	ldrb	r2, [r7, #7]
 800890e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 fe3f 	bl	800a594 <USBD_LL_Init>
 8008916:	4603      	mov	r3, r0
 8008918:	75fb      	strb	r3, [r7, #23]

  return ret;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008938:	2303      	movs	r3, #3
 800893a:	e025      	b.n	8008988 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	32ae      	adds	r2, #174	@ 0xae
 800894e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00f      	beq.n	8008978 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	32ae      	adds	r2, #174	@ 0xae
 8008962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008968:	f107 020e 	add.w	r2, r7, #14
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	4602      	mov	r2, r0
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 fe47 	bl	800a62c <USBD_LL_Start>
 800899e:	4603      	mov	r3, r0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	78fa      	ldrb	r2, [r7, #3]
 80089e2:	4611      	mov	r1, r2
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	4611      	mov	r1, r2
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 f90c 	bl	8009c5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a50:	461a      	mov	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d01a      	beq.n	8008a9c <USBD_LL_SetupStage+0x72>
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d822      	bhi.n	8008ab0 <USBD_LL_SetupStage+0x86>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <USBD_LL_SetupStage+0x4a>
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d00a      	beq.n	8008a88 <USBD_LL_SetupStage+0x5e>
 8008a72:	e01d      	b.n	8008ab0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fb63 	bl	8009148 <USBD_StdDevReq>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]
      break;
 8008a86:	e020      	b.n	8008aca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fbcb 	bl	800922c <USBD_StdItfReq>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9a:	e016      	b.n	8008aca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc2d 	bl	8009304 <USBD_StdEPReq>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	e00c      	b.n	8008aca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ab6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fe14 	bl	800a6ec <USBD_LL_StallEP>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac8:	bf00      	nop
  }

  return ret;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	460b      	mov	r3, r1
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d16e      	bne.n	8008bca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008af2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	f040 8098 	bne.w	8008c30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d913      	bls.n	8008b34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	1ad2      	subs	r2, r2, r3
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	bf28      	it	cs
 8008b26:	4613      	movcs	r3, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f001 f994 	bl	8009e5a <USBD_CtlContinueRx>
 8008b32:	e07d      	b.n	8008c30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b3a:	f003 031f 	and.w	r3, r3, #31
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d014      	beq.n	8008b6c <USBD_LL_DataOutStage+0x98>
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d81d      	bhi.n	8008b82 <USBD_LL_DataOutStage+0xae>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <USBD_LL_DataOutStage+0x7c>
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d003      	beq.n	8008b56 <USBD_LL_DataOutStage+0x82>
 8008b4e:	e018      	b.n	8008b82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75bb      	strb	r3, [r7, #22]
            break;
 8008b54:	e018      	b.n	8008b88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fa64 	bl	800902e <USBD_CoreFindIF>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75bb      	strb	r3, [r7, #22]
            break;
 8008b6a:	e00d      	b.n	8008b88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	4619      	mov	r1, r3
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 fa66 	bl	8009048 <USBD_CoreFindEP>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b80:	e002      	b.n	8008b88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75bb      	strb	r3, [r7, #22]
            break;
 8008b86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b88:	7dbb      	ldrb	r3, [r7, #22]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d119      	bne.n	8008bc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d113      	bne.n	8008bc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b9a:	7dba      	ldrb	r2, [r7, #22]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	32ae      	adds	r2, #174	@ 0xae
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00b      	beq.n	8008bc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008baa:	7dba      	ldrb	r2, [r7, #22]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bb2:	7dba      	ldrb	r2, [r7, #22]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	32ae      	adds	r2, #174	@ 0xae
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f001 f95a 	bl	8009e7c <USBD_CtlSendStatus>
 8008bc8:	e032      	b.n	8008c30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bca:	7afb      	ldrb	r3, [r7, #11]
 8008bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fa37 	bl	8009048 <USBD_CoreFindEP>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bde:	7dbb      	ldrb	r3, [r7, #22]
 8008be0:	2bff      	cmp	r3, #255	@ 0xff
 8008be2:	d025      	beq.n	8008c30 <USBD_LL_DataOutStage+0x15c>
 8008be4:	7dbb      	ldrb	r3, [r7, #22]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d122      	bne.n	8008c30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d117      	bne.n	8008c26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bf6:	7dba      	ldrb	r2, [r7, #22]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	32ae      	adds	r2, #174	@ 0xae
 8008bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00f      	beq.n	8008c26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c06:	7dba      	ldrb	r2, [r7, #22]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c0e:	7dba      	ldrb	r2, [r7, #22]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	32ae      	adds	r2, #174	@ 0xae
 8008c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	7afa      	ldrb	r2, [r7, #11]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	4798      	blx	r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	e000      	b.n	8008c32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b086      	sub	sp, #24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	460b      	mov	r3, r1
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d16f      	bne.n	8008d2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3314      	adds	r3, #20
 8008c52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d15a      	bne.n	8008d14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	689a      	ldr	r2, [r3, #8]
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d914      	bls.n	8008c94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f001 f8bc 	bl	8009dfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c86:	2300      	movs	r3, #0
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f001 fdd7 	bl	800a840 <USBD_LL_PrepareReceive>
 8008c92:	e03f      	b.n	8008d14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	68da      	ldr	r2, [r3, #12]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d11c      	bne.n	8008cda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d316      	bcc.n	8008cda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d20f      	bcs.n	8008cda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f001 f89d 	bl	8009dfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ccc:	2300      	movs	r3, #0
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f001 fdb4 	bl	800a840 <USBD_LL_PrepareReceive>
 8008cd8:	e01c      	b.n	8008d14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d10f      	bne.n	8008d06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d06:	2180      	movs	r1, #128	@ 0x80
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f001 fcef 	bl	800a6ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f001 f8c7 	bl	8009ea2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d03a      	beq.n	8008d94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff fe42 	bl	80089a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008d2c:	e032      	b.n	8008d94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	4619      	mov	r1, r3
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 f985 	bl	8009048 <USBD_CoreFindEP>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2bff      	cmp	r3, #255	@ 0xff
 8008d46:	d025      	beq.n	8008d94 <USBD_LL_DataInStage+0x15a>
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d122      	bne.n	8008d94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d11c      	bne.n	8008d94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d5a:	7dfa      	ldrb	r2, [r7, #23]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	32ae      	adds	r2, #174	@ 0xae
 8008d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d014      	beq.n	8008d94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d6a:	7dfa      	ldrb	r2, [r7, #23]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d72:	7dfa      	ldrb	r2, [r7, #23]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	32ae      	adds	r2, #174	@ 0xae
 8008d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	7afa      	ldrb	r2, [r7, #11]
 8008d80:	4611      	mov	r1, r2
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	4798      	blx	r3
 8008d86:	4603      	mov	r3, r0
 8008d88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d8a:	7dbb      	ldrb	r3, [r7, #22]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d90:	7dbb      	ldrb	r3, [r7, #22]
 8008d92:	e000      	b.n	8008d96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d014      	beq.n	8008e04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00e      	beq.n	8008e04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6852      	ldr	r2, [r2, #4]
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	4611      	mov	r1, r2
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e04:	2340      	movs	r3, #64	@ 0x40
 8008e06:	2200      	movs	r2, #0
 8008e08:	2100      	movs	r1, #0
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 fc29 	bl	800a662 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2240      	movs	r2, #64	@ 0x40
 8008e1c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e20:	2340      	movs	r3, #64	@ 0x40
 8008e22:	2200      	movs	r2, #0
 8008e24:	2180      	movs	r1, #128	@ 0x80
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 fc1b 	bl	800a662 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2240      	movs	r2, #64	@ 0x40
 8008e36:	621a      	str	r2, [r3, #32]

  return ret;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d006      	beq.n	8008e84 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2204      	movs	r2, #4
 8008e88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d106      	bne.n	8008ebc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d110      	bne.n	8008f00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	32ae      	adds	r2, #174	@ 0xae
 8008f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e01c      	b.n	8008f66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d115      	bne.n	8008f64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	32ae      	adds	r2, #174	@ 0xae
 8008f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	32ae      	adds	r2, #174	@ 0xae
 8008f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	32ae      	adds	r2, #174	@ 0xae
 8008f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e01c      	b.n	8008fca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d115      	bne.n	8008fc8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	32ae      	adds	r2, #174	@ 0xae
 8008fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	32ae      	adds	r2, #174	@ 0xae
 8008fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc0:	78fa      	ldrb	r2, [r7, #3]
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00e      	beq.n	8009024 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6852      	ldr	r2, [r2, #4]
 8009012:	b2d2      	uxtb	r2, r2
 8009014:	4611      	mov	r1, r2
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009020:	2303      	movs	r3, #3
 8009022:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800903a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009054:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	460b      	mov	r3, r1
 800906c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	b29b      	uxth	r3, r3
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	7812      	ldrb	r2, [r2, #0]
 8009084:	4293      	cmp	r3, r2
 8009086:	d91f      	bls.n	80090c8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800908e:	e013      	b.n	80090b8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009090:	f107 030a 	add.w	r3, r7, #10
 8009094:	4619      	mov	r1, r3
 8009096:	6978      	ldr	r0, [r7, #20]
 8009098:	f000 f81b 	bl	80090d2 <USBD_GetNextDesc>
 800909c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	785b      	ldrb	r3, [r3, #1]
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	d108      	bne.n	80090b8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	789b      	ldrb	r3, [r3, #2]
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d008      	beq.n	80090c6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	885b      	ldrh	r3, [r3, #2]
 80090bc:	b29a      	uxth	r2, r3
 80090be:	897b      	ldrh	r3, [r7, #10]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d8e5      	bhi.n	8009090 <USBD_GetEpDesc+0x2e>
 80090c4:	e000      	b.n	80090c8 <USBD_GetEpDesc+0x66>
          break;
 80090c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090c8:	693b      	ldr	r3, [r7, #16]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	7812      	ldrb	r2, [r2, #0]
 80090e8:	4413      	add	r3, r2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	461a      	mov	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4413      	add	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090fc:	68fb      	ldr	r3, [r7, #12]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800910a:	b480      	push	{r7}
 800910c:	b087      	sub	sp, #28
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	3301      	adds	r3, #1
 8009120:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009128:	8a3b      	ldrh	r3, [r7, #16]
 800912a:	021b      	lsls	r3, r3, #8
 800912c:	b21a      	sxth	r2, r3
 800912e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009132:	4313      	orrs	r3, r2
 8009134:	b21b      	sxth	r3, r3
 8009136:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009138:	89fb      	ldrh	r3, [r7, #14]
}
 800913a:	4618      	mov	r0, r3
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800915e:	2b40      	cmp	r3, #64	@ 0x40
 8009160:	d005      	beq.n	800916e <USBD_StdDevReq+0x26>
 8009162:	2b40      	cmp	r3, #64	@ 0x40
 8009164:	d857      	bhi.n	8009216 <USBD_StdDevReq+0xce>
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00f      	beq.n	800918a <USBD_StdDevReq+0x42>
 800916a:	2b20      	cmp	r3, #32
 800916c:	d153      	bne.n	8009216 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	32ae      	adds	r2, #174	@ 0xae
 8009178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
      break;
 8009188:	e04a      	b.n	8009220 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	2b09      	cmp	r3, #9
 8009190:	d83b      	bhi.n	800920a <USBD_StdDevReq+0xc2>
 8009192:	a201      	add	r2, pc, #4	@ (adr r2, 8009198 <USBD_StdDevReq+0x50>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091ed 	.word	0x080091ed
 800919c:	08009201 	.word	0x08009201
 80091a0:	0800920b 	.word	0x0800920b
 80091a4:	080091f7 	.word	0x080091f7
 80091a8:	0800920b 	.word	0x0800920b
 80091ac:	080091cb 	.word	0x080091cb
 80091b0:	080091c1 	.word	0x080091c1
 80091b4:	0800920b 	.word	0x0800920b
 80091b8:	080091e3 	.word	0x080091e3
 80091bc:	080091d5 	.word	0x080091d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa3c 	bl	8009640 <USBD_GetDescriptor>
          break;
 80091c8:	e024      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fba1 	bl	8009914 <USBD_SetAddress>
          break;
 80091d2:	e01f      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fbe0 	bl	800999c <USBD_SetConfig>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]
          break;
 80091e0:	e018      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fc83 	bl	8009af0 <USBD_GetConfig>
          break;
 80091ea:	e013      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fcb4 	bl	8009b5c <USBD_GetStatus>
          break;
 80091f4:	e00e      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fce3 	bl	8009bc4 <USBD_SetFeature>
          break;
 80091fe:	e009      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fd07 	bl	8009c16 <USBD_ClrFeature>
          break;
 8009208:	e004      	b.n	8009214 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fd5e 	bl	8009cce <USBD_CtlError>
          break;
 8009212:	bf00      	nop
      }
      break;
 8009214:	e004      	b.n	8009220 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fd58 	bl	8009cce <USBD_CtlError>
      break;
 800921e:	bf00      	nop
  }

  return ret;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop

0800922c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009242:	2b40      	cmp	r3, #64	@ 0x40
 8009244:	d005      	beq.n	8009252 <USBD_StdItfReq+0x26>
 8009246:	2b40      	cmp	r3, #64	@ 0x40
 8009248:	d852      	bhi.n	80092f0 <USBD_StdItfReq+0xc4>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <USBD_StdItfReq+0x26>
 800924e:	2b20      	cmp	r3, #32
 8009250:	d14e      	bne.n	80092f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009258:	b2db      	uxtb	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	2b02      	cmp	r3, #2
 800925e:	d840      	bhi.n	80092e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	889b      	ldrh	r3, [r3, #4]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b01      	cmp	r3, #1
 8009268:	d836      	bhi.n	80092d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	889b      	ldrh	r3, [r3, #4]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fedb 	bl	800902e <USBD_CoreFindIF>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2bff      	cmp	r3, #255	@ 0xff
 8009280:	d01d      	beq.n	80092be <USBD_StdItfReq+0x92>
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d11a      	bne.n	80092be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009288:	7bba      	ldrb	r2, [r7, #14]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	32ae      	adds	r2, #174	@ 0xae
 800928e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00f      	beq.n	80092b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009298:	7bba      	ldrb	r2, [r7, #14]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092a0:	7bba      	ldrb	r2, [r7, #14]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	32ae      	adds	r2, #174	@ 0xae
 80092a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092b6:	e004      	b.n	80092c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092b8:	2303      	movs	r3, #3
 80092ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092bc:	e001      	b.n	80092c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092be:	2303      	movs	r3, #3
 80092c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d110      	bne.n	80092ec <USBD_StdItfReq+0xc0>
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10d      	bne.n	80092ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fdd3 	bl	8009e7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092d6:	e009      	b.n	80092ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fcf7 	bl	8009cce <USBD_CtlError>
          break;
 80092e0:	e004      	b.n	80092ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fcf2 	bl	8009cce <USBD_CtlError>
          break;
 80092ea:	e000      	b.n	80092ee <USBD_StdItfReq+0xc2>
          break;
 80092ec:	bf00      	nop
      }
      break;
 80092ee:	e004      	b.n	80092fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fceb 	bl	8009cce <USBD_CtlError>
      break;
 80092f8:	bf00      	nop
  }

  return ret;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	889b      	ldrh	r3, [r3, #4]
 8009316:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009320:	2b40      	cmp	r3, #64	@ 0x40
 8009322:	d007      	beq.n	8009334 <USBD_StdEPReq+0x30>
 8009324:	2b40      	cmp	r3, #64	@ 0x40
 8009326:	f200 817f 	bhi.w	8009628 <USBD_StdEPReq+0x324>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d02a      	beq.n	8009384 <USBD_StdEPReq+0x80>
 800932e:	2b20      	cmp	r3, #32
 8009330:	f040 817a 	bne.w	8009628 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff fe85 	bl	8009048 <USBD_CoreFindEP>
 800933e:	4603      	mov	r3, r0
 8009340:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009342:	7b7b      	ldrb	r3, [r7, #13]
 8009344:	2bff      	cmp	r3, #255	@ 0xff
 8009346:	f000 8174 	beq.w	8009632 <USBD_StdEPReq+0x32e>
 800934a:	7b7b      	ldrb	r3, [r7, #13]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8170 	bne.w	8009632 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009352:	7b7a      	ldrb	r2, [r7, #13]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800935a:	7b7a      	ldrb	r2, [r7, #13]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	32ae      	adds	r2, #174	@ 0xae
 8009360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 8163 	beq.w	8009632 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800936c:	7b7a      	ldrb	r2, [r7, #13]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32ae      	adds	r2, #174	@ 0xae
 8009372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	4798      	blx	r3
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009382:	e156      	b.n	8009632 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d008      	beq.n	800939e <USBD_StdEPReq+0x9a>
 800938c:	2b03      	cmp	r3, #3
 800938e:	f300 8145 	bgt.w	800961c <USBD_StdEPReq+0x318>
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 809b 	beq.w	80094ce <USBD_StdEPReq+0x1ca>
 8009398:	2b01      	cmp	r3, #1
 800939a:	d03c      	beq.n	8009416 <USBD_StdEPReq+0x112>
 800939c:	e13e      	b.n	800961c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d002      	beq.n	80093b0 <USBD_StdEPReq+0xac>
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d016      	beq.n	80093dc <USBD_StdEPReq+0xd8>
 80093ae:	e02c      	b.n	800940a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00d      	beq.n	80093d2 <USBD_StdEPReq+0xce>
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b80      	cmp	r3, #128	@ 0x80
 80093ba:	d00a      	beq.n	80093d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f993 	bl	800a6ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093c6:	2180      	movs	r1, #128	@ 0x80
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 f98f 	bl	800a6ec <USBD_LL_StallEP>
 80093ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093d0:	e020      	b.n	8009414 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc7a 	bl	8009cce <USBD_CtlError>
              break;
 80093da:	e01b      	b.n	8009414 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	885b      	ldrh	r3, [r3, #2]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10e      	bne.n	8009402 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <USBD_StdEPReq+0xfe>
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	2b80      	cmp	r3, #128	@ 0x80
 80093ee:	d008      	beq.n	8009402 <USBD_StdEPReq+0xfe>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	88db      	ldrh	r3, [r3, #6]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 f975 	bl	800a6ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fd3a 	bl	8009e7c <USBD_CtlSendStatus>

              break;
 8009408:	e004      	b.n	8009414 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fc5e 	bl	8009cce <USBD_CtlError>
              break;
 8009412:	bf00      	nop
          }
          break;
 8009414:	e107      	b.n	8009626 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d002      	beq.n	8009428 <USBD_StdEPReq+0x124>
 8009422:	2b03      	cmp	r3, #3
 8009424:	d016      	beq.n	8009454 <USBD_StdEPReq+0x150>
 8009426:	e04b      	b.n	80094c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00d      	beq.n	800944a <USBD_StdEPReq+0x146>
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b80      	cmp	r3, #128	@ 0x80
 8009432:	d00a      	beq.n	800944a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f957 	bl	800a6ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800943e:	2180      	movs	r1, #128	@ 0x80
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 f953 	bl	800a6ec <USBD_LL_StallEP>
 8009446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009448:	e040      	b.n	80094cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc3e 	bl	8009cce <USBD_CtlError>
              break;
 8009452:	e03b      	b.n	80094cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	885b      	ldrh	r3, [r3, #2]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d136      	bne.n	80094ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009462:	2b00      	cmp	r3, #0
 8009464:	d004      	beq.n	8009470 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 f95d 	bl	800a72a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fd03 	bl	8009e7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff fde4 	bl	8009048 <USBD_CoreFindEP>
 8009480:	4603      	mov	r3, r0
 8009482:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009484:	7b7b      	ldrb	r3, [r7, #13]
 8009486:	2bff      	cmp	r3, #255	@ 0xff
 8009488:	d01f      	beq.n	80094ca <USBD_StdEPReq+0x1c6>
 800948a:	7b7b      	ldrb	r3, [r7, #13]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11c      	bne.n	80094ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009490:	7b7a      	ldrb	r2, [r7, #13]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009498:	7b7a      	ldrb	r2, [r7, #13]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32ae      	adds	r2, #174	@ 0xae
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d010      	beq.n	80094ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094a8:	7b7a      	ldrb	r2, [r7, #13]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32ae      	adds	r2, #174	@ 0xae
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094be:	e004      	b.n	80094ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fc03 	bl	8009cce <USBD_CtlError>
              break;
 80094c8:	e000      	b.n	80094cc <USBD_StdEPReq+0x1c8>
              break;
 80094ca:	bf00      	nop
          }
          break;
 80094cc:	e0ab      	b.n	8009626 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d002      	beq.n	80094e0 <USBD_StdEPReq+0x1dc>
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d032      	beq.n	8009544 <USBD_StdEPReq+0x240>
 80094de:	e097      	b.n	8009610 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <USBD_StdEPReq+0x1f2>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	@ 0x80
 80094ea:	d004      	beq.n	80094f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fbed 	bl	8009cce <USBD_CtlError>
                break;
 80094f4:	e091      	b.n	800961a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da0b      	bge.n	8009516 <USBD_StdEPReq+0x212>
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	3310      	adds	r3, #16
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	4413      	add	r3, r2
 8009512:	3304      	adds	r3, #4
 8009514:	e00b      	b.n	800952e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	3304      	adds	r3, #4
 800952e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2202      	movs	r2, #2
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fc43 	bl	8009dc8 <USBD_CtlSendData>
              break;
 8009542:	e06a      	b.n	800961a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009548:	2b00      	cmp	r3, #0
 800954a:	da11      	bge.n	8009570 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	f003 020f 	and.w	r2, r3, #15
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	440b      	add	r3, r1
 800955e:	3324      	adds	r3, #36	@ 0x24
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d117      	bne.n	8009596 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fbb0 	bl	8009cce <USBD_CtlError>
                  break;
 800956e:	e054      	b.n	800961a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	f003 020f 	and.w	r2, r3, #15
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fb9d 	bl	8009cce <USBD_CtlError>
                  break;
 8009594:	e041      	b.n	800961a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800959a:	2b00      	cmp	r3, #0
 800959c:	da0b      	bge.n	80095b6 <USBD_StdEPReq+0x2b2>
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	3310      	adds	r3, #16
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	4413      	add	r3, r2
 80095b2:	3304      	adds	r3, #4
 80095b4:	e00b      	b.n	80095ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	4413      	add	r3, r2
 80095cc:	3304      	adds	r3, #4
 80095ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <USBD_StdEPReq+0x2d8>
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b80      	cmp	r3, #128	@ 0x80
 80095da:	d103      	bne.n	80095e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	e00e      	b.n	8009602 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f8bd 	bl	800a768 <USBD_LL_IsStallEP>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2201      	movs	r2, #1
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	e002      	b.n	8009602 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2202      	movs	r2, #2
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fbdd 	bl	8009dc8 <USBD_CtlSendData>
              break;
 800960e:	e004      	b.n	800961a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fb5b 	bl	8009cce <USBD_CtlError>
              break;
 8009618:	bf00      	nop
          }
          break;
 800961a:	e004      	b.n	8009626 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fb55 	bl	8009cce <USBD_CtlError>
          break;
 8009624:	bf00      	nop
      }
      break;
 8009626:	e005      	b.n	8009634 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb4f 	bl	8009cce <USBD_CtlError>
      break;
 8009630:	e000      	b.n	8009634 <USBD_StdEPReq+0x330>
      break;
 8009632:	bf00      	nop
  }

  return ret;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	885b      	ldrh	r3, [r3, #2]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	b29b      	uxth	r3, r3
 800965e:	3b01      	subs	r3, #1
 8009660:	2b06      	cmp	r3, #6
 8009662:	f200 8128 	bhi.w	80098b6 <USBD_GetDescriptor+0x276>
 8009666:	a201      	add	r2, pc, #4	@ (adr r2, 800966c <USBD_GetDescriptor+0x2c>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	08009689 	.word	0x08009689
 8009670:	080096a1 	.word	0x080096a1
 8009674:	080096e1 	.word	0x080096e1
 8009678:	080098b7 	.word	0x080098b7
 800967c:	080098b7 	.word	0x080098b7
 8009680:	08009857 	.word	0x08009857
 8009684:	08009883 	.word	0x08009883
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	7c12      	ldrb	r2, [r2, #16]
 8009694:	f107 0108 	add.w	r1, r7, #8
 8009698:	4610      	mov	r0, r2
 800969a:	4798      	blx	r3
 800969c:	60f8      	str	r0, [r7, #12]
      break;
 800969e:	e112      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	7c1b      	ldrb	r3, [r3, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10d      	bne.n	80096c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b0:	f107 0208 	add.w	r2, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3301      	adds	r3, #1
 80096be:	2202      	movs	r2, #2
 80096c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096c2:	e100      	b.n	80098c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096cc:	f107 0208 	add.w	r2, r7, #8
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	2202      	movs	r2, #2
 80096dc:	701a      	strb	r2, [r3, #0]
      break;
 80096de:	e0f2      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	885b      	ldrh	r3, [r3, #2]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b05      	cmp	r3, #5
 80096e8:	f200 80ac 	bhi.w	8009844 <USBD_GetDescriptor+0x204>
 80096ec:	a201      	add	r2, pc, #4	@ (adr r2, 80096f4 <USBD_GetDescriptor+0xb4>)
 80096ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f2:	bf00      	nop
 80096f4:	0800970d 	.word	0x0800970d
 80096f8:	08009741 	.word	0x08009741
 80096fc:	08009775 	.word	0x08009775
 8009700:	080097a9 	.word	0x080097a9
 8009704:	080097dd 	.word	0x080097dd
 8009708:	08009811 	.word	0x08009811
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e091      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 facb 	bl	8009cce <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e089      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	7c12      	ldrb	r2, [r2, #16]
 8009758:	f107 0108 	add.w	r1, r7, #8
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009762:	e077      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fab1 	bl	8009cce <USBD_CtlError>
            err++;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	3301      	adds	r3, #1
 8009770:	72fb      	strb	r3, [r7, #11]
          break;
 8009772:	e06f      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009796:	e05d      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa97 	bl	8009cce <USBD_CtlError>
            err++;
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	3301      	adds	r3, #1
 80097a4:	72fb      	strb	r3, [r7, #11]
          break;
 80097a6:	e055      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	7c12      	ldrb	r2, [r2, #16]
 80097c0:	f107 0108 	add.w	r1, r7, #8
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
 80097c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ca:	e043      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fa7d 	bl	8009cce <USBD_CtlError>
            err++;
 80097d4:	7afb      	ldrb	r3, [r7, #11]
 80097d6:	3301      	adds	r3, #1
 80097d8:	72fb      	strb	r3, [r7, #11]
          break;
 80097da:	e03b      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7c12      	ldrb	r2, [r2, #16]
 80097f4:	f107 0108 	add.w	r1, r7, #8
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
 80097fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097fe:	e029      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa63 	bl	8009cce <USBD_CtlError>
            err++;
 8009808:	7afb      	ldrb	r3, [r7, #11]
 800980a:	3301      	adds	r3, #1
 800980c:	72fb      	strb	r3, [r7, #11]
          break;
 800980e:	e021      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	7c12      	ldrb	r2, [r2, #16]
 8009828:	f107 0108 	add.w	r1, r7, #8
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
 8009830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009832:	e00f      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa49 	bl	8009cce <USBD_CtlError>
            err++;
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	3301      	adds	r3, #1
 8009840:	72fb      	strb	r3, [r7, #11]
          break;
 8009842:	e007      	b.n	8009854 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa41 	bl	8009cce <USBD_CtlError>
          err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009852:	bf00      	nop
      }
      break;
 8009854:	e037      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7c1b      	ldrb	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009866:	f107 0208 	add.w	r2, r7, #8
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3
 800986e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009870:	e029      	b.n	80098c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa2a 	bl	8009cce <USBD_CtlError>
        err++;
 800987a:	7afb      	ldrb	r3, [r7, #11]
 800987c:	3301      	adds	r3, #1
 800987e:	72fb      	strb	r3, [r7, #11]
      break;
 8009880:	e021      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7c1b      	ldrb	r3, [r3, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10d      	bne.n	80098a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009892:	f107 0208 	add.w	r2, r7, #8
 8009896:	4610      	mov	r0, r2
 8009898:	4798      	blx	r3
 800989a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3301      	adds	r3, #1
 80098a0:	2207      	movs	r2, #7
 80098a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098a4:	e00f      	b.n	80098c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fa10 	bl	8009cce <USBD_CtlError>
        err++;
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	3301      	adds	r3, #1
 80098b2:	72fb      	strb	r3, [r7, #11]
      break;
 80098b4:	e007      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa08 	bl	8009cce <USBD_CtlError>
      err++;
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	3301      	adds	r3, #1
 80098c2:	72fb      	strb	r3, [r7, #11]
      break;
 80098c4:	bf00      	nop
  }

  if (err != 0U)
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11e      	bne.n	800990a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	88db      	ldrh	r3, [r3, #6]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d016      	beq.n	8009902 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098d4:	893b      	ldrh	r3, [r7, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00e      	beq.n	80098f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	88da      	ldrh	r2, [r3, #6]
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	bf28      	it	cs
 80098e4:	4613      	movcs	r3, r2
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098ea:	893b      	ldrh	r3, [r7, #8]
 80098ec:	461a      	mov	r2, r3
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fa69 	bl	8009dc8 <USBD_CtlSendData>
 80098f6:	e009      	b.n	800990c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f9e7 	bl	8009cce <USBD_CtlError>
 8009900:	e004      	b.n	800990c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 faba 	bl	8009e7c <USBD_CtlSendStatus>
 8009908:	e000      	b.n	800990c <USBD_GetDescriptor+0x2cc>
    return;
 800990a:	bf00      	nop
  }
}
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop

08009914 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	889b      	ldrh	r3, [r3, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d131      	bne.n	800998a <USBD_SetAddress+0x76>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	88db      	ldrh	r3, [r3, #6]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d12d      	bne.n	800998a <USBD_SetAddress+0x76>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	885b      	ldrh	r3, [r3, #2]
 8009932:	2b7f      	cmp	r3, #127	@ 0x7f
 8009934:	d829      	bhi.n	800998a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009940:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b03      	cmp	r3, #3
 800994c:	d104      	bne.n	8009958 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f9bc 	bl	8009cce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009956:	e01d      	b.n	8009994 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7bfa      	ldrb	r2, [r7, #15]
 800995c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 ff2b 	bl	800a7c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa86 	bl	8009e7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d004      	beq.n	8009980 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997e:	e009      	b.n	8009994 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009988:	e004      	b.n	8009994 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f99e 	bl	8009cce <USBD_CtlError>
  }
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	885b      	ldrh	r3, [r3, #2]
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	4b4e      	ldr	r3, [pc, #312]	@ (8009aec <USBD_SetConfig+0x150>)
 80099b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099b4:	4b4d      	ldr	r3, [pc, #308]	@ (8009aec <USBD_SetConfig+0x150>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d905      	bls.n	80099c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f985 	bl	8009cce <USBD_CtlError>
    return USBD_FAIL;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e08c      	b.n	8009ae2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d002      	beq.n	80099da <USBD_SetConfig+0x3e>
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d029      	beq.n	8009a2c <USBD_SetConfig+0x90>
 80099d8:	e075      	b.n	8009ac6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099da:	4b44      	ldr	r3, [pc, #272]	@ (8009aec <USBD_SetConfig+0x150>)
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d020      	beq.n	8009a24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099e2:	4b42      	ldr	r3, [pc, #264]	@ (8009aec <USBD_SetConfig+0x150>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099ec:	4b3f      	ldr	r3, [pc, #252]	@ (8009aec <USBD_SetConfig+0x150>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7fe ffe3 	bl	80089be <USBD_SetClassConfig>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d008      	beq.n	8009a14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f962 	bl	8009cce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a12:	e065      	b.n	8009ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa31 	bl	8009e7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a22:	e05d      	b.n	8009ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fa29 	bl	8009e7c <USBD_CtlSendStatus>
      break;
 8009a2a:	e059      	b.n	8009ae0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8009aec <USBD_SetConfig+0x150>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d112      	bne.n	8009a5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8009aec <USBD_SetConfig+0x150>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a46:	4b29      	ldr	r3, [pc, #164]	@ (8009aec <USBD_SetConfig+0x150>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7fe ffd2 	bl	80089f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fa12 	bl	8009e7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a58:	e042      	b.n	8009ae0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a5a:	4b24      	ldr	r3, [pc, #144]	@ (8009aec <USBD_SetConfig+0x150>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d02a      	beq.n	8009abe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fe ffc0 	bl	80089f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a76:	4b1d      	ldr	r3, [pc, #116]	@ (8009aec <USBD_SetConfig+0x150>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a80:	4b1a      	ldr	r3, [pc, #104]	@ (8009aec <USBD_SetConfig+0x150>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fe ff99 	bl	80089be <USBD_SetClassConfig>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00f      	beq.n	8009ab6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f918 	bl	8009cce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7fe ffa5 	bl	80089f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ab4:	e014      	b.n	8009ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9e0 	bl	8009e7c <USBD_CtlSendStatus>
      break;
 8009abc:	e010      	b.n	8009ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f9dc 	bl	8009e7c <USBD_CtlSendStatus>
      break;
 8009ac4:	e00c      	b.n	8009ae0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f900 	bl	8009cce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ace:	4b07      	ldr	r3, [pc, #28]	@ (8009aec <USBD_SetConfig+0x150>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7fe ff8e 	bl	80089f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ada:	2303      	movs	r3, #3
 8009adc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ade:	bf00      	nop
  }

  return ret;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000588 	.word	0x20000588

08009af0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	88db      	ldrh	r3, [r3, #6]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d004      	beq.n	8009b0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f8e2 	bl	8009cce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b0a:	e023      	b.n	8009b54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	dc02      	bgt.n	8009b1e <USBD_GetConfig+0x2e>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dc03      	bgt.n	8009b24 <USBD_GetConfig+0x34>
 8009b1c:	e015      	b.n	8009b4a <USBD_GetConfig+0x5a>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d00b      	beq.n	8009b3a <USBD_GetConfig+0x4a>
 8009b22:	e012      	b.n	8009b4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f948 	bl	8009dc8 <USBD_CtlSendData>
        break;
 8009b38:	e00c      	b.n	8009b54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f940 	bl	8009dc8 <USBD_CtlSendData>
        break;
 8009b48:	e004      	b.n	8009b54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f8be 	bl	8009cce <USBD_CtlError>
        break;
 8009b52:	bf00      	nop
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d81e      	bhi.n	8009bb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	88db      	ldrh	r3, [r3, #6]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d004      	beq.n	8009b86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f8a5 	bl	8009cce <USBD_CtlError>
        break;
 8009b84:	e01a      	b.n	8009bbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f043 0202 	orr.w	r2, r3, #2
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	330c      	adds	r3, #12
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f90c 	bl	8009dc8 <USBD_CtlSendData>
      break;
 8009bb0:	e004      	b.n	8009bbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f88a 	bl	8009cce <USBD_CtlError>
      break;
 8009bba:	bf00      	nop
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	885b      	ldrh	r3, [r3, #2]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d107      	bne.n	8009be6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f94c 	bl	8009e7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009be4:	e013      	b.n	8009c0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	885b      	ldrh	r3, [r3, #2]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d10b      	bne.n	8009c06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	889b      	ldrh	r3, [r3, #4]
 8009bf2:	0a1b      	lsrs	r3, r3, #8
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f93c 	bl	8009e7c <USBD_CtlSendStatus>
}
 8009c04:	e003      	b.n	8009c0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f860 	bl	8009cce <USBD_CtlError>
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d80b      	bhi.n	8009c46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d10c      	bne.n	8009c50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f91c 	bl	8009e7c <USBD_CtlSendStatus>
      }
      break;
 8009c44:	e004      	b.n	8009c50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f840 	bl	8009cce <USBD_CtlError>
      break;
 8009c4e:	e000      	b.n	8009c52 <USBD_ClrFeature+0x3c>
      break;
 8009c50:	bf00      	nop
  }
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff fa40 	bl	800910a <SWAPBYTE>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3301      	adds	r3, #1
 8009c96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f7ff fa33 	bl	800910a <SWAPBYTE>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff fa26 	bl	800910a <SWAPBYTE>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	80da      	strh	r2, [r3, #6]
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cd8:	2180      	movs	r1, #128	@ 0x80
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fd06 	bl	800a6ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fd02 	bl	800a6ec <USBD_LL_StallEP>
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d042      	beq.n	8009d8c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d0a:	6938      	ldr	r0, [r7, #16]
 8009d0c:	f000 f842 	bl	8009d94 <USBD_GetLen>
 8009d10:	4603      	mov	r3, r0
 8009d12:	3301      	adds	r3, #1
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d1a:	d808      	bhi.n	8009d2e <USBD_GetString+0x3e>
 8009d1c:	6938      	ldr	r0, [r7, #16]
 8009d1e:	f000 f839 	bl	8009d94 <USBD_GetLen>
 8009d22:	4603      	mov	r3, r0
 8009d24:	3301      	adds	r3, #1
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	e001      	b.n	8009d32 <USBD_GetString+0x42>
 8009d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	7812      	ldrb	r2, [r2, #0]
 8009d40:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	3301      	adds	r3, #1
 8009d46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	2203      	movs	r2, #3
 8009d50:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	3301      	adds	r3, #1
 8009d56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d58:	e013      	b.n	8009d82 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	4413      	add	r3, r2
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	7812      	ldrb	r2, [r2, #0]
 8009d64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]
    idx++;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	4413      	add	r3, r2
 8009d78:	2200      	movs	r2, #0
 8009d7a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e7      	bne.n	8009d5a <USBD_GetString+0x6a>
 8009d8a:	e000      	b.n	8009d8e <USBD_GetString+0x9e>
    return;
 8009d8c:	bf00      	nop
  }
}
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009da4:	e005      	b.n	8009db2 <USBD_GetLen+0x1e>
  {
    len++;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	3301      	adds	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1f5      	bne.n	8009da6 <USBD_GetLen+0x12>
  }

  return len;
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	2100      	movs	r1, #0
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 fd05 	bl	800a7fe <USBD_LL_Transmit>

  return USBD_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	2100      	movs	r1, #0
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 fcf4 	bl	800a7fe <USBD_LL_Transmit>

  return USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2203      	movs	r2, #3
 8009e30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 fcf8 	bl	800a840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fce7 	bl	800a840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2204      	movs	r2, #4
 8009e88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2100      	movs	r1, #0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fcb3 	bl	800a7fe <USBD_LL_Transmit>

  return USBD_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2205      	movs	r2, #5
 8009eae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fcc1 	bl	800a840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	4912      	ldr	r1, [pc, #72]	@ (8009f18 <MX_USB_DEVICE_Init+0x50>)
 8009ed0:	4812      	ldr	r0, [pc, #72]	@ (8009f1c <MX_USB_DEVICE_Init+0x54>)
 8009ed2:	f7fe fcf7 	bl	80088c4 <USBD_Init>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009edc:	f7f7 f94a 	bl	8001174 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ee0:	490f      	ldr	r1, [pc, #60]	@ (8009f20 <MX_USB_DEVICE_Init+0x58>)
 8009ee2:	480e      	ldr	r0, [pc, #56]	@ (8009f1c <MX_USB_DEVICE_Init+0x54>)
 8009ee4:	f7fe fd1e 	bl	8008924 <USBD_RegisterClass>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009eee:	f7f7 f941 	bl	8001174 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009ef2:	490c      	ldr	r1, [pc, #48]	@ (8009f24 <MX_USB_DEVICE_Init+0x5c>)
 8009ef4:	4809      	ldr	r0, [pc, #36]	@ (8009f1c <MX_USB_DEVICE_Init+0x54>)
 8009ef6:	f7fe fc15 	bl	8008724 <USBD_CDC_RegisterInterface>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f00:	f7f7 f938 	bl	8001174 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f04:	4805      	ldr	r0, [pc, #20]	@ (8009f1c <MX_USB_DEVICE_Init+0x54>)
 8009f06:	f7fe fd43 	bl	8008990 <USBD_Start>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f10:	f7f7 f930 	bl	8001174 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f14:	bf00      	nop
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	200000b0 	.word	0x200000b0
 8009f1c:	2000058c 	.word	0x2000058c
 8009f20:	2000001c 	.word	0x2000001c
 8009f24:	2000009c 	.word	0x2000009c

08009f28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4905      	ldr	r1, [pc, #20]	@ (8009f44 <CDC_Init_FS+0x1c>)
 8009f30:	4805      	ldr	r0, [pc, #20]	@ (8009f48 <CDC_Init_FS+0x20>)
 8009f32:	f7fe fc11 	bl	8008758 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f36:	4905      	ldr	r1, [pc, #20]	@ (8009f4c <CDC_Init_FS+0x24>)
 8009f38:	4803      	ldr	r0, [pc, #12]	@ (8009f48 <CDC_Init_FS+0x20>)
 8009f3a:	f7fe fc2f 	bl	800879c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20001068 	.word	0x20001068
 8009f48:	2000058c 	.word	0x2000058c
 8009f4c:	20000868 	.word	0x20000868

08009f50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	6039      	str	r1, [r7, #0]
 8009f6a:	71fb      	strb	r3, [r7, #7]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	2b23      	cmp	r3, #35	@ 0x23
 8009f74:	d84a      	bhi.n	800a00c <CDC_Control_FS+0xac>
 8009f76:	a201      	add	r2, pc, #4	@ (adr r2, 8009f7c <CDC_Control_FS+0x1c>)
 8009f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7c:	0800a00d 	.word	0x0800a00d
 8009f80:	0800a00d 	.word	0x0800a00d
 8009f84:	0800a00d 	.word	0x0800a00d
 8009f88:	0800a00d 	.word	0x0800a00d
 8009f8c:	0800a00d 	.word	0x0800a00d
 8009f90:	0800a00d 	.word	0x0800a00d
 8009f94:	0800a00d 	.word	0x0800a00d
 8009f98:	0800a00d 	.word	0x0800a00d
 8009f9c:	0800a00d 	.word	0x0800a00d
 8009fa0:	0800a00d 	.word	0x0800a00d
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	0800a00d 	.word	0x0800a00d
 8009fac:	0800a00d 	.word	0x0800a00d
 8009fb0:	0800a00d 	.word	0x0800a00d
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	0800a00d 	.word	0x0800a00d
 8009fbc:	0800a00d 	.word	0x0800a00d
 8009fc0:	0800a00d 	.word	0x0800a00d
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	0800a00d 	.word	0x0800a00d
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a00d 	.word	0x0800a00d
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a00d 	.word	0x0800a00d
 8009fdc:	0800a00d 	.word	0x0800a00d
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	0800a00d 	.word	0x0800a00d
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a00d 	.word	0x0800a00d
 8009ff0:	0800a00d 	.word	0x0800a00d
 8009ff4:	0800a00d 	.word	0x0800a00d
 8009ff8:	0800a00d 	.word	0x0800a00d
 8009ffc:	0800a00d 	.word	0x0800a00d
 800a000:	0800a00d 	.word	0x0800a00d
 800a004:	0800a00d 	.word	0x0800a00d
 800a008:	0800a00d 	.word	0x0800a00d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a00c:	bf00      	nop
  }

  return (USBD_OK);
 800a00e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	480f      	ldr	r0, [pc, #60]	@ (800a068 <CDC_Receive_FS+0x4c>)
 800a02a:	f7fe fbb7 	bl	800879c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a02e:	480e      	ldr	r0, [pc, #56]	@ (800a068 <CDC_Receive_FS+0x4c>)
 800a030:	f7fe fc12 	bl	8008858 <USBD_CDC_ReceivePacket>
	memset (gelen_buf, '\0', 64);  // clear the buffer
 800a034:	2240      	movs	r2, #64	@ 0x40
 800a036:	2100      	movs	r1, #0
 800a038:	480c      	ldr	r0, [pc, #48]	@ (800a06c <CDC_Receive_FS+0x50>)
 800a03a:	f000 fe92 	bl	800ad62 <memset>
	uint8_t len= (uint8_t)*Len;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	73fb      	strb	r3, [r7, #15]
	memcpy(gelen_buf,Buf,len);
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	461a      	mov	r2, r3
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	4808      	ldr	r0, [pc, #32]	@ (800a06c <CDC_Receive_FS+0x50>)
 800a04c:	f000 ff05 	bl	800ae5a <memcpy>
   memset(Buf, '\0', len);   // clear the Buf also
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	461a      	mov	r2, r3
 800a054:	2100      	movs	r1, #0
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fe83 	bl	800ad62 <memset>
	return (USBD_OK);
 800a05c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	2000058c 	.word	0x2000058c
 800a06c:	20000178 	.word	0x20000178

0800a070 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a080:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <CDC_Transmit_FS+0x48>)
 800a082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a086:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a092:	2301      	movs	r3, #1
 800a094:	e00b      	b.n	800a0ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a096:	887b      	ldrh	r3, [r7, #2]
 800a098:	461a      	mov	r2, r3
 800a09a:	6879      	ldr	r1, [r7, #4]
 800a09c:	4806      	ldr	r0, [pc, #24]	@ (800a0b8 <CDC_Transmit_FS+0x48>)
 800a09e:	f7fe fb5b 	bl	8008758 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0a2:	4805      	ldr	r0, [pc, #20]	@ (800a0b8 <CDC_Transmit_FS+0x48>)
 800a0a4:	f7fe fb98 	bl	80087d8 <USBD_CDC_TransmitPacket>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	2000058c 	.word	0x2000058c

0800a0bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2212      	movs	r2, #18
 800a0f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0f2:	4b03      	ldr	r3, [pc, #12]	@ (800a100 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	200000cc 	.word	0x200000cc

0800a104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	6039      	str	r1, [r7, #0]
 800a10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2204      	movs	r2, #4
 800a114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a116:	4b03      	ldr	r3, [pc, #12]	@ (800a124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	200000e0 	.word	0x200000e0

0800a128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	6039      	str	r1, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4907      	ldr	r1, [pc, #28]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
 800a13e:	4808      	ldr	r0, [pc, #32]	@ (800a160 <USBD_FS_ProductStrDescriptor+0x38>)
 800a140:	f7ff fdd6 	bl	8009cf0 <USBD_GetString>
 800a144:	e004      	b.n	800a150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4904      	ldr	r1, [pc, #16]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
 800a14a:	4805      	ldr	r0, [pc, #20]	@ (800a160 <USBD_FS_ProductStrDescriptor+0x38>)
 800a14c:	f7ff fdd0 	bl	8009cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a150:	4b02      	ldr	r3, [pc, #8]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20001868 	.word	0x20001868
 800a160:	0800bef4 	.word	0x0800bef4

0800a164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	4904      	ldr	r1, [pc, #16]	@ (800a184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a174:	4804      	ldr	r0, [pc, #16]	@ (800a188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a176:	f7ff fdbb 	bl	8009cf0 <USBD_GetString>
  return USBD_StrDesc;
 800a17a:	4b02      	ldr	r3, [pc, #8]	@ (800a184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20001868 	.word	0x20001868
 800a188:	0800bf0c 	.word	0x0800bf0c

0800a18c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	221a      	movs	r2, #26
 800a19c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a19e:	f000 f843 	bl	800a228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1a2:	4b02      	ldr	r3, [pc, #8]	@ (800a1ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	200000e4 	.word	0x200000e4

0800a1b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d105      	bne.n	800a1ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4907      	ldr	r1, [pc, #28]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1c6:	4808      	ldr	r0, [pc, #32]	@ (800a1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1c8:	f7ff fd92 	bl	8009cf0 <USBD_GetString>
 800a1cc:	e004      	b.n	800a1d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	4904      	ldr	r1, [pc, #16]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1d2:	4805      	ldr	r0, [pc, #20]	@ (800a1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1d4:	f7ff fd8c 	bl	8009cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d8:	4b02      	ldr	r3, [pc, #8]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20001868 	.word	0x20001868
 800a1e8:	0800bf20 	.word	0x0800bf20

0800a1ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6039      	str	r1, [r7, #0]
 800a1f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d105      	bne.n	800a20a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	4907      	ldr	r1, [pc, #28]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a202:	4808      	ldr	r0, [pc, #32]	@ (800a224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a204:	f7ff fd74 	bl	8009cf0 <USBD_GetString>
 800a208:	e004      	b.n	800a214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4904      	ldr	r1, [pc, #16]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a20e:	4805      	ldr	r0, [pc, #20]	@ (800a224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a210:	f7ff fd6e 	bl	8009cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a214:	4b02      	ldr	r3, [pc, #8]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20001868 	.word	0x20001868
 800a224:	0800bf2c 	.word	0x0800bf2c

0800a228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <Get_SerialNum+0x44>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a234:	4b0e      	ldr	r3, [pc, #56]	@ (800a270 <Get_SerialNum+0x48>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a23a:	4b0e      	ldr	r3, [pc, #56]	@ (800a274 <Get_SerialNum+0x4c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4413      	add	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a24e:	2208      	movs	r2, #8
 800a250:	4909      	ldr	r1, [pc, #36]	@ (800a278 <Get_SerialNum+0x50>)
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f814 	bl	800a280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a258:	2204      	movs	r2, #4
 800a25a:	4908      	ldr	r1, [pc, #32]	@ (800a27c <Get_SerialNum+0x54>)
 800a25c:	68b8      	ldr	r0, [r7, #8]
 800a25e:	f000 f80f 	bl	800a280 <IntToUnicode>
  }
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	1fff7a10 	.word	0x1fff7a10
 800a270:	1fff7a14 	.word	0x1fff7a14
 800a274:	1fff7a18 	.word	0x1fff7a18
 800a278:	200000e6 	.word	0x200000e6
 800a27c:	200000f6 	.word	0x200000f6

0800a280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]
 800a296:	e027      	b.n	800a2e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	0f1b      	lsrs	r3, r3, #28
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	d80b      	bhi.n	800a2b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	0f1b      	lsrs	r3, r3, #28
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	440b      	add	r3, r1
 800a2b0:	3230      	adds	r2, #48	@ 0x30
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	e00a      	b.n	800a2ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	0f1b      	lsrs	r3, r3, #28
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3237      	adds	r2, #55	@ 0x37
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	011b      	lsls	r3, r3, #4
 800a2d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	3301      	adds	r3, #1
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	4413      	add	r3, r2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	75fb      	strb	r3, [r7, #23]
 800a2e8:	7dfa      	ldrb	r2, [r7, #23]
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d3d3      	bcc.n	800a298 <IntToUnicode+0x18>
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
	...

0800a300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	@ 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	609a      	str	r2, [r3, #8]
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a320:	d147      	bne.n	800a3b2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	4b25      	ldr	r3, [pc, #148]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a32a:	4a24      	ldr	r2, [pc, #144]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a32c:	f043 0301 	orr.w	r3, r3, #1
 800a330:	6313      	str	r3, [r2, #48]	@ 0x30
 800a332:	4b22      	ldr	r3, [pc, #136]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	613b      	str	r3, [r7, #16]
 800a33c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a33e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a344:	2300      	movs	r3, #0
 800a346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a34c:	f107 0314 	add.w	r3, r7, #20
 800a350:	4619      	mov	r1, r3
 800a352:	481b      	ldr	r0, [pc, #108]	@ (800a3c0 <HAL_PCD_MspInit+0xc0>)
 800a354:	f7f8 fa10 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a358:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a35c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a35e:	2302      	movs	r3, #2
 800a360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a366:	2303      	movs	r3, #3
 800a368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a36a:	230a      	movs	r3, #10
 800a36c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a36e:	f107 0314 	add.w	r3, r7, #20
 800a372:	4619      	mov	r1, r3
 800a374:	4812      	ldr	r0, [pc, #72]	@ (800a3c0 <HAL_PCD_MspInit+0xc0>)
 800a376:	f7f8 f9ff 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a37a:	4b10      	ldr	r3, [pc, #64]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a37c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a37e:	4a0f      	ldr	r2, [pc, #60]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a384:	6353      	str	r3, [r2, #52]	@ 0x34
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	4b0c      	ldr	r3, [pc, #48]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a38e:	4a0b      	ldr	r2, [pc, #44]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a394:	6453      	str	r3, [r2, #68]	@ 0x44
 800a396:	4b09      	ldr	r3, [pc, #36]	@ (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a39a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	2043      	movs	r0, #67	@ 0x43
 800a3a8:	f7f8 f91d 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3ac:	2043      	movs	r0, #67	@ 0x43
 800a3ae:	f7f8 f936 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3b2:	bf00      	nop
 800a3b4:	3728      	adds	r7, #40	@ 0x28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	40020000 	.word	0x40020000

0800a3c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe fb25 	bl	8008a2a <USBD_LL_SetupStage>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a3fa:	78fa      	ldrb	r2, [r7, #3]
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	4613      	mov	r3, r2
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	4413      	add	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	440b      	add	r3, r1
 800a408:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	4619      	mov	r1, r3
 800a412:	f7fe fb5f 	bl	8008ad4 <USBD_LL_DataOutStage>
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	4613      	mov	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	3320      	adds	r3, #32
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	4619      	mov	r1, r3
 800a446:	f7fe fbf8 	bl	8008c3a <USBD_LL_DataInStage>
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe fd32 	bl	8008eca <USBD_LL_SOF>
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a476:	2301      	movs	r3, #1
 800a478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	79db      	ldrb	r3, [r3, #7]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d001      	beq.n	800a486 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a482:	f7f6 fe77 	bl	8001174 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a48c:	7bfa      	ldrb	r2, [r7, #15]
 800a48e:	4611      	mov	r1, r2
 800a490:	4618      	mov	r0, r3
 800a492:	f7fe fcd6 	bl	8008e42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe fc7e 	bl	8008d9e <USBD_LL_Reset>
}
 800a4a2:	bf00      	nop
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe fcd1 	bl	8008e62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6812      	ldr	r2, [r2, #0]
 800a4ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7adb      	ldrb	r3, [r3, #11]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d005      	beq.n	800a4ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4e0:	4b04      	ldr	r3, [pc, #16]	@ (800a4f4 <HAL_PCD_SuspendCallback+0x48>)
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	4a03      	ldr	r2, [pc, #12]	@ (800a4f4 <HAL_PCD_SuspendCallback+0x48>)
 800a4e6:	f043 0306 	orr.w	r3, r3, #6
 800a4ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	e000ed00 	.word	0xe000ed00

0800a4f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fcc7 	bl	8008e9a <USBD_LL_Resume>
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a526:	78fa      	ldrb	r2, [r7, #3]
 800a528:	4611      	mov	r1, r2
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fd1f 	bl	8008f6e <USBD_LL_IsoOUTIncomplete>
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a54a:	78fa      	ldrb	r2, [r7, #3]
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fcdb 	bl	8008f0a <USBD_LL_IsoINIncomplete>
}
 800a554:	bf00      	nop
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fd31 	bl	8008fd2 <USBD_LL_DevConnected>
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fd2e 	bl	8008fe8 <USBD_LL_DevDisconnected>
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d13c      	bne.n	800a61e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a5a4:	4a20      	ldr	r2, [pc, #128]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a1e      	ldr	r2, [pc, #120]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a5ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a5bc:	4b1a      	ldr	r3, [pc, #104]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5be:	2204      	movs	r2, #4
 800a5c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a5c2:	4b19      	ldr	r3, [pc, #100]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a5c8:	4b17      	ldr	r3, [pc, #92]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a5ce:	4b16      	ldr	r3, [pc, #88]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a5d4:	4b14      	ldr	r3, [pc, #80]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a5da:	4b13      	ldr	r3, [pc, #76]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a5e0:	4b11      	ldr	r3, [pc, #68]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a5e6:	4b10      	ldr	r3, [pc, #64]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a5ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a5f2:	480d      	ldr	r0, [pc, #52]	@ (800a628 <USBD_LL_Init+0x94>)
 800a5f4:	f7f8 ff0b 	bl	800340e <HAL_PCD_Init>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a5fe:	f7f6 fdb9 	bl	8001174 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a602:	2180      	movs	r1, #128	@ 0x80
 800a604:	4808      	ldr	r0, [pc, #32]	@ (800a628 <USBD_LL_Init+0x94>)
 800a606:	f7fa f938 	bl	800487a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a60a:	2240      	movs	r2, #64	@ 0x40
 800a60c:	2100      	movs	r1, #0
 800a60e:	4806      	ldr	r0, [pc, #24]	@ (800a628 <USBD_LL_Init+0x94>)
 800a610:	f7fa f8ec 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a614:	2280      	movs	r2, #128	@ 0x80
 800a616:	2101      	movs	r1, #1
 800a618:	4803      	ldr	r0, [pc, #12]	@ (800a628 <USBD_LL_Init+0x94>)
 800a61a:	f7fa f8e7 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20001a68 	.word	0x20001a68

0800a62c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a642:	4618      	mov	r0, r3
 800a644:	f7f8 fff2 	bl	800362c <HAL_PCD_Start>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f942 	bl	800a8d8 <USBD_Get_USB_Status>
 800a654:	4603      	mov	r3, r0
 800a656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a658:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	4608      	mov	r0, r1
 800a66c:	4611      	mov	r1, r2
 800a66e:	461a      	mov	r2, r3
 800a670:	4603      	mov	r3, r0
 800a672:	70fb      	strb	r3, [r7, #3]
 800a674:	460b      	mov	r3, r1
 800a676:	70bb      	strb	r3, [r7, #2]
 800a678:	4613      	mov	r3, r2
 800a67a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a68a:	78bb      	ldrb	r3, [r7, #2]
 800a68c:	883a      	ldrh	r2, [r7, #0]
 800a68e:	78f9      	ldrb	r1, [r7, #3]
 800a690:	f7f9 fcc6 	bl	8004020 <HAL_PCD_EP_Open>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 f91c 	bl	800a8d8 <USBD_Get_USB_Status>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6c8:	78fa      	ldrb	r2, [r7, #3]
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7f9 fd11 	bl	80040f4 <HAL_PCD_EP_Close>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 f8fd 	bl	800a8d8 <USBD_Get_USB_Status>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a706:	78fa      	ldrb	r2, [r7, #3]
 800a708:	4611      	mov	r1, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7f9 fdc9 	bl	80042a2 <HAL_PCD_EP_SetStall>
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	4618      	mov	r0, r3
 800a718:	f000 f8de 	bl	800a8d8 <USBD_Get_USB_Status>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a720:	7bbb      	ldrb	r3, [r7, #14]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	460b      	mov	r3, r1
 800a734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a744:	78fa      	ldrb	r2, [r7, #3]
 800a746:	4611      	mov	r1, r2
 800a748:	4618      	mov	r0, r3
 800a74a:	f7f9 fe0d 	bl	8004368 <HAL_PCD_EP_ClrStall>
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	4618      	mov	r0, r3
 800a756:	f000 f8bf 	bl	800a8d8 <USBD_Get_USB_Status>
 800a75a:	4603      	mov	r3, r0
 800a75c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a77a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a77c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a780:	2b00      	cmp	r3, #0
 800a782:	da0b      	bge.n	800a79c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a784:	78fb      	ldrb	r3, [r7, #3]
 800a786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a78a:	68f9      	ldr	r1, [r7, #12]
 800a78c:	4613      	mov	r3, r2
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	3316      	adds	r3, #22
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	e00b      	b.n	800a7b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	440b      	add	r3, r1
 800a7ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a7b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7da:	78fa      	ldrb	r2, [r7, #3]
 800a7dc:	4611      	mov	r1, r2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7f9 fbfa 	bl	8003fd8 <HAL_PCD_SetAddress>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f874 	bl	800a8d8 <USBD_Get_USB_Status>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	603b      	str	r3, [r7, #0]
 800a80a:	460b      	mov	r3, r1
 800a80c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a81c:	7af9      	ldrb	r1, [r7, #11]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	f7f9 fd04 	bl	800422e <HAL_PCD_EP_Transmit>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 f853 	bl	800a8d8 <USBD_Get_USB_Status>
 800a832:	4603      	mov	r3, r0
 800a834:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a836:	7dbb      	ldrb	r3, [r7, #22]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	460b      	mov	r3, r1
 800a84e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a85e:	7af9      	ldrb	r1, [r7, #11]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	f7f9 fc90 	bl	8004188 <HAL_PCD_EP_Receive>
 800a868:	4603      	mov	r3, r0
 800a86a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 f832 	bl	800a8d8 <USBD_Get_USB_Status>
 800a874:	4603      	mov	r3, r0
 800a876:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a878:	7dbb      	ldrb	r3, [r7, #22]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a894:	78fa      	ldrb	r2, [r7, #3]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7f9 fcb0 	bl	80041fe <HAL_PCD_EP_GetRxCount>
 800a89e:	4603      	mov	r3, r0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8b0:	4b03      	ldr	r3, [pc, #12]	@ (800a8c0 <USBD_static_malloc+0x18>)
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	20001f4c 	.word	0x20001f4c

0800a8c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]

}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d817      	bhi.n	800a91c <USBD_Get_USB_Status+0x44>
 800a8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f4 <USBD_Get_USB_Status+0x1c>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a905 	.word	0x0800a905
 800a8f8:	0800a90b 	.word	0x0800a90b
 800a8fc:	0800a911 	.word	0x0800a911
 800a900:	0800a917 	.word	0x0800a917
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
    break;
 800a908:	e00b      	b.n	800a922 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a90a:	2303      	movs	r3, #3
 800a90c:	73fb      	strb	r3, [r7, #15]
    break;
 800a90e:	e008      	b.n	800a922 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a910:	2301      	movs	r3, #1
 800a912:	73fb      	strb	r3, [r7, #15]
    break;
 800a914:	e005      	b.n	800a922 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a916:	2303      	movs	r3, #3
 800a918:	73fb      	strb	r3, [r7, #15]
    break;
 800a91a:	e002      	b.n	800a922 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a91c:	2303      	movs	r3, #3
 800a91e:	73fb      	strb	r3, [r7, #15]
    break;
 800a920:	bf00      	nop
  }
  return usb_status;
 800a922:	7bfb      	ldrb	r3, [r7, #15]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <atoi>:
 800a930:	220a      	movs	r2, #10
 800a932:	2100      	movs	r1, #0
 800a934:	f000 b8e6 	b.w	800ab04 <strtol>

0800a938 <srand>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4b10      	ldr	r3, [pc, #64]	@ (800a97c <srand+0x44>)
 800a93c:	681d      	ldr	r5, [r3, #0]
 800a93e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a940:	4604      	mov	r4, r0
 800a942:	b9b3      	cbnz	r3, 800a972 <srand+0x3a>
 800a944:	2018      	movs	r0, #24
 800a946:	f000 faff 	bl	800af48 <malloc>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6328      	str	r0, [r5, #48]	@ 0x30
 800a94e:	b920      	cbnz	r0, 800a95a <srand+0x22>
 800a950:	4b0b      	ldr	r3, [pc, #44]	@ (800a980 <srand+0x48>)
 800a952:	480c      	ldr	r0, [pc, #48]	@ (800a984 <srand+0x4c>)
 800a954:	2146      	movs	r1, #70	@ 0x46
 800a956:	f000 fa8f 	bl	800ae78 <__assert_func>
 800a95a:	490b      	ldr	r1, [pc, #44]	@ (800a988 <srand+0x50>)
 800a95c:	4b0b      	ldr	r3, [pc, #44]	@ (800a98c <srand+0x54>)
 800a95e:	e9c0 1300 	strd	r1, r3, [r0]
 800a962:	4b0b      	ldr	r3, [pc, #44]	@ (800a990 <srand+0x58>)
 800a964:	6083      	str	r3, [r0, #8]
 800a966:	230b      	movs	r3, #11
 800a968:	8183      	strh	r3, [r0, #12]
 800a96a:	2100      	movs	r1, #0
 800a96c:	2001      	movs	r0, #1
 800a96e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a972:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a974:	2200      	movs	r2, #0
 800a976:	611c      	str	r4, [r3, #16]
 800a978:	615a      	str	r2, [r3, #20]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	2000010c 	.word	0x2000010c
 800a980:	0800ccc8 	.word	0x0800ccc8
 800a984:	0800ccdf 	.word	0x0800ccdf
 800a988:	abcd330e 	.word	0xabcd330e
 800a98c:	e66d1234 	.word	0xe66d1234
 800a990:	0005deec 	.word	0x0005deec

0800a994 <rand>:
 800a994:	4b16      	ldr	r3, [pc, #88]	@ (800a9f0 <rand+0x5c>)
 800a996:	b510      	push	{r4, lr}
 800a998:	681c      	ldr	r4, [r3, #0]
 800a99a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a99c:	b9b3      	cbnz	r3, 800a9cc <rand+0x38>
 800a99e:	2018      	movs	r0, #24
 800a9a0:	f000 fad2 	bl	800af48 <malloc>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	6320      	str	r0, [r4, #48]	@ 0x30
 800a9a8:	b920      	cbnz	r0, 800a9b4 <rand+0x20>
 800a9aa:	4b12      	ldr	r3, [pc, #72]	@ (800a9f4 <rand+0x60>)
 800a9ac:	4812      	ldr	r0, [pc, #72]	@ (800a9f8 <rand+0x64>)
 800a9ae:	2152      	movs	r1, #82	@ 0x52
 800a9b0:	f000 fa62 	bl	800ae78 <__assert_func>
 800a9b4:	4911      	ldr	r1, [pc, #68]	@ (800a9fc <rand+0x68>)
 800a9b6:	4b12      	ldr	r3, [pc, #72]	@ (800aa00 <rand+0x6c>)
 800a9b8:	e9c0 1300 	strd	r1, r3, [r0]
 800a9bc:	4b11      	ldr	r3, [pc, #68]	@ (800aa04 <rand+0x70>)
 800a9be:	6083      	str	r3, [r0, #8]
 800a9c0:	230b      	movs	r3, #11
 800a9c2:	8183      	strh	r3, [r0, #12]
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a9cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a9ce:	480e      	ldr	r0, [pc, #56]	@ (800aa08 <rand+0x74>)
 800a9d0:	690b      	ldr	r3, [r1, #16]
 800a9d2:	694c      	ldr	r4, [r1, #20]
 800a9d4:	4a0d      	ldr	r2, [pc, #52]	@ (800aa0c <rand+0x78>)
 800a9d6:	4358      	muls	r0, r3
 800a9d8:	fb02 0004 	mla	r0, r2, r4, r0
 800a9dc:	fba3 3202 	umull	r3, r2, r3, r2
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	eb40 0002 	adc.w	r0, r0, r2
 800a9e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a9ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a9ee:	bd10      	pop	{r4, pc}
 800a9f0:	2000010c 	.word	0x2000010c
 800a9f4:	0800ccc8 	.word	0x0800ccc8
 800a9f8:	0800ccdf 	.word	0x0800ccdf
 800a9fc:	abcd330e 	.word	0xabcd330e
 800aa00:	e66d1234 	.word	0xe66d1234
 800aa04:	0005deec 	.word	0x0005deec
 800aa08:	5851f42d 	.word	0x5851f42d
 800aa0c:	4c957f2d 	.word	0x4c957f2d

0800aa10 <_strtol_l.constprop.0>:
 800aa10:	2b24      	cmp	r3, #36	@ 0x24
 800aa12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa16:	4686      	mov	lr, r0
 800aa18:	4690      	mov	r8, r2
 800aa1a:	d801      	bhi.n	800aa20 <_strtol_l.constprop.0+0x10>
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d106      	bne.n	800aa2e <_strtol_l.constprop.0+0x1e>
 800aa20:	f000 f9ee 	bl	800ae00 <__errno>
 800aa24:	2316      	movs	r3, #22
 800aa26:	6003      	str	r3, [r0, #0]
 800aa28:	2000      	movs	r0, #0
 800aa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2e:	4834      	ldr	r0, [pc, #208]	@ (800ab00 <_strtol_l.constprop.0+0xf0>)
 800aa30:	460d      	mov	r5, r1
 800aa32:	462a      	mov	r2, r5
 800aa34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa38:	5d06      	ldrb	r6, [r0, r4]
 800aa3a:	f016 0608 	ands.w	r6, r6, #8
 800aa3e:	d1f8      	bne.n	800aa32 <_strtol_l.constprop.0+0x22>
 800aa40:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa42:	d12d      	bne.n	800aaa0 <_strtol_l.constprop.0+0x90>
 800aa44:	782c      	ldrb	r4, [r5, #0]
 800aa46:	2601      	movs	r6, #1
 800aa48:	1c95      	adds	r5, r2, #2
 800aa4a:	f033 0210 	bics.w	r2, r3, #16
 800aa4e:	d109      	bne.n	800aa64 <_strtol_l.constprop.0+0x54>
 800aa50:	2c30      	cmp	r4, #48	@ 0x30
 800aa52:	d12a      	bne.n	800aaaa <_strtol_l.constprop.0+0x9a>
 800aa54:	782a      	ldrb	r2, [r5, #0]
 800aa56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa5a:	2a58      	cmp	r2, #88	@ 0x58
 800aa5c:	d125      	bne.n	800aaaa <_strtol_l.constprop.0+0x9a>
 800aa5e:	786c      	ldrb	r4, [r5, #1]
 800aa60:	2310      	movs	r3, #16
 800aa62:	3502      	adds	r5, #2
 800aa64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa68:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	fbbc f9f3 	udiv	r9, ip, r3
 800aa72:	4610      	mov	r0, r2
 800aa74:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa7c:	2f09      	cmp	r7, #9
 800aa7e:	d81b      	bhi.n	800aab8 <_strtol_l.constprop.0+0xa8>
 800aa80:	463c      	mov	r4, r7
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	dd27      	ble.n	800aad6 <_strtol_l.constprop.0+0xc6>
 800aa86:	1c57      	adds	r7, r2, #1
 800aa88:	d007      	beq.n	800aa9a <_strtol_l.constprop.0+0x8a>
 800aa8a:	4581      	cmp	r9, r0
 800aa8c:	d320      	bcc.n	800aad0 <_strtol_l.constprop.0+0xc0>
 800aa8e:	d101      	bne.n	800aa94 <_strtol_l.constprop.0+0x84>
 800aa90:	45a2      	cmp	sl, r4
 800aa92:	db1d      	blt.n	800aad0 <_strtol_l.constprop.0+0xc0>
 800aa94:	fb00 4003 	mla	r0, r0, r3, r4
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa9e:	e7eb      	b.n	800aa78 <_strtol_l.constprop.0+0x68>
 800aaa0:	2c2b      	cmp	r4, #43	@ 0x2b
 800aaa2:	bf04      	itt	eq
 800aaa4:	782c      	ldrbeq	r4, [r5, #0]
 800aaa6:	1c95      	addeq	r5, r2, #2
 800aaa8:	e7cf      	b.n	800aa4a <_strtol_l.constprop.0+0x3a>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1da      	bne.n	800aa64 <_strtol_l.constprop.0+0x54>
 800aaae:	2c30      	cmp	r4, #48	@ 0x30
 800aab0:	bf0c      	ite	eq
 800aab2:	2308      	moveq	r3, #8
 800aab4:	230a      	movne	r3, #10
 800aab6:	e7d5      	b.n	800aa64 <_strtol_l.constprop.0+0x54>
 800aab8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aabc:	2f19      	cmp	r7, #25
 800aabe:	d801      	bhi.n	800aac4 <_strtol_l.constprop.0+0xb4>
 800aac0:	3c37      	subs	r4, #55	@ 0x37
 800aac2:	e7de      	b.n	800aa82 <_strtol_l.constprop.0+0x72>
 800aac4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aac8:	2f19      	cmp	r7, #25
 800aaca:	d804      	bhi.n	800aad6 <_strtol_l.constprop.0+0xc6>
 800aacc:	3c57      	subs	r4, #87	@ 0x57
 800aace:	e7d8      	b.n	800aa82 <_strtol_l.constprop.0+0x72>
 800aad0:	f04f 32ff 	mov.w	r2, #4294967295
 800aad4:	e7e1      	b.n	800aa9a <_strtol_l.constprop.0+0x8a>
 800aad6:	1c53      	adds	r3, r2, #1
 800aad8:	d108      	bne.n	800aaec <_strtol_l.constprop.0+0xdc>
 800aada:	2322      	movs	r3, #34	@ 0x22
 800aadc:	f8ce 3000 	str.w	r3, [lr]
 800aae0:	4660      	mov	r0, ip
 800aae2:	f1b8 0f00 	cmp.w	r8, #0
 800aae6:	d0a0      	beq.n	800aa2a <_strtol_l.constprop.0+0x1a>
 800aae8:	1e69      	subs	r1, r5, #1
 800aaea:	e006      	b.n	800aafa <_strtol_l.constprop.0+0xea>
 800aaec:	b106      	cbz	r6, 800aaf0 <_strtol_l.constprop.0+0xe0>
 800aaee:	4240      	negs	r0, r0
 800aaf0:	f1b8 0f00 	cmp.w	r8, #0
 800aaf4:	d099      	beq.n	800aa2a <_strtol_l.constprop.0+0x1a>
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	d1f6      	bne.n	800aae8 <_strtol_l.constprop.0+0xd8>
 800aafa:	f8c8 1000 	str.w	r1, [r8]
 800aafe:	e794      	b.n	800aa2a <_strtol_l.constprop.0+0x1a>
 800ab00:	0800cd38 	.word	0x0800cd38

0800ab04 <strtol>:
 800ab04:	4613      	mov	r3, r2
 800ab06:	460a      	mov	r2, r1
 800ab08:	4601      	mov	r1, r0
 800ab0a:	4802      	ldr	r0, [pc, #8]	@ (800ab14 <strtol+0x10>)
 800ab0c:	6800      	ldr	r0, [r0, #0]
 800ab0e:	f7ff bf7f 	b.w	800aa10 <_strtol_l.constprop.0>
 800ab12:	bf00      	nop
 800ab14:	2000010c 	.word	0x2000010c

0800ab18 <std>:
 800ab18:	2300      	movs	r3, #0
 800ab1a:	b510      	push	{r4, lr}
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab26:	6083      	str	r3, [r0, #8]
 800ab28:	8181      	strh	r1, [r0, #12]
 800ab2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab2c:	81c2      	strh	r2, [r0, #14]
 800ab2e:	6183      	str	r3, [r0, #24]
 800ab30:	4619      	mov	r1, r3
 800ab32:	2208      	movs	r2, #8
 800ab34:	305c      	adds	r0, #92	@ 0x5c
 800ab36:	f000 f914 	bl	800ad62 <memset>
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <std+0x58>)
 800ab3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab74 <std+0x5c>)
 800ab40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab42:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <std+0x60>)
 800ab44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab46:	4b0d      	ldr	r3, [pc, #52]	@ (800ab7c <std+0x64>)
 800ab48:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab80 <std+0x68>)
 800ab4c:	6224      	str	r4, [r4, #32]
 800ab4e:	429c      	cmp	r4, r3
 800ab50:	d006      	beq.n	800ab60 <std+0x48>
 800ab52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab56:	4294      	cmp	r4, r2
 800ab58:	d002      	beq.n	800ab60 <std+0x48>
 800ab5a:	33d0      	adds	r3, #208	@ 0xd0
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	d105      	bne.n	800ab6c <std+0x54>
 800ab60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab68:	f000 b974 	b.w	800ae54 <__retarget_lock_init_recursive>
 800ab6c:	bd10      	pop	{r4, pc}
 800ab6e:	bf00      	nop
 800ab70:	0800acdd 	.word	0x0800acdd
 800ab74:	0800acff 	.word	0x0800acff
 800ab78:	0800ad37 	.word	0x0800ad37
 800ab7c:	0800ad5b 	.word	0x0800ad5b
 800ab80:	2000216c 	.word	0x2000216c

0800ab84 <stdio_exit_handler>:
 800ab84:	4a02      	ldr	r2, [pc, #8]	@ (800ab90 <stdio_exit_handler+0xc>)
 800ab86:	4903      	ldr	r1, [pc, #12]	@ (800ab94 <stdio_exit_handler+0x10>)
 800ab88:	4803      	ldr	r0, [pc, #12]	@ (800ab98 <stdio_exit_handler+0x14>)
 800ab8a:	f000 b869 	b.w	800ac60 <_fwalk_sglue>
 800ab8e:	bf00      	nop
 800ab90:	20000100 	.word	0x20000100
 800ab94:	0800b789 	.word	0x0800b789
 800ab98:	20000110 	.word	0x20000110

0800ab9c <cleanup_stdio>:
 800ab9c:	6841      	ldr	r1, [r0, #4]
 800ab9e:	4b0c      	ldr	r3, [pc, #48]	@ (800abd0 <cleanup_stdio+0x34>)
 800aba0:	4299      	cmp	r1, r3
 800aba2:	b510      	push	{r4, lr}
 800aba4:	4604      	mov	r4, r0
 800aba6:	d001      	beq.n	800abac <cleanup_stdio+0x10>
 800aba8:	f000 fdee 	bl	800b788 <_fflush_r>
 800abac:	68a1      	ldr	r1, [r4, #8]
 800abae:	4b09      	ldr	r3, [pc, #36]	@ (800abd4 <cleanup_stdio+0x38>)
 800abb0:	4299      	cmp	r1, r3
 800abb2:	d002      	beq.n	800abba <cleanup_stdio+0x1e>
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fde7 	bl	800b788 <_fflush_r>
 800abba:	68e1      	ldr	r1, [r4, #12]
 800abbc:	4b06      	ldr	r3, [pc, #24]	@ (800abd8 <cleanup_stdio+0x3c>)
 800abbe:	4299      	cmp	r1, r3
 800abc0:	d004      	beq.n	800abcc <cleanup_stdio+0x30>
 800abc2:	4620      	mov	r0, r4
 800abc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc8:	f000 bdde 	b.w	800b788 <_fflush_r>
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	2000216c 	.word	0x2000216c
 800abd4:	200021d4 	.word	0x200021d4
 800abd8:	2000223c 	.word	0x2000223c

0800abdc <global_stdio_init.part.0>:
 800abdc:	b510      	push	{r4, lr}
 800abde:	4b0b      	ldr	r3, [pc, #44]	@ (800ac0c <global_stdio_init.part.0+0x30>)
 800abe0:	4c0b      	ldr	r4, [pc, #44]	@ (800ac10 <global_stdio_init.part.0+0x34>)
 800abe2:	4a0c      	ldr	r2, [pc, #48]	@ (800ac14 <global_stdio_init.part.0+0x38>)
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	4620      	mov	r0, r4
 800abe8:	2200      	movs	r2, #0
 800abea:	2104      	movs	r1, #4
 800abec:	f7ff ff94 	bl	800ab18 <std>
 800abf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abf4:	2201      	movs	r2, #1
 800abf6:	2109      	movs	r1, #9
 800abf8:	f7ff ff8e 	bl	800ab18 <std>
 800abfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac00:	2202      	movs	r2, #2
 800ac02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac06:	2112      	movs	r1, #18
 800ac08:	f7ff bf86 	b.w	800ab18 <std>
 800ac0c:	200022a4 	.word	0x200022a4
 800ac10:	2000216c 	.word	0x2000216c
 800ac14:	0800ab85 	.word	0x0800ab85

0800ac18 <__sfp_lock_acquire>:
 800ac18:	4801      	ldr	r0, [pc, #4]	@ (800ac20 <__sfp_lock_acquire+0x8>)
 800ac1a:	f000 b91c 	b.w	800ae56 <__retarget_lock_acquire_recursive>
 800ac1e:	bf00      	nop
 800ac20:	200022ad 	.word	0x200022ad

0800ac24 <__sfp_lock_release>:
 800ac24:	4801      	ldr	r0, [pc, #4]	@ (800ac2c <__sfp_lock_release+0x8>)
 800ac26:	f000 b917 	b.w	800ae58 <__retarget_lock_release_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	200022ad 	.word	0x200022ad

0800ac30 <__sinit>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	4604      	mov	r4, r0
 800ac34:	f7ff fff0 	bl	800ac18 <__sfp_lock_acquire>
 800ac38:	6a23      	ldr	r3, [r4, #32]
 800ac3a:	b11b      	cbz	r3, 800ac44 <__sinit+0x14>
 800ac3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac40:	f7ff bff0 	b.w	800ac24 <__sfp_lock_release>
 800ac44:	4b04      	ldr	r3, [pc, #16]	@ (800ac58 <__sinit+0x28>)
 800ac46:	6223      	str	r3, [r4, #32]
 800ac48:	4b04      	ldr	r3, [pc, #16]	@ (800ac5c <__sinit+0x2c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1f5      	bne.n	800ac3c <__sinit+0xc>
 800ac50:	f7ff ffc4 	bl	800abdc <global_stdio_init.part.0>
 800ac54:	e7f2      	b.n	800ac3c <__sinit+0xc>
 800ac56:	bf00      	nop
 800ac58:	0800ab9d 	.word	0x0800ab9d
 800ac5c:	200022a4 	.word	0x200022a4

0800ac60 <_fwalk_sglue>:
 800ac60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac64:	4607      	mov	r7, r0
 800ac66:	4688      	mov	r8, r1
 800ac68:	4614      	mov	r4, r2
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac70:	f1b9 0901 	subs.w	r9, r9, #1
 800ac74:	d505      	bpl.n	800ac82 <_fwalk_sglue+0x22>
 800ac76:	6824      	ldr	r4, [r4, #0]
 800ac78:	2c00      	cmp	r4, #0
 800ac7a:	d1f7      	bne.n	800ac6c <_fwalk_sglue+0xc>
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d907      	bls.n	800ac98 <_fwalk_sglue+0x38>
 800ac88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	d003      	beq.n	800ac98 <_fwalk_sglue+0x38>
 800ac90:	4629      	mov	r1, r5
 800ac92:	4638      	mov	r0, r7
 800ac94:	47c0      	blx	r8
 800ac96:	4306      	orrs	r6, r0
 800ac98:	3568      	adds	r5, #104	@ 0x68
 800ac9a:	e7e9      	b.n	800ac70 <_fwalk_sglue+0x10>

0800ac9c <siprintf>:
 800ac9c:	b40e      	push	{r1, r2, r3}
 800ac9e:	b500      	push	{lr}
 800aca0:	b09c      	sub	sp, #112	@ 0x70
 800aca2:	ab1d      	add	r3, sp, #116	@ 0x74
 800aca4:	9002      	str	r0, [sp, #8]
 800aca6:	9006      	str	r0, [sp, #24]
 800aca8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acac:	4809      	ldr	r0, [pc, #36]	@ (800acd4 <siprintf+0x38>)
 800acae:	9107      	str	r1, [sp, #28]
 800acb0:	9104      	str	r1, [sp, #16]
 800acb2:	4909      	ldr	r1, [pc, #36]	@ (800acd8 <siprintf+0x3c>)
 800acb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb8:	9105      	str	r1, [sp, #20]
 800acba:	6800      	ldr	r0, [r0, #0]
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	a902      	add	r1, sp, #8
 800acc0:	f000 fa54 	bl	800b16c <_svfiprintf_r>
 800acc4:	9b02      	ldr	r3, [sp, #8]
 800acc6:	2200      	movs	r2, #0
 800acc8:	701a      	strb	r2, [r3, #0]
 800acca:	b01c      	add	sp, #112	@ 0x70
 800accc:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd0:	b003      	add	sp, #12
 800acd2:	4770      	bx	lr
 800acd4:	2000010c 	.word	0x2000010c
 800acd8:	ffff0208 	.word	0xffff0208

0800acdc <__sread>:
 800acdc:	b510      	push	{r4, lr}
 800acde:	460c      	mov	r4, r1
 800ace0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace4:	f000 f868 	bl	800adb8 <_read_r>
 800ace8:	2800      	cmp	r0, #0
 800acea:	bfab      	itete	ge
 800acec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800acee:	89a3      	ldrhlt	r3, [r4, #12]
 800acf0:	181b      	addge	r3, r3, r0
 800acf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acf6:	bfac      	ite	ge
 800acf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800acfa:	81a3      	strhlt	r3, [r4, #12]
 800acfc:	bd10      	pop	{r4, pc}

0800acfe <__swrite>:
 800acfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	461f      	mov	r7, r3
 800ad04:	898b      	ldrh	r3, [r1, #12]
 800ad06:	05db      	lsls	r3, r3, #23
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	4616      	mov	r6, r2
 800ad0e:	d505      	bpl.n	800ad1c <__swrite+0x1e>
 800ad10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad14:	2302      	movs	r3, #2
 800ad16:	2200      	movs	r2, #0
 800ad18:	f000 f83c 	bl	800ad94 <_lseek_r>
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	4632      	mov	r2, r6
 800ad2a:	463b      	mov	r3, r7
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad32:	f000 b853 	b.w	800addc <_write_r>

0800ad36 <__sseek>:
 800ad36:	b510      	push	{r4, lr}
 800ad38:	460c      	mov	r4, r1
 800ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3e:	f000 f829 	bl	800ad94 <_lseek_r>
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	bf15      	itete	ne
 800ad48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad52:	81a3      	strheq	r3, [r4, #12]
 800ad54:	bf18      	it	ne
 800ad56:	81a3      	strhne	r3, [r4, #12]
 800ad58:	bd10      	pop	{r4, pc}

0800ad5a <__sclose>:
 800ad5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5e:	f000 b809 	b.w	800ad74 <_close_r>

0800ad62 <memset>:
 800ad62:	4402      	add	r2, r0
 800ad64:	4603      	mov	r3, r0
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d100      	bne.n	800ad6c <memset+0xa>
 800ad6a:	4770      	bx	lr
 800ad6c:	f803 1b01 	strb.w	r1, [r3], #1
 800ad70:	e7f9      	b.n	800ad66 <memset+0x4>
	...

0800ad74 <_close_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d06      	ldr	r5, [pc, #24]	@ (800ad90 <_close_r+0x1c>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f6 fbf2 	bl	8001568 <_close>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_close_r+0x1a>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_close_r+0x1a>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	200022a8 	.word	0x200022a8

0800ad94 <_lseek_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d07      	ldr	r5, [pc, #28]	@ (800adb4 <_lseek_r+0x20>)
 800ad98:	4604      	mov	r4, r0
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f7f6 fc07 	bl	80015b6 <_lseek>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_lseek_r+0x1e>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_lseek_r+0x1e>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	200022a8 	.word	0x200022a8

0800adb8 <_read_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4d07      	ldr	r5, [pc, #28]	@ (800add8 <_read_r+0x20>)
 800adbc:	4604      	mov	r4, r0
 800adbe:	4608      	mov	r0, r1
 800adc0:	4611      	mov	r1, r2
 800adc2:	2200      	movs	r2, #0
 800adc4:	602a      	str	r2, [r5, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	f7f6 fb95 	bl	80014f6 <_read>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	d102      	bne.n	800add6 <_read_r+0x1e>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	b103      	cbz	r3, 800add6 <_read_r+0x1e>
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	bd38      	pop	{r3, r4, r5, pc}
 800add8:	200022a8 	.word	0x200022a8

0800addc <_write_r>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	4d07      	ldr	r5, [pc, #28]	@ (800adfc <_write_r+0x20>)
 800ade0:	4604      	mov	r4, r0
 800ade2:	4608      	mov	r0, r1
 800ade4:	4611      	mov	r1, r2
 800ade6:	2200      	movs	r2, #0
 800ade8:	602a      	str	r2, [r5, #0]
 800adea:	461a      	mov	r2, r3
 800adec:	f7f6 fba0 	bl	8001530 <_write>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d102      	bne.n	800adfa <_write_r+0x1e>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	b103      	cbz	r3, 800adfa <_write_r+0x1e>
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
 800adfc:	200022a8 	.word	0x200022a8

0800ae00 <__errno>:
 800ae00:	4b01      	ldr	r3, [pc, #4]	@ (800ae08 <__errno+0x8>)
 800ae02:	6818      	ldr	r0, [r3, #0]
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	2000010c 	.word	0x2000010c

0800ae0c <__libc_init_array>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	4d0d      	ldr	r5, [pc, #52]	@ (800ae44 <__libc_init_array+0x38>)
 800ae10:	4c0d      	ldr	r4, [pc, #52]	@ (800ae48 <__libc_init_array+0x3c>)
 800ae12:	1b64      	subs	r4, r4, r5
 800ae14:	10a4      	asrs	r4, r4, #2
 800ae16:	2600      	movs	r6, #0
 800ae18:	42a6      	cmp	r6, r4
 800ae1a:	d109      	bne.n	800ae30 <__libc_init_array+0x24>
 800ae1c:	4d0b      	ldr	r5, [pc, #44]	@ (800ae4c <__libc_init_array+0x40>)
 800ae1e:	4c0c      	ldr	r4, [pc, #48]	@ (800ae50 <__libc_init_array+0x44>)
 800ae20:	f000 fff0 	bl	800be04 <_init>
 800ae24:	1b64      	subs	r4, r4, r5
 800ae26:	10a4      	asrs	r4, r4, #2
 800ae28:	2600      	movs	r6, #0
 800ae2a:	42a6      	cmp	r6, r4
 800ae2c:	d105      	bne.n	800ae3a <__libc_init_array+0x2e>
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae34:	4798      	blx	r3
 800ae36:	3601      	adds	r6, #1
 800ae38:	e7ee      	b.n	800ae18 <__libc_init_array+0xc>
 800ae3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3e:	4798      	blx	r3
 800ae40:	3601      	adds	r6, #1
 800ae42:	e7f2      	b.n	800ae2a <__libc_init_array+0x1e>
 800ae44:	0800ceb0 	.word	0x0800ceb0
 800ae48:	0800ceb0 	.word	0x0800ceb0
 800ae4c:	0800ceb0 	.word	0x0800ceb0
 800ae50:	0800ceb4 	.word	0x0800ceb4

0800ae54 <__retarget_lock_init_recursive>:
 800ae54:	4770      	bx	lr

0800ae56 <__retarget_lock_acquire_recursive>:
 800ae56:	4770      	bx	lr

0800ae58 <__retarget_lock_release_recursive>:
 800ae58:	4770      	bx	lr

0800ae5a <memcpy>:
 800ae5a:	440a      	add	r2, r1
 800ae5c:	4291      	cmp	r1, r2
 800ae5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae62:	d100      	bne.n	800ae66 <memcpy+0xc>
 800ae64:	4770      	bx	lr
 800ae66:	b510      	push	{r4, lr}
 800ae68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae70:	4291      	cmp	r1, r2
 800ae72:	d1f9      	bne.n	800ae68 <memcpy+0xe>
 800ae74:	bd10      	pop	{r4, pc}
	...

0800ae78 <__assert_func>:
 800ae78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae7a:	4614      	mov	r4, r2
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	4b09      	ldr	r3, [pc, #36]	@ (800aea4 <__assert_func+0x2c>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4605      	mov	r5, r0
 800ae84:	68d8      	ldr	r0, [r3, #12]
 800ae86:	b954      	cbnz	r4, 800ae9e <__assert_func+0x26>
 800ae88:	4b07      	ldr	r3, [pc, #28]	@ (800aea8 <__assert_func+0x30>)
 800ae8a:	461c      	mov	r4, r3
 800ae8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae90:	9100      	str	r1, [sp, #0]
 800ae92:	462b      	mov	r3, r5
 800ae94:	4905      	ldr	r1, [pc, #20]	@ (800aeac <__assert_func+0x34>)
 800ae96:	f000 fc9f 	bl	800b7d8 <fiprintf>
 800ae9a:	f000 fcd9 	bl	800b850 <abort>
 800ae9e:	4b04      	ldr	r3, [pc, #16]	@ (800aeb0 <__assert_func+0x38>)
 800aea0:	e7f4      	b.n	800ae8c <__assert_func+0x14>
 800aea2:	bf00      	nop
 800aea4:	2000010c 	.word	0x2000010c
 800aea8:	0800ce73 	.word	0x0800ce73
 800aeac:	0800ce45 	.word	0x0800ce45
 800aeb0:	0800ce38 	.word	0x0800ce38

0800aeb4 <_free_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	2900      	cmp	r1, #0
 800aeba:	d041      	beq.n	800af40 <_free_r+0x8c>
 800aebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec0:	1f0c      	subs	r4, r1, #4
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bfb8      	it	lt
 800aec6:	18e4      	addlt	r4, r4, r3
 800aec8:	f000 f8e8 	bl	800b09c <__malloc_lock>
 800aecc:	4a1d      	ldr	r2, [pc, #116]	@ (800af44 <_free_r+0x90>)
 800aece:	6813      	ldr	r3, [r2, #0]
 800aed0:	b933      	cbnz	r3, 800aee0 <_free_r+0x2c>
 800aed2:	6063      	str	r3, [r4, #4]
 800aed4:	6014      	str	r4, [r2, #0]
 800aed6:	4628      	mov	r0, r5
 800aed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aedc:	f000 b8e4 	b.w	800b0a8 <__malloc_unlock>
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	d908      	bls.n	800aef6 <_free_r+0x42>
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	1821      	adds	r1, r4, r0
 800aee8:	428b      	cmp	r3, r1
 800aeea:	bf01      	itttt	eq
 800aeec:	6819      	ldreq	r1, [r3, #0]
 800aeee:	685b      	ldreq	r3, [r3, #4]
 800aef0:	1809      	addeq	r1, r1, r0
 800aef2:	6021      	streq	r1, [r4, #0]
 800aef4:	e7ed      	b.n	800aed2 <_free_r+0x1e>
 800aef6:	461a      	mov	r2, r3
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	b10b      	cbz	r3, 800af00 <_free_r+0x4c>
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	d9fa      	bls.n	800aef6 <_free_r+0x42>
 800af00:	6811      	ldr	r1, [r2, #0]
 800af02:	1850      	adds	r0, r2, r1
 800af04:	42a0      	cmp	r0, r4
 800af06:	d10b      	bne.n	800af20 <_free_r+0x6c>
 800af08:	6820      	ldr	r0, [r4, #0]
 800af0a:	4401      	add	r1, r0
 800af0c:	1850      	adds	r0, r2, r1
 800af0e:	4283      	cmp	r3, r0
 800af10:	6011      	str	r1, [r2, #0]
 800af12:	d1e0      	bne.n	800aed6 <_free_r+0x22>
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	6053      	str	r3, [r2, #4]
 800af1a:	4408      	add	r0, r1
 800af1c:	6010      	str	r0, [r2, #0]
 800af1e:	e7da      	b.n	800aed6 <_free_r+0x22>
 800af20:	d902      	bls.n	800af28 <_free_r+0x74>
 800af22:	230c      	movs	r3, #12
 800af24:	602b      	str	r3, [r5, #0]
 800af26:	e7d6      	b.n	800aed6 <_free_r+0x22>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	1821      	adds	r1, r4, r0
 800af2c:	428b      	cmp	r3, r1
 800af2e:	bf04      	itt	eq
 800af30:	6819      	ldreq	r1, [r3, #0]
 800af32:	685b      	ldreq	r3, [r3, #4]
 800af34:	6063      	str	r3, [r4, #4]
 800af36:	bf04      	itt	eq
 800af38:	1809      	addeq	r1, r1, r0
 800af3a:	6021      	streq	r1, [r4, #0]
 800af3c:	6054      	str	r4, [r2, #4]
 800af3e:	e7ca      	b.n	800aed6 <_free_r+0x22>
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	200022b4 	.word	0x200022b4

0800af48 <malloc>:
 800af48:	4b02      	ldr	r3, [pc, #8]	@ (800af54 <malloc+0xc>)
 800af4a:	4601      	mov	r1, r0
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	f000 b825 	b.w	800af9c <_malloc_r>
 800af52:	bf00      	nop
 800af54:	2000010c 	.word	0x2000010c

0800af58 <sbrk_aligned>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	4e0f      	ldr	r6, [pc, #60]	@ (800af98 <sbrk_aligned+0x40>)
 800af5c:	460c      	mov	r4, r1
 800af5e:	6831      	ldr	r1, [r6, #0]
 800af60:	4605      	mov	r5, r0
 800af62:	b911      	cbnz	r1, 800af6a <sbrk_aligned+0x12>
 800af64:	f000 fc64 	bl	800b830 <_sbrk_r>
 800af68:	6030      	str	r0, [r6, #0]
 800af6a:	4621      	mov	r1, r4
 800af6c:	4628      	mov	r0, r5
 800af6e:	f000 fc5f 	bl	800b830 <_sbrk_r>
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	d103      	bne.n	800af7e <sbrk_aligned+0x26>
 800af76:	f04f 34ff 	mov.w	r4, #4294967295
 800af7a:	4620      	mov	r0, r4
 800af7c:	bd70      	pop	{r4, r5, r6, pc}
 800af7e:	1cc4      	adds	r4, r0, #3
 800af80:	f024 0403 	bic.w	r4, r4, #3
 800af84:	42a0      	cmp	r0, r4
 800af86:	d0f8      	beq.n	800af7a <sbrk_aligned+0x22>
 800af88:	1a21      	subs	r1, r4, r0
 800af8a:	4628      	mov	r0, r5
 800af8c:	f000 fc50 	bl	800b830 <_sbrk_r>
 800af90:	3001      	adds	r0, #1
 800af92:	d1f2      	bne.n	800af7a <sbrk_aligned+0x22>
 800af94:	e7ef      	b.n	800af76 <sbrk_aligned+0x1e>
 800af96:	bf00      	nop
 800af98:	200022b0 	.word	0x200022b0

0800af9c <_malloc_r>:
 800af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	1ccd      	adds	r5, r1, #3
 800afa2:	f025 0503 	bic.w	r5, r5, #3
 800afa6:	3508      	adds	r5, #8
 800afa8:	2d0c      	cmp	r5, #12
 800afaa:	bf38      	it	cc
 800afac:	250c      	movcc	r5, #12
 800afae:	2d00      	cmp	r5, #0
 800afb0:	4606      	mov	r6, r0
 800afb2:	db01      	blt.n	800afb8 <_malloc_r+0x1c>
 800afb4:	42a9      	cmp	r1, r5
 800afb6:	d904      	bls.n	800afc2 <_malloc_r+0x26>
 800afb8:	230c      	movs	r3, #12
 800afba:	6033      	str	r3, [r6, #0]
 800afbc:	2000      	movs	r0, #0
 800afbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b098 <_malloc_r+0xfc>
 800afc6:	f000 f869 	bl	800b09c <__malloc_lock>
 800afca:	f8d8 3000 	ldr.w	r3, [r8]
 800afce:	461c      	mov	r4, r3
 800afd0:	bb44      	cbnz	r4, 800b024 <_malloc_r+0x88>
 800afd2:	4629      	mov	r1, r5
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7ff ffbf 	bl	800af58 <sbrk_aligned>
 800afda:	1c43      	adds	r3, r0, #1
 800afdc:	4604      	mov	r4, r0
 800afde:	d158      	bne.n	800b092 <_malloc_r+0xf6>
 800afe0:	f8d8 4000 	ldr.w	r4, [r8]
 800afe4:	4627      	mov	r7, r4
 800afe6:	2f00      	cmp	r7, #0
 800afe8:	d143      	bne.n	800b072 <_malloc_r+0xd6>
 800afea:	2c00      	cmp	r4, #0
 800afec:	d04b      	beq.n	800b086 <_malloc_r+0xea>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	4639      	mov	r1, r7
 800aff2:	4630      	mov	r0, r6
 800aff4:	eb04 0903 	add.w	r9, r4, r3
 800aff8:	f000 fc1a 	bl	800b830 <_sbrk_r>
 800affc:	4581      	cmp	r9, r0
 800affe:	d142      	bne.n	800b086 <_malloc_r+0xea>
 800b000:	6821      	ldr	r1, [r4, #0]
 800b002:	1a6d      	subs	r5, r5, r1
 800b004:	4629      	mov	r1, r5
 800b006:	4630      	mov	r0, r6
 800b008:	f7ff ffa6 	bl	800af58 <sbrk_aligned>
 800b00c:	3001      	adds	r0, #1
 800b00e:	d03a      	beq.n	800b086 <_malloc_r+0xea>
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	442b      	add	r3, r5
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	f8d8 3000 	ldr.w	r3, [r8]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	bb62      	cbnz	r2, 800b078 <_malloc_r+0xdc>
 800b01e:	f8c8 7000 	str.w	r7, [r8]
 800b022:	e00f      	b.n	800b044 <_malloc_r+0xa8>
 800b024:	6822      	ldr	r2, [r4, #0]
 800b026:	1b52      	subs	r2, r2, r5
 800b028:	d420      	bmi.n	800b06c <_malloc_r+0xd0>
 800b02a:	2a0b      	cmp	r2, #11
 800b02c:	d917      	bls.n	800b05e <_malloc_r+0xc2>
 800b02e:	1961      	adds	r1, r4, r5
 800b030:	42a3      	cmp	r3, r4
 800b032:	6025      	str	r5, [r4, #0]
 800b034:	bf18      	it	ne
 800b036:	6059      	strne	r1, [r3, #4]
 800b038:	6863      	ldr	r3, [r4, #4]
 800b03a:	bf08      	it	eq
 800b03c:	f8c8 1000 	streq.w	r1, [r8]
 800b040:	5162      	str	r2, [r4, r5]
 800b042:	604b      	str	r3, [r1, #4]
 800b044:	4630      	mov	r0, r6
 800b046:	f000 f82f 	bl	800b0a8 <__malloc_unlock>
 800b04a:	f104 000b 	add.w	r0, r4, #11
 800b04e:	1d23      	adds	r3, r4, #4
 800b050:	f020 0007 	bic.w	r0, r0, #7
 800b054:	1ac2      	subs	r2, r0, r3
 800b056:	bf1c      	itt	ne
 800b058:	1a1b      	subne	r3, r3, r0
 800b05a:	50a3      	strne	r3, [r4, r2]
 800b05c:	e7af      	b.n	800afbe <_malloc_r+0x22>
 800b05e:	6862      	ldr	r2, [r4, #4]
 800b060:	42a3      	cmp	r3, r4
 800b062:	bf0c      	ite	eq
 800b064:	f8c8 2000 	streq.w	r2, [r8]
 800b068:	605a      	strne	r2, [r3, #4]
 800b06a:	e7eb      	b.n	800b044 <_malloc_r+0xa8>
 800b06c:	4623      	mov	r3, r4
 800b06e:	6864      	ldr	r4, [r4, #4]
 800b070:	e7ae      	b.n	800afd0 <_malloc_r+0x34>
 800b072:	463c      	mov	r4, r7
 800b074:	687f      	ldr	r7, [r7, #4]
 800b076:	e7b6      	b.n	800afe6 <_malloc_r+0x4a>
 800b078:	461a      	mov	r2, r3
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	42a3      	cmp	r3, r4
 800b07e:	d1fb      	bne.n	800b078 <_malloc_r+0xdc>
 800b080:	2300      	movs	r3, #0
 800b082:	6053      	str	r3, [r2, #4]
 800b084:	e7de      	b.n	800b044 <_malloc_r+0xa8>
 800b086:	230c      	movs	r3, #12
 800b088:	6033      	str	r3, [r6, #0]
 800b08a:	4630      	mov	r0, r6
 800b08c:	f000 f80c 	bl	800b0a8 <__malloc_unlock>
 800b090:	e794      	b.n	800afbc <_malloc_r+0x20>
 800b092:	6005      	str	r5, [r0, #0]
 800b094:	e7d6      	b.n	800b044 <_malloc_r+0xa8>
 800b096:	bf00      	nop
 800b098:	200022b4 	.word	0x200022b4

0800b09c <__malloc_lock>:
 800b09c:	4801      	ldr	r0, [pc, #4]	@ (800b0a4 <__malloc_lock+0x8>)
 800b09e:	f7ff beda 	b.w	800ae56 <__retarget_lock_acquire_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	200022ac 	.word	0x200022ac

0800b0a8 <__malloc_unlock>:
 800b0a8:	4801      	ldr	r0, [pc, #4]	@ (800b0b0 <__malloc_unlock+0x8>)
 800b0aa:	f7ff bed5 	b.w	800ae58 <__retarget_lock_release_recursive>
 800b0ae:	bf00      	nop
 800b0b0:	200022ac 	.word	0x200022ac

0800b0b4 <__ssputs_r>:
 800b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	688e      	ldr	r6, [r1, #8]
 800b0ba:	461f      	mov	r7, r3
 800b0bc:	42be      	cmp	r6, r7
 800b0be:	680b      	ldr	r3, [r1, #0]
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	4690      	mov	r8, r2
 800b0c6:	d82d      	bhi.n	800b124 <__ssputs_r+0x70>
 800b0c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0d0:	d026      	beq.n	800b120 <__ssputs_r+0x6c>
 800b0d2:	6965      	ldr	r5, [r4, #20]
 800b0d4:	6909      	ldr	r1, [r1, #16]
 800b0d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0da:	eba3 0901 	sub.w	r9, r3, r1
 800b0de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0e2:	1c7b      	adds	r3, r7, #1
 800b0e4:	444b      	add	r3, r9
 800b0e6:	106d      	asrs	r5, r5, #1
 800b0e8:	429d      	cmp	r5, r3
 800b0ea:	bf38      	it	cc
 800b0ec:	461d      	movcc	r5, r3
 800b0ee:	0553      	lsls	r3, r2, #21
 800b0f0:	d527      	bpl.n	800b142 <__ssputs_r+0x8e>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	f7ff ff52 	bl	800af9c <_malloc_r>
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	b360      	cbz	r0, 800b156 <__ssputs_r+0xa2>
 800b0fc:	6921      	ldr	r1, [r4, #16]
 800b0fe:	464a      	mov	r2, r9
 800b100:	f7ff feab 	bl	800ae5a <memcpy>
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	6126      	str	r6, [r4, #16]
 800b112:	6165      	str	r5, [r4, #20]
 800b114:	444e      	add	r6, r9
 800b116:	eba5 0509 	sub.w	r5, r5, r9
 800b11a:	6026      	str	r6, [r4, #0]
 800b11c:	60a5      	str	r5, [r4, #8]
 800b11e:	463e      	mov	r6, r7
 800b120:	42be      	cmp	r6, r7
 800b122:	d900      	bls.n	800b126 <__ssputs_r+0x72>
 800b124:	463e      	mov	r6, r7
 800b126:	6820      	ldr	r0, [r4, #0]
 800b128:	4632      	mov	r2, r6
 800b12a:	4641      	mov	r1, r8
 800b12c:	f000 fb66 	bl	800b7fc <memmove>
 800b130:	68a3      	ldr	r3, [r4, #8]
 800b132:	1b9b      	subs	r3, r3, r6
 800b134:	60a3      	str	r3, [r4, #8]
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	4433      	add	r3, r6
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	2000      	movs	r0, #0
 800b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b142:	462a      	mov	r2, r5
 800b144:	f000 fb8b 	bl	800b85e <_realloc_r>
 800b148:	4606      	mov	r6, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d1e0      	bne.n	800b110 <__ssputs_r+0x5c>
 800b14e:	6921      	ldr	r1, [r4, #16]
 800b150:	4650      	mov	r0, sl
 800b152:	f7ff feaf 	bl	800aeb4 <_free_r>
 800b156:	230c      	movs	r3, #12
 800b158:	f8ca 3000 	str.w	r3, [sl]
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	f04f 30ff 	mov.w	r0, #4294967295
 800b168:	e7e9      	b.n	800b13e <__ssputs_r+0x8a>
	...

0800b16c <_svfiprintf_r>:
 800b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b170:	4698      	mov	r8, r3
 800b172:	898b      	ldrh	r3, [r1, #12]
 800b174:	061b      	lsls	r3, r3, #24
 800b176:	b09d      	sub	sp, #116	@ 0x74
 800b178:	4607      	mov	r7, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	4614      	mov	r4, r2
 800b17e:	d510      	bpl.n	800b1a2 <_svfiprintf_r+0x36>
 800b180:	690b      	ldr	r3, [r1, #16]
 800b182:	b973      	cbnz	r3, 800b1a2 <_svfiprintf_r+0x36>
 800b184:	2140      	movs	r1, #64	@ 0x40
 800b186:	f7ff ff09 	bl	800af9c <_malloc_r>
 800b18a:	6028      	str	r0, [r5, #0]
 800b18c:	6128      	str	r0, [r5, #16]
 800b18e:	b930      	cbnz	r0, 800b19e <_svfiprintf_r+0x32>
 800b190:	230c      	movs	r3, #12
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	b01d      	add	sp, #116	@ 0x74
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	2340      	movs	r3, #64	@ 0x40
 800b1a0:	616b      	str	r3, [r5, #20]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b0:	2330      	movs	r3, #48	@ 0x30
 800b1b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b350 <_svfiprintf_r+0x1e4>
 800b1b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1ba:	f04f 0901 	mov.w	r9, #1
 800b1be:	4623      	mov	r3, r4
 800b1c0:	469a      	mov	sl, r3
 800b1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c6:	b10a      	cbz	r2, 800b1cc <_svfiprintf_r+0x60>
 800b1c8:	2a25      	cmp	r2, #37	@ 0x25
 800b1ca:	d1f9      	bne.n	800b1c0 <_svfiprintf_r+0x54>
 800b1cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d0:	d00b      	beq.n	800b1ea <_svfiprintf_r+0x7e>
 800b1d2:	465b      	mov	r3, fp
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4638      	mov	r0, r7
 800b1da:	f7ff ff6b 	bl	800b0b4 <__ssputs_r>
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f000 80a7 	beq.w	800b332 <_svfiprintf_r+0x1c6>
 800b1e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e6:	445a      	add	r2, fp
 800b1e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 809f 	beq.w	800b332 <_svfiprintf_r+0x1c6>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1fe:	f10a 0a01 	add.w	sl, sl, #1
 800b202:	9304      	str	r3, [sp, #16]
 800b204:	9307      	str	r3, [sp, #28]
 800b206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b20a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b20c:	4654      	mov	r4, sl
 800b20e:	2205      	movs	r2, #5
 800b210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b214:	484e      	ldr	r0, [pc, #312]	@ (800b350 <_svfiprintf_r+0x1e4>)
 800b216:	f7f4 fffb 	bl	8000210 <memchr>
 800b21a:	9a04      	ldr	r2, [sp, #16]
 800b21c:	b9d8      	cbnz	r0, 800b256 <_svfiprintf_r+0xea>
 800b21e:	06d0      	lsls	r0, r2, #27
 800b220:	bf44      	itt	mi
 800b222:	2320      	movmi	r3, #32
 800b224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b228:	0711      	lsls	r1, r2, #28
 800b22a:	bf44      	itt	mi
 800b22c:	232b      	movmi	r3, #43	@ 0x2b
 800b22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b232:	f89a 3000 	ldrb.w	r3, [sl]
 800b236:	2b2a      	cmp	r3, #42	@ 0x2a
 800b238:	d015      	beq.n	800b266 <_svfiprintf_r+0xfa>
 800b23a:	9a07      	ldr	r2, [sp, #28]
 800b23c:	4654      	mov	r4, sl
 800b23e:	2000      	movs	r0, #0
 800b240:	f04f 0c0a 	mov.w	ip, #10
 800b244:	4621      	mov	r1, r4
 800b246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b24a:	3b30      	subs	r3, #48	@ 0x30
 800b24c:	2b09      	cmp	r3, #9
 800b24e:	d94b      	bls.n	800b2e8 <_svfiprintf_r+0x17c>
 800b250:	b1b0      	cbz	r0, 800b280 <_svfiprintf_r+0x114>
 800b252:	9207      	str	r2, [sp, #28]
 800b254:	e014      	b.n	800b280 <_svfiprintf_r+0x114>
 800b256:	eba0 0308 	sub.w	r3, r0, r8
 800b25a:	fa09 f303 	lsl.w	r3, r9, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	46a2      	mov	sl, r4
 800b264:	e7d2      	b.n	800b20c <_svfiprintf_r+0xa0>
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	1d19      	adds	r1, r3, #4
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	9103      	str	r1, [sp, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bfbb      	ittet	lt
 800b272:	425b      	neglt	r3, r3
 800b274:	f042 0202 	orrlt.w	r2, r2, #2
 800b278:	9307      	strge	r3, [sp, #28]
 800b27a:	9307      	strlt	r3, [sp, #28]
 800b27c:	bfb8      	it	lt
 800b27e:	9204      	strlt	r2, [sp, #16]
 800b280:	7823      	ldrb	r3, [r4, #0]
 800b282:	2b2e      	cmp	r3, #46	@ 0x2e
 800b284:	d10a      	bne.n	800b29c <_svfiprintf_r+0x130>
 800b286:	7863      	ldrb	r3, [r4, #1]
 800b288:	2b2a      	cmp	r3, #42	@ 0x2a
 800b28a:	d132      	bne.n	800b2f2 <_svfiprintf_r+0x186>
 800b28c:	9b03      	ldr	r3, [sp, #12]
 800b28e:	1d1a      	adds	r2, r3, #4
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	9203      	str	r2, [sp, #12]
 800b294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b298:	3402      	adds	r4, #2
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b360 <_svfiprintf_r+0x1f4>
 800b2a0:	7821      	ldrb	r1, [r4, #0]
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	4650      	mov	r0, sl
 800b2a6:	f7f4 ffb3 	bl	8000210 <memchr>
 800b2aa:	b138      	cbz	r0, 800b2bc <_svfiprintf_r+0x150>
 800b2ac:	9b04      	ldr	r3, [sp, #16]
 800b2ae:	eba0 000a 	sub.w	r0, r0, sl
 800b2b2:	2240      	movs	r2, #64	@ 0x40
 800b2b4:	4082      	lsls	r2, r0
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	3401      	adds	r4, #1
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c0:	4824      	ldr	r0, [pc, #144]	@ (800b354 <_svfiprintf_r+0x1e8>)
 800b2c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2c6:	2206      	movs	r2, #6
 800b2c8:	f7f4 ffa2 	bl	8000210 <memchr>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d036      	beq.n	800b33e <_svfiprintf_r+0x1d2>
 800b2d0:	4b21      	ldr	r3, [pc, #132]	@ (800b358 <_svfiprintf_r+0x1ec>)
 800b2d2:	bb1b      	cbnz	r3, 800b31c <_svfiprintf_r+0x1b0>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	3307      	adds	r3, #7
 800b2d8:	f023 0307 	bic.w	r3, r3, #7
 800b2dc:	3308      	adds	r3, #8
 800b2de:	9303      	str	r3, [sp, #12]
 800b2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e2:	4433      	add	r3, r6
 800b2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e6:	e76a      	b.n	800b1be <_svfiprintf_r+0x52>
 800b2e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e7a8      	b.n	800b244 <_svfiprintf_r+0xd8>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	3401      	adds	r4, #1
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	f04f 0c0a 	mov.w	ip, #10
 800b2fe:	4620      	mov	r0, r4
 800b300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b304:	3a30      	subs	r2, #48	@ 0x30
 800b306:	2a09      	cmp	r2, #9
 800b308:	d903      	bls.n	800b312 <_svfiprintf_r+0x1a6>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0c6      	beq.n	800b29c <_svfiprintf_r+0x130>
 800b30e:	9105      	str	r1, [sp, #20]
 800b310:	e7c4      	b.n	800b29c <_svfiprintf_r+0x130>
 800b312:	fb0c 2101 	mla	r1, ip, r1, r2
 800b316:	4604      	mov	r4, r0
 800b318:	2301      	movs	r3, #1
 800b31a:	e7f0      	b.n	800b2fe <_svfiprintf_r+0x192>
 800b31c:	ab03      	add	r3, sp, #12
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	462a      	mov	r2, r5
 800b322:	4b0e      	ldr	r3, [pc, #56]	@ (800b35c <_svfiprintf_r+0x1f0>)
 800b324:	a904      	add	r1, sp, #16
 800b326:	4638      	mov	r0, r7
 800b328:	f3af 8000 	nop.w
 800b32c:	1c42      	adds	r2, r0, #1
 800b32e:	4606      	mov	r6, r0
 800b330:	d1d6      	bne.n	800b2e0 <_svfiprintf_r+0x174>
 800b332:	89ab      	ldrh	r3, [r5, #12]
 800b334:	065b      	lsls	r3, r3, #25
 800b336:	f53f af2d 	bmi.w	800b194 <_svfiprintf_r+0x28>
 800b33a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b33c:	e72c      	b.n	800b198 <_svfiprintf_r+0x2c>
 800b33e:	ab03      	add	r3, sp, #12
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	462a      	mov	r2, r5
 800b344:	4b05      	ldr	r3, [pc, #20]	@ (800b35c <_svfiprintf_r+0x1f0>)
 800b346:	a904      	add	r1, sp, #16
 800b348:	4638      	mov	r0, r7
 800b34a:	f000 f879 	bl	800b440 <_printf_i>
 800b34e:	e7ed      	b.n	800b32c <_svfiprintf_r+0x1c0>
 800b350:	0800ce74 	.word	0x0800ce74
 800b354:	0800ce7e 	.word	0x0800ce7e
 800b358:	00000000 	.word	0x00000000
 800b35c:	0800b0b5 	.word	0x0800b0b5
 800b360:	0800ce7a 	.word	0x0800ce7a

0800b364 <_printf_common>:
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	4616      	mov	r6, r2
 800b36a:	4698      	mov	r8, r3
 800b36c:	688a      	ldr	r2, [r1, #8]
 800b36e:	690b      	ldr	r3, [r1, #16]
 800b370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b374:	4293      	cmp	r3, r2
 800b376:	bfb8      	it	lt
 800b378:	4613      	movlt	r3, r2
 800b37a:	6033      	str	r3, [r6, #0]
 800b37c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b380:	4607      	mov	r7, r0
 800b382:	460c      	mov	r4, r1
 800b384:	b10a      	cbz	r2, 800b38a <_printf_common+0x26>
 800b386:	3301      	adds	r3, #1
 800b388:	6033      	str	r3, [r6, #0]
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	0699      	lsls	r1, r3, #26
 800b38e:	bf42      	ittt	mi
 800b390:	6833      	ldrmi	r3, [r6, #0]
 800b392:	3302      	addmi	r3, #2
 800b394:	6033      	strmi	r3, [r6, #0]
 800b396:	6825      	ldr	r5, [r4, #0]
 800b398:	f015 0506 	ands.w	r5, r5, #6
 800b39c:	d106      	bne.n	800b3ac <_printf_common+0x48>
 800b39e:	f104 0a19 	add.w	sl, r4, #25
 800b3a2:	68e3      	ldr	r3, [r4, #12]
 800b3a4:	6832      	ldr	r2, [r6, #0]
 800b3a6:	1a9b      	subs	r3, r3, r2
 800b3a8:	42ab      	cmp	r3, r5
 800b3aa:	dc26      	bgt.n	800b3fa <_printf_common+0x96>
 800b3ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3b0:	6822      	ldr	r2, [r4, #0]
 800b3b2:	3b00      	subs	r3, #0
 800b3b4:	bf18      	it	ne
 800b3b6:	2301      	movne	r3, #1
 800b3b8:	0692      	lsls	r2, r2, #26
 800b3ba:	d42b      	bmi.n	800b414 <_printf_common+0xb0>
 800b3bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	47c8      	blx	r9
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d01e      	beq.n	800b408 <_printf_common+0xa4>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	6922      	ldr	r2, [r4, #16]
 800b3ce:	f003 0306 	and.w	r3, r3, #6
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	bf02      	ittt	eq
 800b3d6:	68e5      	ldreq	r5, [r4, #12]
 800b3d8:	6833      	ldreq	r3, [r6, #0]
 800b3da:	1aed      	subeq	r5, r5, r3
 800b3dc:	68a3      	ldr	r3, [r4, #8]
 800b3de:	bf0c      	ite	eq
 800b3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3e4:	2500      	movne	r5, #0
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	bfc4      	itt	gt
 800b3ea:	1a9b      	subgt	r3, r3, r2
 800b3ec:	18ed      	addgt	r5, r5, r3
 800b3ee:	2600      	movs	r6, #0
 800b3f0:	341a      	adds	r4, #26
 800b3f2:	42b5      	cmp	r5, r6
 800b3f4:	d11a      	bne.n	800b42c <_printf_common+0xc8>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e008      	b.n	800b40c <_printf_common+0xa8>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	4652      	mov	r2, sl
 800b3fe:	4641      	mov	r1, r8
 800b400:	4638      	mov	r0, r7
 800b402:	47c8      	blx	r9
 800b404:	3001      	adds	r0, #1
 800b406:	d103      	bne.n	800b410 <_printf_common+0xac>
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b410:	3501      	adds	r5, #1
 800b412:	e7c6      	b.n	800b3a2 <_printf_common+0x3e>
 800b414:	18e1      	adds	r1, r4, r3
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	2030      	movs	r0, #48	@ 0x30
 800b41a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b41e:	4422      	add	r2, r4
 800b420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b428:	3302      	adds	r3, #2
 800b42a:	e7c7      	b.n	800b3bc <_printf_common+0x58>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4622      	mov	r2, r4
 800b430:	4641      	mov	r1, r8
 800b432:	4638      	mov	r0, r7
 800b434:	47c8      	blx	r9
 800b436:	3001      	adds	r0, #1
 800b438:	d0e6      	beq.n	800b408 <_printf_common+0xa4>
 800b43a:	3601      	adds	r6, #1
 800b43c:	e7d9      	b.n	800b3f2 <_printf_common+0x8e>
	...

0800b440 <_printf_i>:
 800b440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	7e0f      	ldrb	r7, [r1, #24]
 800b446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b448:	2f78      	cmp	r7, #120	@ 0x78
 800b44a:	4691      	mov	r9, r2
 800b44c:	4680      	mov	r8, r0
 800b44e:	460c      	mov	r4, r1
 800b450:	469a      	mov	sl, r3
 800b452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b456:	d807      	bhi.n	800b468 <_printf_i+0x28>
 800b458:	2f62      	cmp	r7, #98	@ 0x62
 800b45a:	d80a      	bhi.n	800b472 <_printf_i+0x32>
 800b45c:	2f00      	cmp	r7, #0
 800b45e:	f000 80d2 	beq.w	800b606 <_printf_i+0x1c6>
 800b462:	2f58      	cmp	r7, #88	@ 0x58
 800b464:	f000 80b9 	beq.w	800b5da <_printf_i+0x19a>
 800b468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b46c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b470:	e03a      	b.n	800b4e8 <_printf_i+0xa8>
 800b472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b476:	2b15      	cmp	r3, #21
 800b478:	d8f6      	bhi.n	800b468 <_printf_i+0x28>
 800b47a:	a101      	add	r1, pc, #4	@ (adr r1, 800b480 <_printf_i+0x40>)
 800b47c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b480:	0800b4d9 	.word	0x0800b4d9
 800b484:	0800b4ed 	.word	0x0800b4ed
 800b488:	0800b469 	.word	0x0800b469
 800b48c:	0800b469 	.word	0x0800b469
 800b490:	0800b469 	.word	0x0800b469
 800b494:	0800b469 	.word	0x0800b469
 800b498:	0800b4ed 	.word	0x0800b4ed
 800b49c:	0800b469 	.word	0x0800b469
 800b4a0:	0800b469 	.word	0x0800b469
 800b4a4:	0800b469 	.word	0x0800b469
 800b4a8:	0800b469 	.word	0x0800b469
 800b4ac:	0800b5ed 	.word	0x0800b5ed
 800b4b0:	0800b517 	.word	0x0800b517
 800b4b4:	0800b5a7 	.word	0x0800b5a7
 800b4b8:	0800b469 	.word	0x0800b469
 800b4bc:	0800b469 	.word	0x0800b469
 800b4c0:	0800b60f 	.word	0x0800b60f
 800b4c4:	0800b469 	.word	0x0800b469
 800b4c8:	0800b517 	.word	0x0800b517
 800b4cc:	0800b469 	.word	0x0800b469
 800b4d0:	0800b469 	.word	0x0800b469
 800b4d4:	0800b5af 	.word	0x0800b5af
 800b4d8:	6833      	ldr	r3, [r6, #0]
 800b4da:	1d1a      	adds	r2, r3, #4
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6032      	str	r2, [r6, #0]
 800b4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e09d      	b.n	800b628 <_printf_i+0x1e8>
 800b4ec:	6833      	ldr	r3, [r6, #0]
 800b4ee:	6820      	ldr	r0, [r4, #0]
 800b4f0:	1d19      	adds	r1, r3, #4
 800b4f2:	6031      	str	r1, [r6, #0]
 800b4f4:	0606      	lsls	r6, r0, #24
 800b4f6:	d501      	bpl.n	800b4fc <_printf_i+0xbc>
 800b4f8:	681d      	ldr	r5, [r3, #0]
 800b4fa:	e003      	b.n	800b504 <_printf_i+0xc4>
 800b4fc:	0645      	lsls	r5, r0, #25
 800b4fe:	d5fb      	bpl.n	800b4f8 <_printf_i+0xb8>
 800b500:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b504:	2d00      	cmp	r5, #0
 800b506:	da03      	bge.n	800b510 <_printf_i+0xd0>
 800b508:	232d      	movs	r3, #45	@ 0x2d
 800b50a:	426d      	negs	r5, r5
 800b50c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b510:	4859      	ldr	r0, [pc, #356]	@ (800b678 <_printf_i+0x238>)
 800b512:	230a      	movs	r3, #10
 800b514:	e011      	b.n	800b53a <_printf_i+0xfa>
 800b516:	6821      	ldr	r1, [r4, #0]
 800b518:	6833      	ldr	r3, [r6, #0]
 800b51a:	0608      	lsls	r0, r1, #24
 800b51c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b520:	d402      	bmi.n	800b528 <_printf_i+0xe8>
 800b522:	0649      	lsls	r1, r1, #25
 800b524:	bf48      	it	mi
 800b526:	b2ad      	uxthmi	r5, r5
 800b528:	2f6f      	cmp	r7, #111	@ 0x6f
 800b52a:	4853      	ldr	r0, [pc, #332]	@ (800b678 <_printf_i+0x238>)
 800b52c:	6033      	str	r3, [r6, #0]
 800b52e:	bf14      	ite	ne
 800b530:	230a      	movne	r3, #10
 800b532:	2308      	moveq	r3, #8
 800b534:	2100      	movs	r1, #0
 800b536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b53a:	6866      	ldr	r6, [r4, #4]
 800b53c:	60a6      	str	r6, [r4, #8]
 800b53e:	2e00      	cmp	r6, #0
 800b540:	bfa2      	ittt	ge
 800b542:	6821      	ldrge	r1, [r4, #0]
 800b544:	f021 0104 	bicge.w	r1, r1, #4
 800b548:	6021      	strge	r1, [r4, #0]
 800b54a:	b90d      	cbnz	r5, 800b550 <_printf_i+0x110>
 800b54c:	2e00      	cmp	r6, #0
 800b54e:	d04b      	beq.n	800b5e8 <_printf_i+0x1a8>
 800b550:	4616      	mov	r6, r2
 800b552:	fbb5 f1f3 	udiv	r1, r5, r3
 800b556:	fb03 5711 	mls	r7, r3, r1, r5
 800b55a:	5dc7      	ldrb	r7, [r0, r7]
 800b55c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b560:	462f      	mov	r7, r5
 800b562:	42bb      	cmp	r3, r7
 800b564:	460d      	mov	r5, r1
 800b566:	d9f4      	bls.n	800b552 <_printf_i+0x112>
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d10b      	bne.n	800b584 <_printf_i+0x144>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	07df      	lsls	r7, r3, #31
 800b570:	d508      	bpl.n	800b584 <_printf_i+0x144>
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	6861      	ldr	r1, [r4, #4]
 800b576:	4299      	cmp	r1, r3
 800b578:	bfde      	ittt	le
 800b57a:	2330      	movle	r3, #48	@ 0x30
 800b57c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b580:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b584:	1b92      	subs	r2, r2, r6
 800b586:	6122      	str	r2, [r4, #16]
 800b588:	f8cd a000 	str.w	sl, [sp]
 800b58c:	464b      	mov	r3, r9
 800b58e:	aa03      	add	r2, sp, #12
 800b590:	4621      	mov	r1, r4
 800b592:	4640      	mov	r0, r8
 800b594:	f7ff fee6 	bl	800b364 <_printf_common>
 800b598:	3001      	adds	r0, #1
 800b59a:	d14a      	bne.n	800b632 <_printf_i+0x1f2>
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	b004      	add	sp, #16
 800b5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	f043 0320 	orr.w	r3, r3, #32
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	4833      	ldr	r0, [pc, #204]	@ (800b67c <_printf_i+0x23c>)
 800b5b0:	2778      	movs	r7, #120	@ 0x78
 800b5b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	6831      	ldr	r1, [r6, #0]
 800b5ba:	061f      	lsls	r7, r3, #24
 800b5bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5c0:	d402      	bmi.n	800b5c8 <_printf_i+0x188>
 800b5c2:	065f      	lsls	r7, r3, #25
 800b5c4:	bf48      	it	mi
 800b5c6:	b2ad      	uxthmi	r5, r5
 800b5c8:	6031      	str	r1, [r6, #0]
 800b5ca:	07d9      	lsls	r1, r3, #31
 800b5cc:	bf44      	itt	mi
 800b5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b5d2:	6023      	strmi	r3, [r4, #0]
 800b5d4:	b11d      	cbz	r5, 800b5de <_printf_i+0x19e>
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	e7ac      	b.n	800b534 <_printf_i+0xf4>
 800b5da:	4827      	ldr	r0, [pc, #156]	@ (800b678 <_printf_i+0x238>)
 800b5dc:	e7e9      	b.n	800b5b2 <_printf_i+0x172>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	f023 0320 	bic.w	r3, r3, #32
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	e7f6      	b.n	800b5d6 <_printf_i+0x196>
 800b5e8:	4616      	mov	r6, r2
 800b5ea:	e7bd      	b.n	800b568 <_printf_i+0x128>
 800b5ec:	6833      	ldr	r3, [r6, #0]
 800b5ee:	6825      	ldr	r5, [r4, #0]
 800b5f0:	6961      	ldr	r1, [r4, #20]
 800b5f2:	1d18      	adds	r0, r3, #4
 800b5f4:	6030      	str	r0, [r6, #0]
 800b5f6:	062e      	lsls	r6, r5, #24
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	d501      	bpl.n	800b600 <_printf_i+0x1c0>
 800b5fc:	6019      	str	r1, [r3, #0]
 800b5fe:	e002      	b.n	800b606 <_printf_i+0x1c6>
 800b600:	0668      	lsls	r0, r5, #25
 800b602:	d5fb      	bpl.n	800b5fc <_printf_i+0x1bc>
 800b604:	8019      	strh	r1, [r3, #0]
 800b606:	2300      	movs	r3, #0
 800b608:	6123      	str	r3, [r4, #16]
 800b60a:	4616      	mov	r6, r2
 800b60c:	e7bc      	b.n	800b588 <_printf_i+0x148>
 800b60e:	6833      	ldr	r3, [r6, #0]
 800b610:	1d1a      	adds	r2, r3, #4
 800b612:	6032      	str	r2, [r6, #0]
 800b614:	681e      	ldr	r6, [r3, #0]
 800b616:	6862      	ldr	r2, [r4, #4]
 800b618:	2100      	movs	r1, #0
 800b61a:	4630      	mov	r0, r6
 800b61c:	f7f4 fdf8 	bl	8000210 <memchr>
 800b620:	b108      	cbz	r0, 800b626 <_printf_i+0x1e6>
 800b622:	1b80      	subs	r0, r0, r6
 800b624:	6060      	str	r0, [r4, #4]
 800b626:	6863      	ldr	r3, [r4, #4]
 800b628:	6123      	str	r3, [r4, #16]
 800b62a:	2300      	movs	r3, #0
 800b62c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b630:	e7aa      	b.n	800b588 <_printf_i+0x148>
 800b632:	6923      	ldr	r3, [r4, #16]
 800b634:	4632      	mov	r2, r6
 800b636:	4649      	mov	r1, r9
 800b638:	4640      	mov	r0, r8
 800b63a:	47d0      	blx	sl
 800b63c:	3001      	adds	r0, #1
 800b63e:	d0ad      	beq.n	800b59c <_printf_i+0x15c>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	079b      	lsls	r3, r3, #30
 800b644:	d413      	bmi.n	800b66e <_printf_i+0x22e>
 800b646:	68e0      	ldr	r0, [r4, #12]
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	4298      	cmp	r0, r3
 800b64c:	bfb8      	it	lt
 800b64e:	4618      	movlt	r0, r3
 800b650:	e7a6      	b.n	800b5a0 <_printf_i+0x160>
 800b652:	2301      	movs	r3, #1
 800b654:	4632      	mov	r2, r6
 800b656:	4649      	mov	r1, r9
 800b658:	4640      	mov	r0, r8
 800b65a:	47d0      	blx	sl
 800b65c:	3001      	adds	r0, #1
 800b65e:	d09d      	beq.n	800b59c <_printf_i+0x15c>
 800b660:	3501      	adds	r5, #1
 800b662:	68e3      	ldr	r3, [r4, #12]
 800b664:	9903      	ldr	r1, [sp, #12]
 800b666:	1a5b      	subs	r3, r3, r1
 800b668:	42ab      	cmp	r3, r5
 800b66a:	dcf2      	bgt.n	800b652 <_printf_i+0x212>
 800b66c:	e7eb      	b.n	800b646 <_printf_i+0x206>
 800b66e:	2500      	movs	r5, #0
 800b670:	f104 0619 	add.w	r6, r4, #25
 800b674:	e7f5      	b.n	800b662 <_printf_i+0x222>
 800b676:	bf00      	nop
 800b678:	0800ce85 	.word	0x0800ce85
 800b67c:	0800ce96 	.word	0x0800ce96

0800b680 <__sflush_r>:
 800b680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b688:	0716      	lsls	r6, r2, #28
 800b68a:	4605      	mov	r5, r0
 800b68c:	460c      	mov	r4, r1
 800b68e:	d454      	bmi.n	800b73a <__sflush_r+0xba>
 800b690:	684b      	ldr	r3, [r1, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	dc02      	bgt.n	800b69c <__sflush_r+0x1c>
 800b696:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dd48      	ble.n	800b72e <__sflush_r+0xae>
 800b69c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b69e:	2e00      	cmp	r6, #0
 800b6a0:	d045      	beq.n	800b72e <__sflush_r+0xae>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6a8:	682f      	ldr	r7, [r5, #0]
 800b6aa:	6a21      	ldr	r1, [r4, #32]
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	d030      	beq.n	800b712 <__sflush_r+0x92>
 800b6b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	0759      	lsls	r1, r3, #29
 800b6b6:	d505      	bpl.n	800b6c4 <__sflush_r+0x44>
 800b6b8:	6863      	ldr	r3, [r4, #4]
 800b6ba:	1ad2      	subs	r2, r2, r3
 800b6bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6be:	b10b      	cbz	r3, 800b6c4 <__sflush_r+0x44>
 800b6c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6c8:	6a21      	ldr	r1, [r4, #32]
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b0      	blx	r6
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	d106      	bne.n	800b6e2 <__sflush_r+0x62>
 800b6d4:	6829      	ldr	r1, [r5, #0]
 800b6d6:	291d      	cmp	r1, #29
 800b6d8:	d82b      	bhi.n	800b732 <__sflush_r+0xb2>
 800b6da:	4a2a      	ldr	r2, [pc, #168]	@ (800b784 <__sflush_r+0x104>)
 800b6dc:	410a      	asrs	r2, r1
 800b6de:	07d6      	lsls	r6, r2, #31
 800b6e0:	d427      	bmi.n	800b732 <__sflush_r+0xb2>
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	6062      	str	r2, [r4, #4]
 800b6e6:	04d9      	lsls	r1, r3, #19
 800b6e8:	6922      	ldr	r2, [r4, #16]
 800b6ea:	6022      	str	r2, [r4, #0]
 800b6ec:	d504      	bpl.n	800b6f8 <__sflush_r+0x78>
 800b6ee:	1c42      	adds	r2, r0, #1
 800b6f0:	d101      	bne.n	800b6f6 <__sflush_r+0x76>
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	b903      	cbnz	r3, 800b6f8 <__sflush_r+0x78>
 800b6f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6fa:	602f      	str	r7, [r5, #0]
 800b6fc:	b1b9      	cbz	r1, 800b72e <__sflush_r+0xae>
 800b6fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b702:	4299      	cmp	r1, r3
 800b704:	d002      	beq.n	800b70c <__sflush_r+0x8c>
 800b706:	4628      	mov	r0, r5
 800b708:	f7ff fbd4 	bl	800aeb4 <_free_r>
 800b70c:	2300      	movs	r3, #0
 800b70e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b710:	e00d      	b.n	800b72e <__sflush_r+0xae>
 800b712:	2301      	movs	r3, #1
 800b714:	4628      	mov	r0, r5
 800b716:	47b0      	blx	r6
 800b718:	4602      	mov	r2, r0
 800b71a:	1c50      	adds	r0, r2, #1
 800b71c:	d1c9      	bne.n	800b6b2 <__sflush_r+0x32>
 800b71e:	682b      	ldr	r3, [r5, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0c6      	beq.n	800b6b2 <__sflush_r+0x32>
 800b724:	2b1d      	cmp	r3, #29
 800b726:	d001      	beq.n	800b72c <__sflush_r+0xac>
 800b728:	2b16      	cmp	r3, #22
 800b72a:	d11e      	bne.n	800b76a <__sflush_r+0xea>
 800b72c:	602f      	str	r7, [r5, #0]
 800b72e:	2000      	movs	r0, #0
 800b730:	e022      	b.n	800b778 <__sflush_r+0xf8>
 800b732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b736:	b21b      	sxth	r3, r3
 800b738:	e01b      	b.n	800b772 <__sflush_r+0xf2>
 800b73a:	690f      	ldr	r7, [r1, #16]
 800b73c:	2f00      	cmp	r7, #0
 800b73e:	d0f6      	beq.n	800b72e <__sflush_r+0xae>
 800b740:	0793      	lsls	r3, r2, #30
 800b742:	680e      	ldr	r6, [r1, #0]
 800b744:	bf08      	it	eq
 800b746:	694b      	ldreq	r3, [r1, #20]
 800b748:	600f      	str	r7, [r1, #0]
 800b74a:	bf18      	it	ne
 800b74c:	2300      	movne	r3, #0
 800b74e:	eba6 0807 	sub.w	r8, r6, r7
 800b752:	608b      	str	r3, [r1, #8]
 800b754:	f1b8 0f00 	cmp.w	r8, #0
 800b758:	dde9      	ble.n	800b72e <__sflush_r+0xae>
 800b75a:	6a21      	ldr	r1, [r4, #32]
 800b75c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b75e:	4643      	mov	r3, r8
 800b760:	463a      	mov	r2, r7
 800b762:	4628      	mov	r0, r5
 800b764:	47b0      	blx	r6
 800b766:	2800      	cmp	r0, #0
 800b768:	dc08      	bgt.n	800b77c <__sflush_r+0xfc>
 800b76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b77c:	4407      	add	r7, r0
 800b77e:	eba8 0800 	sub.w	r8, r8, r0
 800b782:	e7e7      	b.n	800b754 <__sflush_r+0xd4>
 800b784:	dfbffffe 	.word	0xdfbffffe

0800b788 <_fflush_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	690b      	ldr	r3, [r1, #16]
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	b913      	cbnz	r3, 800b798 <_fflush_r+0x10>
 800b792:	2500      	movs	r5, #0
 800b794:	4628      	mov	r0, r5
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	b118      	cbz	r0, 800b7a2 <_fflush_r+0x1a>
 800b79a:	6a03      	ldr	r3, [r0, #32]
 800b79c:	b90b      	cbnz	r3, 800b7a2 <_fflush_r+0x1a>
 800b79e:	f7ff fa47 	bl	800ac30 <__sinit>
 800b7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0f3      	beq.n	800b792 <_fflush_r+0xa>
 800b7aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7ac:	07d0      	lsls	r0, r2, #31
 800b7ae:	d404      	bmi.n	800b7ba <_fflush_r+0x32>
 800b7b0:	0599      	lsls	r1, r3, #22
 800b7b2:	d402      	bmi.n	800b7ba <_fflush_r+0x32>
 800b7b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7b6:	f7ff fb4e 	bl	800ae56 <__retarget_lock_acquire_recursive>
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	4621      	mov	r1, r4
 800b7be:	f7ff ff5f 	bl	800b680 <__sflush_r>
 800b7c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7c4:	07da      	lsls	r2, r3, #31
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	d4e4      	bmi.n	800b794 <_fflush_r+0xc>
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	059b      	lsls	r3, r3, #22
 800b7ce:	d4e1      	bmi.n	800b794 <_fflush_r+0xc>
 800b7d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7d2:	f7ff fb41 	bl	800ae58 <__retarget_lock_release_recursive>
 800b7d6:	e7dd      	b.n	800b794 <_fflush_r+0xc>

0800b7d8 <fiprintf>:
 800b7d8:	b40e      	push	{r1, r2, r3}
 800b7da:	b503      	push	{r0, r1, lr}
 800b7dc:	4601      	mov	r1, r0
 800b7de:	ab03      	add	r3, sp, #12
 800b7e0:	4805      	ldr	r0, [pc, #20]	@ (800b7f8 <fiprintf+0x20>)
 800b7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7e6:	6800      	ldr	r0, [r0, #0]
 800b7e8:	9301      	str	r3, [sp, #4]
 800b7ea:	f000 f88f 	bl	800b90c <_vfiprintf_r>
 800b7ee:	b002      	add	sp, #8
 800b7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7f4:	b003      	add	sp, #12
 800b7f6:	4770      	bx	lr
 800b7f8:	2000010c 	.word	0x2000010c

0800b7fc <memmove>:
 800b7fc:	4288      	cmp	r0, r1
 800b7fe:	b510      	push	{r4, lr}
 800b800:	eb01 0402 	add.w	r4, r1, r2
 800b804:	d902      	bls.n	800b80c <memmove+0x10>
 800b806:	4284      	cmp	r4, r0
 800b808:	4623      	mov	r3, r4
 800b80a:	d807      	bhi.n	800b81c <memmove+0x20>
 800b80c:	1e43      	subs	r3, r0, #1
 800b80e:	42a1      	cmp	r1, r4
 800b810:	d008      	beq.n	800b824 <memmove+0x28>
 800b812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b81a:	e7f8      	b.n	800b80e <memmove+0x12>
 800b81c:	4402      	add	r2, r0
 800b81e:	4601      	mov	r1, r0
 800b820:	428a      	cmp	r2, r1
 800b822:	d100      	bne.n	800b826 <memmove+0x2a>
 800b824:	bd10      	pop	{r4, pc}
 800b826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b82e:	e7f7      	b.n	800b820 <memmove+0x24>

0800b830 <_sbrk_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	@ (800b84c <_sbrk_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f5 fec8 	bl	80015d0 <_sbrk>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_sbrk_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_sbrk_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	200022a8 	.word	0x200022a8

0800b850 <abort>:
 800b850:	b508      	push	{r3, lr}
 800b852:	2006      	movs	r0, #6
 800b854:	f000 fa2e 	bl	800bcb4 <raise>
 800b858:	2001      	movs	r0, #1
 800b85a:	f7f5 fe41 	bl	80014e0 <_exit>

0800b85e <_realloc_r>:
 800b85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b862:	4680      	mov	r8, r0
 800b864:	4615      	mov	r5, r2
 800b866:	460c      	mov	r4, r1
 800b868:	b921      	cbnz	r1, 800b874 <_realloc_r+0x16>
 800b86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b86e:	4611      	mov	r1, r2
 800b870:	f7ff bb94 	b.w	800af9c <_malloc_r>
 800b874:	b92a      	cbnz	r2, 800b882 <_realloc_r+0x24>
 800b876:	f7ff fb1d 	bl	800aeb4 <_free_r>
 800b87a:	2400      	movs	r4, #0
 800b87c:	4620      	mov	r0, r4
 800b87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b882:	f000 fa33 	bl	800bcec <_malloc_usable_size_r>
 800b886:	4285      	cmp	r5, r0
 800b888:	4606      	mov	r6, r0
 800b88a:	d802      	bhi.n	800b892 <_realloc_r+0x34>
 800b88c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b890:	d8f4      	bhi.n	800b87c <_realloc_r+0x1e>
 800b892:	4629      	mov	r1, r5
 800b894:	4640      	mov	r0, r8
 800b896:	f7ff fb81 	bl	800af9c <_malloc_r>
 800b89a:	4607      	mov	r7, r0
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d0ec      	beq.n	800b87a <_realloc_r+0x1c>
 800b8a0:	42b5      	cmp	r5, r6
 800b8a2:	462a      	mov	r2, r5
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	bf28      	it	cs
 800b8a8:	4632      	movcs	r2, r6
 800b8aa:	f7ff fad6 	bl	800ae5a <memcpy>
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	f7ff faff 	bl	800aeb4 <_free_r>
 800b8b6:	463c      	mov	r4, r7
 800b8b8:	e7e0      	b.n	800b87c <_realloc_r+0x1e>

0800b8ba <__sfputc_r>:
 800b8ba:	6893      	ldr	r3, [r2, #8]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	b410      	push	{r4}
 800b8c2:	6093      	str	r3, [r2, #8]
 800b8c4:	da08      	bge.n	800b8d8 <__sfputc_r+0x1e>
 800b8c6:	6994      	ldr	r4, [r2, #24]
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	db01      	blt.n	800b8d0 <__sfputc_r+0x16>
 800b8cc:	290a      	cmp	r1, #10
 800b8ce:	d103      	bne.n	800b8d8 <__sfputc_r+0x1e>
 800b8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d4:	f000 b932 	b.w	800bb3c <__swbuf_r>
 800b8d8:	6813      	ldr	r3, [r2, #0]
 800b8da:	1c58      	adds	r0, r3, #1
 800b8dc:	6010      	str	r0, [r2, #0]
 800b8de:	7019      	strb	r1, [r3, #0]
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <__sfputs_r>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	460f      	mov	r7, r1
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	18d5      	adds	r5, r2, r3
 800b8f2:	42ac      	cmp	r4, r5
 800b8f4:	d101      	bne.n	800b8fa <__sfputs_r+0x12>
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	e007      	b.n	800b90a <__sfputs_r+0x22>
 800b8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fe:	463a      	mov	r2, r7
 800b900:	4630      	mov	r0, r6
 800b902:	f7ff ffda 	bl	800b8ba <__sfputc_r>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d1f3      	bne.n	800b8f2 <__sfputs_r+0xa>
 800b90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b90c <_vfiprintf_r>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	460d      	mov	r5, r1
 800b912:	b09d      	sub	sp, #116	@ 0x74
 800b914:	4614      	mov	r4, r2
 800b916:	4698      	mov	r8, r3
 800b918:	4606      	mov	r6, r0
 800b91a:	b118      	cbz	r0, 800b924 <_vfiprintf_r+0x18>
 800b91c:	6a03      	ldr	r3, [r0, #32]
 800b91e:	b90b      	cbnz	r3, 800b924 <_vfiprintf_r+0x18>
 800b920:	f7ff f986 	bl	800ac30 <__sinit>
 800b924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b926:	07d9      	lsls	r1, r3, #31
 800b928:	d405      	bmi.n	800b936 <_vfiprintf_r+0x2a>
 800b92a:	89ab      	ldrh	r3, [r5, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d402      	bmi.n	800b936 <_vfiprintf_r+0x2a>
 800b930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b932:	f7ff fa90 	bl	800ae56 <__retarget_lock_acquire_recursive>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	071b      	lsls	r3, r3, #28
 800b93a:	d501      	bpl.n	800b940 <_vfiprintf_r+0x34>
 800b93c:	692b      	ldr	r3, [r5, #16]
 800b93e:	b99b      	cbnz	r3, 800b968 <_vfiprintf_r+0x5c>
 800b940:	4629      	mov	r1, r5
 800b942:	4630      	mov	r0, r6
 800b944:	f000 f938 	bl	800bbb8 <__swsetup_r>
 800b948:	b170      	cbz	r0, 800b968 <_vfiprintf_r+0x5c>
 800b94a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b94c:	07dc      	lsls	r4, r3, #31
 800b94e:	d504      	bpl.n	800b95a <_vfiprintf_r+0x4e>
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	b01d      	add	sp, #116	@ 0x74
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	89ab      	ldrh	r3, [r5, #12]
 800b95c:	0598      	lsls	r0, r3, #22
 800b95e:	d4f7      	bmi.n	800b950 <_vfiprintf_r+0x44>
 800b960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b962:	f7ff fa79 	bl	800ae58 <__retarget_lock_release_recursive>
 800b966:	e7f3      	b.n	800b950 <_vfiprintf_r+0x44>
 800b968:	2300      	movs	r3, #0
 800b96a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b96c:	2320      	movs	r3, #32
 800b96e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b972:	f8cd 800c 	str.w	r8, [sp, #12]
 800b976:	2330      	movs	r3, #48	@ 0x30
 800b978:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb28 <_vfiprintf_r+0x21c>
 800b97c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b980:	f04f 0901 	mov.w	r9, #1
 800b984:	4623      	mov	r3, r4
 800b986:	469a      	mov	sl, r3
 800b988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b98c:	b10a      	cbz	r2, 800b992 <_vfiprintf_r+0x86>
 800b98e:	2a25      	cmp	r2, #37	@ 0x25
 800b990:	d1f9      	bne.n	800b986 <_vfiprintf_r+0x7a>
 800b992:	ebba 0b04 	subs.w	fp, sl, r4
 800b996:	d00b      	beq.n	800b9b0 <_vfiprintf_r+0xa4>
 800b998:	465b      	mov	r3, fp
 800b99a:	4622      	mov	r2, r4
 800b99c:	4629      	mov	r1, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f7ff ffa2 	bl	800b8e8 <__sfputs_r>
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f000 80a7 	beq.w	800baf8 <_vfiprintf_r+0x1ec>
 800b9aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9ac:	445a      	add	r2, fp
 800b9ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 809f 	beq.w	800baf8 <_vfiprintf_r+0x1ec>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c4:	f10a 0a01 	add.w	sl, sl, #1
 800b9c8:	9304      	str	r3, [sp, #16]
 800b9ca:	9307      	str	r3, [sp, #28]
 800b9cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9d2:	4654      	mov	r4, sl
 800b9d4:	2205      	movs	r2, #5
 800b9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9da:	4853      	ldr	r0, [pc, #332]	@ (800bb28 <_vfiprintf_r+0x21c>)
 800b9dc:	f7f4 fc18 	bl	8000210 <memchr>
 800b9e0:	9a04      	ldr	r2, [sp, #16]
 800b9e2:	b9d8      	cbnz	r0, 800ba1c <_vfiprintf_r+0x110>
 800b9e4:	06d1      	lsls	r1, r2, #27
 800b9e6:	bf44      	itt	mi
 800b9e8:	2320      	movmi	r3, #32
 800b9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ee:	0713      	lsls	r3, r2, #28
 800b9f0:	bf44      	itt	mi
 800b9f2:	232b      	movmi	r3, #43	@ 0x2b
 800b9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9fe:	d015      	beq.n	800ba2c <_vfiprintf_r+0x120>
 800ba00:	9a07      	ldr	r2, [sp, #28]
 800ba02:	4654      	mov	r4, sl
 800ba04:	2000      	movs	r0, #0
 800ba06:	f04f 0c0a 	mov.w	ip, #10
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba10:	3b30      	subs	r3, #48	@ 0x30
 800ba12:	2b09      	cmp	r3, #9
 800ba14:	d94b      	bls.n	800baae <_vfiprintf_r+0x1a2>
 800ba16:	b1b0      	cbz	r0, 800ba46 <_vfiprintf_r+0x13a>
 800ba18:	9207      	str	r2, [sp, #28]
 800ba1a:	e014      	b.n	800ba46 <_vfiprintf_r+0x13a>
 800ba1c:	eba0 0308 	sub.w	r3, r0, r8
 800ba20:	fa09 f303 	lsl.w	r3, r9, r3
 800ba24:	4313      	orrs	r3, r2
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	46a2      	mov	sl, r4
 800ba2a:	e7d2      	b.n	800b9d2 <_vfiprintf_r+0xc6>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	1d19      	adds	r1, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	9103      	str	r1, [sp, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bfbb      	ittet	lt
 800ba38:	425b      	neglt	r3, r3
 800ba3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3e:	9307      	strge	r3, [sp, #28]
 800ba40:	9307      	strlt	r3, [sp, #28]
 800ba42:	bfb8      	it	lt
 800ba44:	9204      	strlt	r2, [sp, #16]
 800ba46:	7823      	ldrb	r3, [r4, #0]
 800ba48:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba4a:	d10a      	bne.n	800ba62 <_vfiprintf_r+0x156>
 800ba4c:	7863      	ldrb	r3, [r4, #1]
 800ba4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba50:	d132      	bne.n	800bab8 <_vfiprintf_r+0x1ac>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	1d1a      	adds	r2, r3, #4
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	9203      	str	r2, [sp, #12]
 800ba5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba5e:	3402      	adds	r4, #2
 800ba60:	9305      	str	r3, [sp, #20]
 800ba62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb38 <_vfiprintf_r+0x22c>
 800ba66:	7821      	ldrb	r1, [r4, #0]
 800ba68:	2203      	movs	r2, #3
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	f7f4 fbd0 	bl	8000210 <memchr>
 800ba70:	b138      	cbz	r0, 800ba82 <_vfiprintf_r+0x176>
 800ba72:	9b04      	ldr	r3, [sp, #16]
 800ba74:	eba0 000a 	sub.w	r0, r0, sl
 800ba78:	2240      	movs	r2, #64	@ 0x40
 800ba7a:	4082      	lsls	r2, r0
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	3401      	adds	r4, #1
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	4829      	ldr	r0, [pc, #164]	@ (800bb2c <_vfiprintf_r+0x220>)
 800ba88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba8c:	2206      	movs	r2, #6
 800ba8e:	f7f4 fbbf 	bl	8000210 <memchr>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d03f      	beq.n	800bb16 <_vfiprintf_r+0x20a>
 800ba96:	4b26      	ldr	r3, [pc, #152]	@ (800bb30 <_vfiprintf_r+0x224>)
 800ba98:	bb1b      	cbnz	r3, 800bae2 <_vfiprintf_r+0x1d6>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	3307      	adds	r3, #7
 800ba9e:	f023 0307 	bic.w	r3, r3, #7
 800baa2:	3308      	adds	r3, #8
 800baa4:	9303      	str	r3, [sp, #12]
 800baa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa8:	443b      	add	r3, r7
 800baaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800baac:	e76a      	b.n	800b984 <_vfiprintf_r+0x78>
 800baae:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab2:	460c      	mov	r4, r1
 800bab4:	2001      	movs	r0, #1
 800bab6:	e7a8      	b.n	800ba0a <_vfiprintf_r+0xfe>
 800bab8:	2300      	movs	r3, #0
 800baba:	3401      	adds	r4, #1
 800babc:	9305      	str	r3, [sp, #20]
 800babe:	4619      	mov	r1, r3
 800bac0:	f04f 0c0a 	mov.w	ip, #10
 800bac4:	4620      	mov	r0, r4
 800bac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baca:	3a30      	subs	r2, #48	@ 0x30
 800bacc:	2a09      	cmp	r2, #9
 800bace:	d903      	bls.n	800bad8 <_vfiprintf_r+0x1cc>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0c6      	beq.n	800ba62 <_vfiprintf_r+0x156>
 800bad4:	9105      	str	r1, [sp, #20]
 800bad6:	e7c4      	b.n	800ba62 <_vfiprintf_r+0x156>
 800bad8:	fb0c 2101 	mla	r1, ip, r1, r2
 800badc:	4604      	mov	r4, r0
 800bade:	2301      	movs	r3, #1
 800bae0:	e7f0      	b.n	800bac4 <_vfiprintf_r+0x1b8>
 800bae2:	ab03      	add	r3, sp, #12
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	462a      	mov	r2, r5
 800bae8:	4b12      	ldr	r3, [pc, #72]	@ (800bb34 <_vfiprintf_r+0x228>)
 800baea:	a904      	add	r1, sp, #16
 800baec:	4630      	mov	r0, r6
 800baee:	f3af 8000 	nop.w
 800baf2:	4607      	mov	r7, r0
 800baf4:	1c78      	adds	r0, r7, #1
 800baf6:	d1d6      	bne.n	800baa6 <_vfiprintf_r+0x19a>
 800baf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafa:	07d9      	lsls	r1, r3, #31
 800bafc:	d405      	bmi.n	800bb0a <_vfiprintf_r+0x1fe>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	059a      	lsls	r2, r3, #22
 800bb02:	d402      	bmi.n	800bb0a <_vfiprintf_r+0x1fe>
 800bb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb06:	f7ff f9a7 	bl	800ae58 <__retarget_lock_release_recursive>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	065b      	lsls	r3, r3, #25
 800bb0e:	f53f af1f 	bmi.w	800b950 <_vfiprintf_r+0x44>
 800bb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb14:	e71e      	b.n	800b954 <_vfiprintf_r+0x48>
 800bb16:	ab03      	add	r3, sp, #12
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	462a      	mov	r2, r5
 800bb1c:	4b05      	ldr	r3, [pc, #20]	@ (800bb34 <_vfiprintf_r+0x228>)
 800bb1e:	a904      	add	r1, sp, #16
 800bb20:	4630      	mov	r0, r6
 800bb22:	f7ff fc8d 	bl	800b440 <_printf_i>
 800bb26:	e7e4      	b.n	800baf2 <_vfiprintf_r+0x1e6>
 800bb28:	0800ce74 	.word	0x0800ce74
 800bb2c:	0800ce7e 	.word	0x0800ce7e
 800bb30:	00000000 	.word	0x00000000
 800bb34:	0800b8e9 	.word	0x0800b8e9
 800bb38:	0800ce7a 	.word	0x0800ce7a

0800bb3c <__swbuf_r>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	460e      	mov	r6, r1
 800bb40:	4614      	mov	r4, r2
 800bb42:	4605      	mov	r5, r0
 800bb44:	b118      	cbz	r0, 800bb4e <__swbuf_r+0x12>
 800bb46:	6a03      	ldr	r3, [r0, #32]
 800bb48:	b90b      	cbnz	r3, 800bb4e <__swbuf_r+0x12>
 800bb4a:	f7ff f871 	bl	800ac30 <__sinit>
 800bb4e:	69a3      	ldr	r3, [r4, #24]
 800bb50:	60a3      	str	r3, [r4, #8]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	071a      	lsls	r2, r3, #28
 800bb56:	d501      	bpl.n	800bb5c <__swbuf_r+0x20>
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	b943      	cbnz	r3, 800bb6e <__swbuf_r+0x32>
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f000 f82a 	bl	800bbb8 <__swsetup_r>
 800bb64:	b118      	cbz	r0, 800bb6e <__swbuf_r+0x32>
 800bb66:	f04f 37ff 	mov.w	r7, #4294967295
 800bb6a:	4638      	mov	r0, r7
 800bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	6922      	ldr	r2, [r4, #16]
 800bb72:	1a98      	subs	r0, r3, r2
 800bb74:	6963      	ldr	r3, [r4, #20]
 800bb76:	b2f6      	uxtb	r6, r6
 800bb78:	4283      	cmp	r3, r0
 800bb7a:	4637      	mov	r7, r6
 800bb7c:	dc05      	bgt.n	800bb8a <__swbuf_r+0x4e>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4628      	mov	r0, r5
 800bb82:	f7ff fe01 	bl	800b788 <_fflush_r>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d1ed      	bne.n	800bb66 <__swbuf_r+0x2a>
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	6022      	str	r2, [r4, #0]
 800bb96:	701e      	strb	r6, [r3, #0]
 800bb98:	6962      	ldr	r2, [r4, #20]
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d004      	beq.n	800bbaa <__swbuf_r+0x6e>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	07db      	lsls	r3, r3, #31
 800bba4:	d5e1      	bpl.n	800bb6a <__swbuf_r+0x2e>
 800bba6:	2e0a      	cmp	r6, #10
 800bba8:	d1df      	bne.n	800bb6a <__swbuf_r+0x2e>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f7ff fdeb 	bl	800b788 <_fflush_r>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d0d9      	beq.n	800bb6a <__swbuf_r+0x2e>
 800bbb6:	e7d6      	b.n	800bb66 <__swbuf_r+0x2a>

0800bbb8 <__swsetup_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4b29      	ldr	r3, [pc, #164]	@ (800bc60 <__swsetup_r+0xa8>)
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	6818      	ldr	r0, [r3, #0]
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	b118      	cbz	r0, 800bbcc <__swsetup_r+0x14>
 800bbc4:	6a03      	ldr	r3, [r0, #32]
 800bbc6:	b90b      	cbnz	r3, 800bbcc <__swsetup_r+0x14>
 800bbc8:	f7ff f832 	bl	800ac30 <__sinit>
 800bbcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd0:	0719      	lsls	r1, r3, #28
 800bbd2:	d422      	bmi.n	800bc1a <__swsetup_r+0x62>
 800bbd4:	06da      	lsls	r2, r3, #27
 800bbd6:	d407      	bmi.n	800bbe8 <__swsetup_r+0x30>
 800bbd8:	2209      	movs	r2, #9
 800bbda:	602a      	str	r2, [r5, #0]
 800bbdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe6:	e033      	b.n	800bc50 <__swsetup_r+0x98>
 800bbe8:	0758      	lsls	r0, r3, #29
 800bbea:	d512      	bpl.n	800bc12 <__swsetup_r+0x5a>
 800bbec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbee:	b141      	cbz	r1, 800bc02 <__swsetup_r+0x4a>
 800bbf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbf4:	4299      	cmp	r1, r3
 800bbf6:	d002      	beq.n	800bbfe <__swsetup_r+0x46>
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f7ff f95b 	bl	800aeb4 <_free_r>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc08:	81a3      	strh	r3, [r4, #12]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	6063      	str	r3, [r4, #4]
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	f043 0308 	orr.w	r3, r3, #8
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	6923      	ldr	r3, [r4, #16]
 800bc1c:	b94b      	cbnz	r3, 800bc32 <__swsetup_r+0x7a>
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc28:	d003      	beq.n	800bc32 <__swsetup_r+0x7a>
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f000 f88b 	bl	800bd48 <__smakebuf_r>
 800bc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc36:	f013 0201 	ands.w	r2, r3, #1
 800bc3a:	d00a      	beq.n	800bc52 <__swsetup_r+0x9a>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	60a2      	str	r2, [r4, #8]
 800bc40:	6962      	ldr	r2, [r4, #20]
 800bc42:	4252      	negs	r2, r2
 800bc44:	61a2      	str	r2, [r4, #24]
 800bc46:	6922      	ldr	r2, [r4, #16]
 800bc48:	b942      	cbnz	r2, 800bc5c <__swsetup_r+0xa4>
 800bc4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc4e:	d1c5      	bne.n	800bbdc <__swsetup_r+0x24>
 800bc50:	bd38      	pop	{r3, r4, r5, pc}
 800bc52:	0799      	lsls	r1, r3, #30
 800bc54:	bf58      	it	pl
 800bc56:	6962      	ldrpl	r2, [r4, #20]
 800bc58:	60a2      	str	r2, [r4, #8]
 800bc5a:	e7f4      	b.n	800bc46 <__swsetup_r+0x8e>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e7f7      	b.n	800bc50 <__swsetup_r+0x98>
 800bc60:	2000010c 	.word	0x2000010c

0800bc64 <_raise_r>:
 800bc64:	291f      	cmp	r1, #31
 800bc66:	b538      	push	{r3, r4, r5, lr}
 800bc68:	4605      	mov	r5, r0
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	d904      	bls.n	800bc78 <_raise_r+0x14>
 800bc6e:	2316      	movs	r3, #22
 800bc70:	6003      	str	r3, [r0, #0]
 800bc72:	f04f 30ff 	mov.w	r0, #4294967295
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc7a:	b112      	cbz	r2, 800bc82 <_raise_r+0x1e>
 800bc7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc80:	b94b      	cbnz	r3, 800bc96 <_raise_r+0x32>
 800bc82:	4628      	mov	r0, r5
 800bc84:	f000 f830 	bl	800bce8 <_getpid_r>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc92:	f000 b817 	b.w	800bcc4 <_kill_r>
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d00a      	beq.n	800bcb0 <_raise_r+0x4c>
 800bc9a:	1c59      	adds	r1, r3, #1
 800bc9c:	d103      	bne.n	800bca6 <_raise_r+0x42>
 800bc9e:	2316      	movs	r3, #22
 800bca0:	6003      	str	r3, [r0, #0]
 800bca2:	2001      	movs	r0, #1
 800bca4:	e7e7      	b.n	800bc76 <_raise_r+0x12>
 800bca6:	2100      	movs	r1, #0
 800bca8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bcac:	4620      	mov	r0, r4
 800bcae:	4798      	blx	r3
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	e7e0      	b.n	800bc76 <_raise_r+0x12>

0800bcb4 <raise>:
 800bcb4:	4b02      	ldr	r3, [pc, #8]	@ (800bcc0 <raise+0xc>)
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	f7ff bfd3 	b.w	800bc64 <_raise_r>
 800bcbe:	bf00      	nop
 800bcc0:	2000010c 	.word	0x2000010c

0800bcc4 <_kill_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	@ (800bce4 <_kill_r+0x20>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4604      	mov	r4, r0
 800bccc:	4608      	mov	r0, r1
 800bcce:	4611      	mov	r1, r2
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	f7f5 fbf5 	bl	80014c0 <_kill>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	d102      	bne.n	800bce0 <_kill_r+0x1c>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	b103      	cbz	r3, 800bce0 <_kill_r+0x1c>
 800bcde:	6023      	str	r3, [r4, #0]
 800bce0:	bd38      	pop	{r3, r4, r5, pc}
 800bce2:	bf00      	nop
 800bce4:	200022a8 	.word	0x200022a8

0800bce8 <_getpid_r>:
 800bce8:	f7f5 bbe2 	b.w	80014b0 <_getpid>

0800bcec <_malloc_usable_size_r>:
 800bcec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcf0:	1f18      	subs	r0, r3, #4
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bfbc      	itt	lt
 800bcf6:	580b      	ldrlt	r3, [r1, r0]
 800bcf8:	18c0      	addlt	r0, r0, r3
 800bcfa:	4770      	bx	lr

0800bcfc <__swhatbuf_r>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	460c      	mov	r4, r1
 800bd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd04:	2900      	cmp	r1, #0
 800bd06:	b096      	sub	sp, #88	@ 0x58
 800bd08:	4615      	mov	r5, r2
 800bd0a:	461e      	mov	r6, r3
 800bd0c:	da0d      	bge.n	800bd2a <__swhatbuf_r+0x2e>
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd14:	f04f 0100 	mov.w	r1, #0
 800bd18:	bf14      	ite	ne
 800bd1a:	2340      	movne	r3, #64	@ 0x40
 800bd1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd20:	2000      	movs	r0, #0
 800bd22:	6031      	str	r1, [r6, #0]
 800bd24:	602b      	str	r3, [r5, #0]
 800bd26:	b016      	add	sp, #88	@ 0x58
 800bd28:	bd70      	pop	{r4, r5, r6, pc}
 800bd2a:	466a      	mov	r2, sp
 800bd2c:	f000 f848 	bl	800bdc0 <_fstat_r>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	dbec      	blt.n	800bd0e <__swhatbuf_r+0x12>
 800bd34:	9901      	ldr	r1, [sp, #4]
 800bd36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd3e:	4259      	negs	r1, r3
 800bd40:	4159      	adcs	r1, r3
 800bd42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd46:	e7eb      	b.n	800bd20 <__swhatbuf_r+0x24>

0800bd48 <__smakebuf_r>:
 800bd48:	898b      	ldrh	r3, [r1, #12]
 800bd4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd4c:	079d      	lsls	r5, r3, #30
 800bd4e:	4606      	mov	r6, r0
 800bd50:	460c      	mov	r4, r1
 800bd52:	d507      	bpl.n	800bd64 <__smakebuf_r+0x1c>
 800bd54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	6163      	str	r3, [r4, #20]
 800bd60:	b003      	add	sp, #12
 800bd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd64:	ab01      	add	r3, sp, #4
 800bd66:	466a      	mov	r2, sp
 800bd68:	f7ff ffc8 	bl	800bcfc <__swhatbuf_r>
 800bd6c:	9f00      	ldr	r7, [sp, #0]
 800bd6e:	4605      	mov	r5, r0
 800bd70:	4639      	mov	r1, r7
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7ff f912 	bl	800af9c <_malloc_r>
 800bd78:	b948      	cbnz	r0, 800bd8e <__smakebuf_r+0x46>
 800bd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7e:	059a      	lsls	r2, r3, #22
 800bd80:	d4ee      	bmi.n	800bd60 <__smakebuf_r+0x18>
 800bd82:	f023 0303 	bic.w	r3, r3, #3
 800bd86:	f043 0302 	orr.w	r3, r3, #2
 800bd8a:	81a3      	strh	r3, [r4, #12]
 800bd8c:	e7e2      	b.n	800bd54 <__smakebuf_r+0xc>
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	6020      	str	r0, [r4, #0]
 800bd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	9b01      	ldr	r3, [sp, #4]
 800bd9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd9e:	b15b      	cbz	r3, 800bdb8 <__smakebuf_r+0x70>
 800bda0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda4:	4630      	mov	r0, r6
 800bda6:	f000 f81d 	bl	800bde4 <_isatty_r>
 800bdaa:	b128      	cbz	r0, 800bdb8 <__smakebuf_r+0x70>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f023 0303 	bic.w	r3, r3, #3
 800bdb2:	f043 0301 	orr.w	r3, r3, #1
 800bdb6:	81a3      	strh	r3, [r4, #12]
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	431d      	orrs	r5, r3
 800bdbc:	81a5      	strh	r5, [r4, #12]
 800bdbe:	e7cf      	b.n	800bd60 <__smakebuf_r+0x18>

0800bdc0 <_fstat_r>:
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	4d07      	ldr	r5, [pc, #28]	@ (800bde0 <_fstat_r+0x20>)
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	4608      	mov	r0, r1
 800bdca:	4611      	mov	r1, r2
 800bdcc:	602b      	str	r3, [r5, #0]
 800bdce:	f7f5 fbd7 	bl	8001580 <_fstat>
 800bdd2:	1c43      	adds	r3, r0, #1
 800bdd4:	d102      	bne.n	800bddc <_fstat_r+0x1c>
 800bdd6:	682b      	ldr	r3, [r5, #0]
 800bdd8:	b103      	cbz	r3, 800bddc <_fstat_r+0x1c>
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	bd38      	pop	{r3, r4, r5, pc}
 800bdde:	bf00      	nop
 800bde0:	200022a8 	.word	0x200022a8

0800bde4 <_isatty_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	4d06      	ldr	r5, [pc, #24]	@ (800be00 <_isatty_r+0x1c>)
 800bde8:	2300      	movs	r3, #0
 800bdea:	4604      	mov	r4, r0
 800bdec:	4608      	mov	r0, r1
 800bdee:	602b      	str	r3, [r5, #0]
 800bdf0:	f7f5 fbd6 	bl	80015a0 <_isatty>
 800bdf4:	1c43      	adds	r3, r0, #1
 800bdf6:	d102      	bne.n	800bdfe <_isatty_r+0x1a>
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	b103      	cbz	r3, 800bdfe <_isatty_r+0x1a>
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	200022a8 	.word	0x200022a8

0800be04 <_init>:
 800be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be06:	bf00      	nop
 800be08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0a:	bc08      	pop	{r3}
 800be0c:	469e      	mov	lr, r3
 800be0e:	4770      	bx	lr

0800be10 <_fini>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	bf00      	nop
 800be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be16:	bc08      	pop	{r3}
 800be18:	469e      	mov	lr, r3
 800be1a:	4770      	bx	lr
